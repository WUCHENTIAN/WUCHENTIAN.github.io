<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第十一章 信息与熵</title>
    <link href="/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E4%BF%A1%E6%81%AF%E4%B8%8E%E7%86%B5/"/>
    <url>/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E4%BF%A1%E6%81%AF%E4%B8%8E%E7%86%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="第十一章-信息与熵"><a href="#第十一章-信息与熵" class="headerlink" title="第十一章 信息与熵"></a>第十一章 信息与熵</h2><h3 id="11-1-信息熵"><a href="#11-1-信息熵" class="headerlink" title="11.1 信息熵"></a>11.1 信息熵</h3><h4 id="11-1-1信息与熵"><a href="#11-1-1信息与熵" class="headerlink" title="11.1.1信息与熵"></a>11.1.1信息与熵</h4><p>奈奎斯特，哈特利和香农研究了一类特殊的通信，即技术系统里的通信，他们假设通信的唯一目的是在接受后重新产生输出数据样式——即，信息是为了消除不确定性。香农给出的定义是，当我破门收到一条消息 $m$ 时，假设最初有 $n$ 个事件 $E_1,E_2,…,E_n$ 是等可能的，$E$ 表示他们当中的一个，这些事件有对应的概率 $p_1,p_2,…,p_n$，那么消息 $m$ 的熵为<br>$$<br>H(m) = H(p_1,p_2,…,p_n)=-\sum_{i=1}^np_i\log_2p_i<br>$$<br>其中，对数的底是随机的，如果以 $2$ 为底，则单位为 $bit$，如果以自然对数的底数 $e$ 为底，则单位为 $nat$</p><h4 id="11-1-2-信息熵性质"><a href="#11-1-2-信息熵性质" class="headerlink" title="11.1.2 信息熵性质"></a>11.1.2 信息熵性质</h4><p>香农描述了信息度量的三个性质：单调性，非负性和可加性</p><p>​    &lt;1&gt; 单调性：非确定性越高的事件，其信息量越高</p><p>​    &lt;2&gt; 非负性：信息是非负的，可以看作是概率延伸的必然</p><p>​    &lt;3&gt; 可加性：总信息量可拆解为各部分的信息量累加，这是广度量的一种表现</p><p>​    香农从数学上证明了满足上述三个条件的随机变量不确定性度量函数具有唯一形式：<br>$$<br>H(X)=-C\sum_{x\in X}p(x)\log x<br>$$<br>其中 $C$ 为常数，我们不妨归一化，令 $C = 1$ 就得到了信息熵公式</p><h3 id="11-2-信息熵计算"><a href="#11-2-信息熵计算" class="headerlink" title="11.2 信息熵计算"></a>11.2 信息熵计算</h3><h4 id="11-2-1-联合熵"><a href="#11-2-1-联合熵" class="headerlink" title="11.2.1 联合熵"></a>11.2.1 联合熵</h4><p>联合熵是一个集合中变量之间不确定性的衡量手段</p><h5 id="定义-11-1：联合熵"><a href="#定义-11-1：联合熵" class="headerlink" title="定义 11.1：联合熵"></a>定义 11.1：联合熵</h5><p>对于俩个和离散的随机变量 $X,Y$，联合熵的定义为：<br>$$<br>H(X,Y)=-\sum_x\sum_yp(x,y)\log_2P(x,y)<br>$$<br>其中 $x,y$ 是 $X$ 和 $Y$ 的特定值，相应地，$P(x,y)$ 是这些值一起出现的联合概率。如果 $P(x,y) = 0$，则定义<br>$$<br>P(x,y)\log_2p(x,y)<br>$$<br>对于两个以上的随机变量 $X_1,X_2,…,X_n$，联合熵的定义为：<br>$$<br>H(X_1,X_2,…,X_n)=-\sum_{x_1}\sum_{x_2}…\sum_{x_n}p(x_1,x_2,…,x_n)\log_2p(x_1,x_2…,x_n)<br>$$</p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="联合熵的常用性质"><a href="#联合熵的常用性质" class="headerlink" title="联合熵的常用性质"></a>联合熵的常用性质</h5><p>$$<br>\max_{X_i\in X}{H(X_i)}\leq H(X)\leq \sum_{i=1}^nH(X_i)\<br>X={X_1,X_2,…,X_n}<br>$$</p><h4 id="11-2-2-条件熵"><a href="#11-2-2-条件熵" class="headerlink" title="11.2.2 条件熵"></a>11.2.2 条件熵</h4><p>条件熵量化了在一直一个随机变量 $X$ 的条件下，描述为值得随机变量 $Y$ 所需的信息量。基于 $X$ 条件下 $Y$ 的信息熵，用 $H(Y|X)$ 表示，也就是 $H(Y|X=x)$ 在 $X$ 取遍所有可能的 $x$ 之后平均的结果。</p><p>设给定随机变量 $X,Y$，我们有：<br>$$<br>\begin{equation*}<br>\begin{split}<br>H(Y|X)&amp;=-\sum_xp(x)H(Y|X=x)\<br>&amp;=\sum_x-p(x)\sum_yp(y|x)\log p(y|x)\<br>&amp;=-\sum_{x,y}p(x,y)\log\frac{p(x,y)}{p(x)}<br>\end{split}<br>\end{equation*}<br>$$</p><h5 id="条件熵的常用性质"><a href="#条件熵的常用性质" class="headerlink" title="条件熵的常用性质"></a>条件熵的常用性质</h5><p>​    &lt;1&gt; 条件熵 $H(Y|X)$ 完全等于 $0$ 当且仅当 $Y$ 的值完全取决于 $X$</p><p>​    &lt;2&gt; 条件熵 $H(Y|X)=H(X)$ 当且仅当 $Y$ 和 $X$ 相互独立</p><p>​    &lt;3&gt; 条件熵链式法则：<br>$$<br>H(Y|X)=H(XY)-H(X)<br>$$<br>​    &lt;4&gt; 条件熵的 $Bayes$ 规则<br>$$<br>H(Y|X)+H(X)=H(X|Y)+H(Y)<br>$$</p><h4 id="11-2-3-相对熵"><a href="#11-2-3-相对熵" class="headerlink" title="11.2.3 相对熵"></a>11.2.3 相对熵</h4><h5 id="定义-11-2：相对熵"><a href="#定义-11-2：相对熵" class="headerlink" title="定义 11.2：相对熵"></a>定义 11.2：相对熵</h5><p>相对熵（Relative Entropy）又称为 $KL$ 散度（$Kullback-Leibler\ Divergence$），简称为 $KLD$ 或 信息散度，信息增益。设 $P(x),Q(X)$ 为随机变量 $X$ 上的两个概率分布，相对熵的定义为如下</p><p>对于离散型随机变量：<br>$$<br>D_{KL}(P||Q)=-\sum_{i}P(i)\ln\frac{Q(i)}{P(i)}<br>$$</p><p>对于连续型随机变量：<br>$$<br>D_{KL}(P||Q)=\int_{-\infty}^{+\infty}p(x)\ln\frac{p(x)}{q(x)}<br>$$<br>$KL$ 散度是两个概率分布 $P$ 和 $Q$ 的非对称性的度量，可以用来度量基于 $Q$ 的编码来编码来自 $P$ 的样本所需要的额外的位元数。</p><h5 id="相对熵的基本性质"><a href="#相对熵的基本性质" class="headerlink" title="相对熵的基本性质"></a>相对熵的基本性质</h5><p>​    &lt;1&gt; 非负性：由于对数函数是上凸函数，所以根据相对熵的定义，有 (吉布斯不等式)<br>$$<br>\begin{equation*}<br>\begin{split}<br>D_{KL}(P||Q)&amp;=\sum_{x\in X}\log\frac{P(x)}{Q(x)}\<br>&amp;=-E\bigg[\log\frac{Q(x)}{P(x)}\bigg]\<br>&amp;\geq -\log E(\frac{Q(x)}{P(x)})\<br>&amp;=-\log\sum_{x\in X}P(x)\frac{Q(x)}{P(x)}\<br>&amp;=-\log \bigg[\sum_{x\in X}Q(x)\bigg]\<br>&amp;=0<br>\end{split}<br>\end{equation*}<br>$$<br>​    &lt;2&gt; 不对称性：相对熵是两个概率分布的不对称性的度量，即：<br>$$<br>D_{KL}(P||Q)\not =D_{KL}(Q||P)<br>$$<br>​        我们常使用熵的均值来进行规约:<br>$$<br>let\ D(P,Q)=\frac{[D_{KL}(P||Q)+D_{KL}(Q||P)]}{2}<br>$$</p><h4 id="11-2-4-交叉熵"><a href="#11-2-4-交叉熵" class="headerlink" title="11.2.4 交叉熵"></a>11.2.4 交叉熵</h4><h5 id="交叉熵的定义"><a href="#交叉熵的定义" class="headerlink" title="交叉熵的定义"></a>交叉熵的定义</h5><p>在信息论中，基于相同事件测度的两个概率分布 $p$ 和 $q$ 的交叉熵指的是，当基于一个“非自然”（相对于“真实的”分布 $p$ 而言）的概率分布 $q$ 进行编码时，在事件集合中唯一地标识一个事件所需的平均 $bit$ 数，基于概率分布 $p$ 和 $q$ 的交叉熵定义为：<br>$$<br>H(p,q)=-\int_{X}p(x)\log q(x)dr(x)=E_P(-\log q)=H(p)+D_{KL}(p||q)<br>$$</p><h5 id="交叉熵的基本性质"><a href="#交叉熵的基本性质" class="headerlink" title="交叉熵的基本性质"></a>交叉熵的基本性质</h5><p>​    &lt;1&gt; 不对称性：<br>$$<br>H(A,B)\not =H(B,A)<br>$$</p><h3 id="11-3-信息变化"><a href="#11-3-信息变化" class="headerlink" title="11.3 信息变化"></a>11.3 信息变化</h3><h4 id="11-3-1-互信息"><a href="#11-3-1-互信息" class="headerlink" title="11.3.1 互信息"></a>11.3.1 互信息</h4><h5 id="定义-11-3：互信息（Mutual-Information）"><a href="#定义-11-3：互信息（Mutual-Information）" class="headerlink" title="定义 11.3：互信息（Mutual Information）"></a>定义 11.3：互信息（Mutual Information）</h5><p>对两个离散随机事件集 $X$ 和 $Y$，事件 $y_i$ 的出现给出关于 $x_i$ 的信息量，即为互信息量。</p><p>两个离散随机变量 $X$ 和 $Y$ 的互信息定义为：<br>$$<br>I(X;Y):=\sum_{x\in X}\sum_{y\in Y}p(x,y)\log\bigg(\frac{p(x,y)}{p(x)p(y)}\bigg)<br>$$<br>两个连续随机变量 $X$ 和 $Y$ 的互信息定义为：<br>$$<br>I(X;Y):=\int_X\int_Yp(x,y)\log\bigg(\frac{p(x,y)}{p(x)p(y)}\bigg)dxdy<br>$$<br>其中 $p(x,y)$ 是 $X$ 和 $Y$ 的联合密度函数，$p(x),p(y)$ 分别是 $X$ 和 $Y$ 的边缘概率密度函数</p><h5 id="互信息的基本性质"><a href="#互信息的基本性质" class="headerlink" title="互信息的基本性质"></a>互信息的基本性质</h5><p>​    &lt;1&gt; 如果 $X$ 和 $Y$ 互相独立，则显然地：<br>$$<br>\log\bigg(\frac{p(x,y)}{p(x)p(y)}\bigg)=0<br>$$<br>​    也即他们的互信息为 $0$</p><p>​    &lt;2&gt; 互信息是非负的</p><p>​    &lt;3&gt; 互信息是对称的：<br>$$<br>I(X;Y)=I(Y;X)<br>$$<br>​    &lt;4&gt; 互信息的等价表示：<br>$$<br>\begin{equation*}<br>\begin{split}<br>I(X;Y)&amp;=H(X)-H(X|Y)\<br>&amp;=H(Y)-H(Y|X)\<br>&amp;=H(X)+H(Y)-H(X,Y)\<br>&amp;=H(X,Y)-H(X|Y)-H(Y|X)<br>\end{split}<br>\end{equation*}<br>$$<br>​    其中 $H(X)$ 和 $H(Y)$ 是边缘熵，$H(X|Y)$ 和 $H(Y|X)$ 是条件熵，$H(X,Y)$ 是联合熵</p><h4 id="11-3-2-信息增量"><a href="#11-3-2-信息增量" class="headerlink" title="11.3.2 信息增量"></a>11.3.2 信息增量</h4><p>如果 $P$ 为数据的真实分布，$Q$ 为数据的理论分布，根据相对熵的性质，对于离散型随机变量，我们有：<br>$$<br>Gain(P,Q)=-\sum P(i)\ln \frac{Q(i)}{P(i)}<br>$$<br>对于连续型随机变量，我们有：<br>$$<br>Gain(P,Q)=\int_{-\infty}^{+\infty}p(x)\ln\frac{p(x)}{q(x)}dx<br>$$<br>更一般地，如果 $P$ 和 $Q$ 是集合 $X$ 上的测度函数，$Q$ 关于 $P$ 绝对连续，从 $P$ 到 $Q$ 的信息增益定义为<br>$$<br>Gain(P,Q)=-\int_X\ln\frac{dQ}{dP}dP<br>$$</p><h4 id="11-3-3-信息增益率"><a href="#11-3-3-信息增益率" class="headerlink" title="11.3.3 信息增益率"></a>11.3.3 信息增益率</h4><p>信息增益率指的是属性的信息增益两相对于该属性熵值的比值<br>$$<br>GainRatio(T,P)=\frac{Gain(T,P)}{Entropy(T,P)}<br>$$</p><h4 id="11-3-4-Gini-系数"><a href="#11-3-4-Gini-系数" class="headerlink" title="11.3.4 Gini 系数"></a>11.3.4 Gini 系数</h4><p>$Gini$ 系数指的是另外一种数据不纯度的测量方法，其定义如下<br>$$<br>Gini(D):=1-\sum_{i=1}^mp_i^2<br>$$<br>其中的 $m$ 表示数据集 $D$ 中类别 $C$ 的个数，$p_i$ 表示 $D$ 中任意一个记录属于 $C_i$ 的概率</p><h3 id="11-4-最大熵"><a href="#11-4-最大熵" class="headerlink" title="11.4 最大熵"></a>11.4 最大熵</h3><h4 id="11-4-1-最大熵模型的定义"><a href="#11-4-1-最大熵模型的定义" class="headerlink" title="11.4.1 最大熵模型的定义"></a>11.4.1 最大熵模型的定义</h4><h5 id="定义-11-6：最大熵原理"><a href="#定义-11-6：最大熵原理" class="headerlink" title="定义 11.6：最大熵原理"></a>定义 11.6：最大熵原理</h5><p>一个正确的概率分布该满足下面的两个条件：</p><p>​    &lt;1&gt; 服从样本数据中的一直统计证据</p><p>​    &lt;2&gt; 使熵最大化<br>$$<br>p^*=arg\max_{p\in P} H(p)<br>$$<br>其中，$P$ 表示所有可能的概率分布</p><h5 id="定义-11-7：最大熵模型的学习"><a href="#定义-11-7：最大熵模型的学习" class="headerlink" title="定义 11.7：最大熵模型的学习"></a>定义 11.7：最大熵模型的学习</h5><p>设特征函数 $f(x,y)$ 满足<br>$$<br>f(x,y)=<br>\left{<br>\begin{array}{<strong>lr</strong>}<br>1,\ iff …<br>\0,\ else<br>\end{array}<br>\right.<br>$$<br>特征函数 $f(x,y)$ 关于经验分布 $\overline P(X,Y)$ 的期望值，用 $E_{\overline P}(f)$ 表示为<br>$$<br>E_{\overline P}(f)=\sum_{x,y}\overline P(x,y)f(x,y)<br>$$<br>特征函数 $f(x,y)$ 关于条件分布 $P(X|Y)$ 和经验分布 $\overline P(X)$ 的期望值，用 $EP(f)$ 表示为<br>$$<br>E_{\overline P}(f)=\sum_{x,y}\overline P(x)\overline P(y|x)f(x,y)<br>$$<br>如果模型可以从训练集中学习，我呢吧就可以假设这两个期望相等，即：<br>$$<br>E_{\overline P}(f)=EP(f)<br>$$</p><h5 id="定义-11-7：最大熵模型"><a href="#定义-11-7：最大熵模型" class="headerlink" title="定义 11.7：最大熵模型"></a>定义 11.7：最大熵模型</h5><p>设满足所有约束条件的模型集合为<br>$$<br>E_{\overline P}(f_i)=EP(f_i)\<br>$$<br>定义在条件概率分布 $P(X|Y)$ 上的条件熵为<br>$$<br>H(P)=\sum_{x,y}\overline P(x)\overline P(y|x)f(x,y)<br>$$</p><h5 id="定义-11-4-2-最大熵模型的学习"><a href="#定义-11-4-2-最大熵模型的学习" class="headerlink" title="定义 11.4.2 最大熵模型的学习"></a>定义 11.4.2 最大熵模型的学习</h5>]]></content>
    
    
    <categories>
      
      <category>Fundamentals of Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息熵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第十章 回归分析</title>
    <link href="/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/"/>
    <url>/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="第十章-回归分析"><a href="#第十章-回归分析" class="headerlink" title="第十章 回归分析"></a>第十章 回归分析</h2><h3 id="10-1-一元线性回归分析"><a href="#10-1-一元线性回归分析" class="headerlink" title="10.1 一元线性回归分析"></a>10.1 一元线性回归分析</h3><h4 id="10-1-1-基本步骤"><a href="#10-1-1-基本步骤" class="headerlink" title="10.1.1 基本步骤"></a>10.1.1 基本步骤</h4><p>​    &lt;1&gt; 采集样本</p><p>​    &lt;2&gt; 回归分析</p><p>​    &lt;3&gt; 对回归方程显著性检验</p><p>​    &lt;4&gt; 预测与控制</p><h4 id="10-1-2-最小二乘估计"><a href="#10-1-2-最小二乘估计" class="headerlink" title="10.1.2 最小二乘估计"></a>10.1.2 最小二乘估计</h4><p>称 $y = a+bx+e$ 为一元线性回归方程，其中 $a+bx$ 表示 $y$ 随 $x$ 线性变化的部分，$e$ 是一切随机因素的总和，要使得这一误差最小，考察<br>$$<br>y_i=a+bx_i+e_i<br>$$<br>令<br>$$<br>Q(a,b)=\sum_{i=1}^ne_i^2=\sum_{i=1}^n(a+bx_i-y_i)^2<br>$$<br>根据微分方程极值原理，令<br>$$<br>\left{</p><p>\begin{array}{<strong>lr</strong>}<br>\frac{\partial Q}{\partial a}=-2\sum_{i=1}^n(y_i-a-bx_i)=0\<br>\frac{\partial Q}{\partial b}=-2\sum_{i=1}^nx_i(y_i-a-bx_i)=0\<br>\end{array}</p><p>\right.<br>$$<br>解得<br>$$<br>\left{<br>\begin{array}{**lr}<br>\hat a=\overline y-\hat b\<br>\hat b=\frac{l_{xy}}{l_{xx}}<br>\end{array}<br>\right.<br>$$<br>其中<br>$$<br>\left{<br>\begin{array}{**lr}</p><p>l_{xy}=\displaystyle \sum_{i=1}^n(x_i-\overline x)(y_i-\overline y)=\sum_{i=1}^nx_iy_i-\frac{1}{n}(\sum_{i=1}^ny_i)(\sum_{i=1}^nx_i)<br>\l_{xx}=\displaystyle \sum_{i=1}^n(x_i-\overline x)^2=\sum_{i=1}^nx_i^2-\frac{1}{n}(\sum_{i=1}^nx_i)^2<br>\end{array}<br>\right.<br>$$<br>同时，我们用<br>$$<br>r^2=\frac{S_R}{S_T}<br>$$<br>表示回归直线对样本的拟合程度（$|r|$ 越接近 1，拟合程度越高），或者可以用残差（开根号后为标准残差）来表示偏差累计<br>$$<br>S_y^2=\frac{S_e}{n-2}=\frac{\displaystyle \sum_i(y_i-\hat y_i)^2}{n-2}<br>$$</p><h4 id="10-1-3-显著性检验"><a href="#10-1-3-显著性检验" class="headerlink" title="10.1.3 显著性检验"></a>10.1.3 显著性检验</h4><h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><p>​    &lt;1&gt; 总偏差平方和 $S_T$:<br>$$<br>S_T:=\sum_{i=1}^n(y_i-\overline y)^2<br>$$<br>​    &lt;2&gt; 回归偏差平方和 $S_R$<br>$$<br>S_R:=\sum_{i=1}^n(\hat y_i-\overline y)^2<br>$$<br>​    &lt;3&gt; 随机误差 $S_e$:<br>$$<br>S_e:=\sum_{i=1}^n(y_i-\hat y_i)^2<br>$$</p><h5 id="定理-10-1："><a href="#定理-10-1：" class="headerlink" title="定理 10.1："></a>定理 10.1：</h5><p>一元线性回归分析中，总偏差平方和等于回归偏差平方和与随机误差之和，即：<br>$$<br>S_T=S_R+S_e<br>$$</p><h3 id="10-2-多元线性回归分析"><a href="#10-2-多元线性回归分析" class="headerlink" title="10.2 多元线性回归分析"></a>10.2 多元线性回归分析</h3><h4 id="10-2-1-基本步骤"><a href="#10-2-1-基本步骤" class="headerlink" title="10.2.1 基本步骤"></a>10.2.1 基本步骤</h4><p>​    考察因变量 $y$ 与 $m-1$ 个自变量 $x_1,x_2,…,x_{m-1}$ 的关系，分析如下的多元线性回归模型，即<br>$$<br>y=\beta_0 + \sum_{i=1}^{m-1}\beta_ix_i + e<br>$$<br>​    为了方便，采用以下记号：<br>$$<br>Y=<br>\left[<br>\begin{array}{}<br>y_1\<br>y_2\<br>\ \vdots\<br>y_n<br>\end{array}<br>\right],<br>\beta=<br>\left[<br>\begin{array}{}<br>\beta_0\<br>\beta_1\<br>\ \vdots\<br>\beta_{m-1}<br>\end{array}<br>\right],<br>e=<br>\left[<br>\begin{array}{}<br>e_1\<br>e_2\<br>\ \vdots\<br>e_n<br>\end{array}<br>\right],<br>X=<br>\left[<br>\begin{array}{}<br>1 &amp; x_{11} &amp; \cdots &amp; x_{1(m-1)}\<br>1 &amp; x_{21} &amp; \cdots &amp; x_{2(m-1)}\<br>\ \vdots &amp; \vdots &amp; \vdots &amp; \vdots\<br>1 &amp; x_{n1} &amp; \cdots &amp; x_{n(m-1)}<br>\end{array}<br>\right]<br>$$<br>则多元线性模型可简化为<br>$$<br>\left{<br>\begin{array}{**lr}<br>Y= X\beta + e\<br>e\sim\N(0,\sigma^2I_n)<br>\end{array}<br>\right.<br>$$<br>则相应地，<br>$$<br>\hat\beta=(X^TX)^{-1}X^TY\<br>e=Y-\hat Y=(I-H)Y\<br>S_T=Y^TY-\frac{1}{n}Y^TJY\<br>S_e=Y^TY-\hat\beta X^TY\<br>S_R=S_T-S_e\<br>r^2=\frac{S_R}{S_T}<br>$$</p><h4 id="10-2-2-偏回归系数分析"><a href="#10-2-2-偏回归系数分析" class="headerlink" title="10.2.2 偏回归系数分析"></a>10.2.2 偏回归系数分析</h4><p>​    回归关系显著并不意味着每个自变量 $x_j$ 对 $y$ 的影响都显著。若 $x_j$ 对 $y$ 无影响，那么线性方程中对应的 $\beta_j=0$。我们对每个自变量进行以下假设检验：<br>$$<br>H_0: \beta_j=0\<br>H_1:\beta_j\not =0<br>$$<br> 我们需要计算检验统计量：<br>$$<br>\frac{\hat\beta_j-\beta_j}{S(\hat\beta_j)}\sim t(n-m)<br>$$<br>所以，$\beta_j$ 的 $1-\alpha$ 置信区间为<br>$$<br>\hat\beta_j\pm t_{\alpha\over 2}(n-m)S(\hat\beta_j)<br>$$</p><h3 id="10-3-非线性回归分析"><a href="#10-3-非线性回归分析" class="headerlink" title="10.3 非线性回归分析"></a>10.3 非线性回归分析</h3><h4 id="10-3-1-基本步骤"><a href="#10-3-1-基本步骤" class="headerlink" title="10.3.1 基本步骤"></a>10.3.1 基本步骤</h4><p>​    &lt;1&gt; 进行变量变换实现线性化</p><p>​    &lt;2&gt; 进行线性回归预测</p><p>​    &lt;3&gt; 进行反变换实现数据还原</p><h4 id="10-3-2-非线性函数"><a href="#10-3-2-非线性函数" class="headerlink" title="10.3.2 非线性函数"></a>10.3.2 非线性函数</h4><h5 id="双曲线模型"><a href="#双曲线模型" class="headerlink" title="双曲线模型"></a>双曲线模型</h5><p>$$<br>\frac{1}{y}=a+\frac{b}{x}<br>$$</p><h5 id="指数模型"><a href="#指数模型" class="headerlink" title="指数模型"></a>指数模型</h5><p>$$<br>y=ae^{bx}<br>$$</p><h5 id="对数模型"><a href="#对数模型" class="headerlink" title="对数模型"></a>对数模型</h5><p>$$<br>y=a+blnx<br>$$</p><h5 id="幂函数模型"><a href="#幂函数模型" class="headerlink" title="幂函数模型"></a>幂函数模型</h5><p>$$<br>y=ax^b<br>$$</p><h4 id="10-3-3-线性化变换"><a href="#10-3-3-线性化变换" class="headerlink" title="10.3.3 线性化变换"></a>10.3.3 线性化变换</h4><p>​    &lt;1&gt; 转化</p><p>​    &lt;2&gt; 分割</p>]]></content>
    
    
    <categories>
      
      <category>Fundamentals of Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回归分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第九章 高维数据处理</title>
    <link href="/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E9%AB%98%E7%BB%B4%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <url>/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E9%AB%98%E7%BB%B4%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="第九章-高维数据处理"><a href="#第九章-高维数据处理" class="headerlink" title="第九章 高维数据处理"></a>第九章 高维数据处理</h2><h3 id="9-1数据几何学——维度"><a href="#9-1数据几何学——维度" class="headerlink" title="9.1数据几何学——维度"></a>9.1数据几何学——维度</h3><h4 id="9-1-1-维度灾难"><a href="#9-1-1-维度灾难" class="headerlink" title="9.1.1 维度灾难"></a>9.1.1 维度灾难</h4><h4 id="9-1-2-Gauss-环定理"><a href="#9-1-2-Gauss-环定理" class="headerlink" title="9.1.2 Gauss 环定理"></a>9.1.2 Gauss 环定理</h4><p>​    一个均值为 $0$，方差为 $\sigma^2$ 的 $d$ 维 $Gauss$ 分布的密度函数为：<br>$$<br>p(x) = \frac{1}{(2\pi)^{\frac{d}{2} }\sigma^d}exp(-\frac{||x||^2}{2\sigma^2})<br>$$</p><h5 id="定理-9-1：Gauss环定理"><a href="#定理-9-1：Gauss环定理" class="headerlink" title="定理 9.1：Gauss环定理"></a>定理 9.1：Gauss环定理</h5><p>​    在任意方向上都有单位方差的 $d$ 维球面 $Gauss$ 分布，$\forall\beta\leq\sqrt d$，除了最多 $3e^{-c\beta^2}$ 的概率质量外，其余质量都在<br>$$<br>\sqrt d -\beta \leq||x||\leq \sqrt d + \beta<br>$$<br>的环里，其中 $c$ 为正常数</p><h4 id="9-1-3-J-L-引理"><a href="#9-1-3-J-L-引理" class="headerlink" title="9.1.3 $J-L$ 引理"></a>9.1.3 $J-L$ 引理</h4><p>$Johnson-Lindenstrauss \ Lemma$  与1984年由 $William\ Johnson$ 和 $Joram\ Lindenstrauss$ 提出</p><h5 id="引理-9-1：-J-L-引理"><a href="#引理-9-1：-J-L-引理" class="headerlink" title="引理 9.1：$J-L$ 引理"></a>引理 9.1：$J-L$ 引理</h5><p>​    对给定的 $\varepsilon \in (0,1)$ 以及 $N$ 维 $Euclid$ 空间的 $m$ 个点 ${x_1, x_2, …,x_n}$，对于任意满足条件的 $n\in \N$ 且 $n &gt; \frac{lnm}{ {\varepsilon^2\over 2} - {\varepsilon^3\over 3} }$，存在一个线性映射 $f:\R^N\to\R^n$，将这 $m$ 个点，从 $\R^N$ 中映射到 $\R^n$，同时“基本上”保持了点集成员两两之间的距离，即：<br>$$<br>\forall x_i,x_j:(1-\varepsilon)||x_i-x_j||^2_2\leq ||f(x_i)-f(x_j)||^2_2\leq (1+\varepsilon)||x_i-x_j||^2_2\(1\leq i&lt;j\leq m)<br>$$<br>​    更进一步地，这个线性映射 $f$ 还可以在多项式时间内给出</p><h3 id="9-2-相关性分析"><a href="#9-2-相关性分析" class="headerlink" title="9.2 相关性分析"></a>9.2 相关性分析</h3><h4 id="9-2-1-Pearson-相关系数"><a href="#9-2-1-Pearson-相关系数" class="headerlink" title="9.2.1 Pearson 相关系数"></a>9.2.1 Pearson 相关系数</h4><h5 id="定义-9-1：Pearson相关系数（Pearson-r-）"><a href="#定义-9-1：Pearson相关系数（Pearson-r-）" class="headerlink" title="定义 9.1：Pearson相关系数（Pearson-$r$）"></a>定义 9.1：Pearson相关系数（Pearson-$r$）</h5><p>​    两个样本 $X,Y$ 的 $Pearson$ 相关系数可以用来描述两个统计样本之间的线性关系（当然也可能存在良好的非线性关系使得该系数为 0），是两个容量为 $n$ 的样本值的标准偏差之积的累加和除以自由度 $n-1$，即<br>$$<br>r_{XY}:=\frac{1}{n-1}\sum_{i=1}^n(\frac{X_i-\overline X}{s_X})(\frac{Y_i-\overline Y}{s_Y})<br>$$</p><h5 id="定理-9-2：Pearson-r-计算公式"><a href="#定理-9-2：Pearson-r-计算公式" class="headerlink" title="定理 9.2：Pearson-$r$ 计算公式"></a>定理 9.2：Pearson-$r$ 计算公式</h5><p>$$<br>r_{XY}=\frac{n\displaystyle\sum_iX_iY_i-\displaystyle\sum_iX_i\displaystyle\sum_iY_i}{\sqrt {n\displaystyle\sum_iX_i^2-(\displaystyle\sum_iX_i)^2}\sqrt { {n\displaystyle\sum_iY_i}-(\displaystyle\sum_iY_i)^2} }<br>$$</p><h3 id="9-3-数据降维"><a href="#9-3-数据降维" class="headerlink" title="9.3 数据降维"></a>9.3 数据降维</h3><h4 id="9-3-1-数据降维概述"><a href="#9-3-1-数据降维概述" class="headerlink" title="9.3.1 数据降维概述"></a>9.3.1 数据降维概述</h4><p>​    研究表明，当维数越来越多时，分析和处理多维数据的复杂度和成本成指数级增长；与此同时，在分析高维数据时，所需的空间样本数会随维数的增加成指数增长</p><h4 id="9-3-2-主成分分析-PCA"><a href="#9-3-2-主成分分析-PCA" class="headerlink" title="9.3.2 主成分分析 PCA"></a>9.3.2 主成分分析 PCA</h4><h5 id="定义-9-2：主成分分析"><a href="#定义-9-2：主成分分析" class="headerlink" title="定义 9.2：主成分分析"></a>定义 9.2：主成分分析</h5><p>​    主成分分析(Principal components analysis, PCA) 是线代数据分析中的标准工具，它是一种简单的非参数方法，用于从混乱的数据集中提取相关信息</p><p>​    设有随机变量 $X_1,X_2,…,X_p$，样本标准差记为 $S_1,S_2,…,S_p$。首先做标准化变换：<br>$$<br>C_j = \sum_{i = 1}^pa_{ji}x_i\(j = 1,2,…,p)<br>$$</p><h5 id="定义-9-3：第一主成分"><a href="#定义-9-3：第一主成分" class="headerlink" title="定义 9.3：第一主成分"></a>定义 9.3：第一主成分</h5><p>​    若 $C_1 = \displaystyle\sum_{i = 1}^pa_{1j}x_j$，且使 $Var(C_1)$ 最大，则称 $C_1$ 为第一主成分</p><h5 id="定义-9-4：第二主成分"><a href="#定义-9-4：第二主成分" class="headerlink" title="定义 9.4：第二主成分"></a>定义 9.4：第二主成分</h5><p>​    若 $C_2 = \displaystyle\sum_{i = 1}^pa_{2j}x_j$，$(a_{21},a_{22},…,a_{2p})$ 与 $(a_{11},a_{12},…,a_{1p})$ 垂直且使 $Var(C_2)$ 次大，则称 $C_2$ 为第二主成分</p><h5 id="意："><a href="#意：" class="headerlink" title="意："></a>意：</h5><p>​    &lt;1&gt; 各成分间互不相关，即<br>$$<br>Corr(C_i,C_j) = 0\(i\not = j)<br>$$<br>​    &lt;2&gt; 组合系数构成的向量 $(a_{i1},a_{i2},…,a_{ip})$ 为单位向量</p><p>​    &lt;3&gt; 主成分的方差是依次递减的，即<br>$$<br>Var(C_1)\geq Var(C_2)\geq …\geq Var(C_p)<br>$$</p><p>​    &lt;4&gt; 总方差不增不减（主成分只是原变量的线性组合），即<br>$$<br>\sum_{i = 1}^pVar(C_i)=\sum_{i=1}^pVar(x_i)=p<br>$$<br>​    &lt;5&gt; 主成分与原变量的相关系数满足<br>$$<br>Corr(C_i,x_j) = a_{ij}<br>$$<br>​    &lt;6&gt; 令 $X_1,X_2,…,X_p$ 的相关矩阵为 $R$，$(a_{i1},a_{i2}.…,a_{ip})$ 则是相关矩阵 $R$ 的第 $i$ 个特征向量。且特征值 $l_i$ 就是第 $i$ 主成分的方差</p><h4 id="9-3-3-线性判别分析-LDA"><a href="#9-3-3-线性判别分析-LDA" class="headerlink" title="9.3.3 线性判别分析 LDA"></a>9.3.3 线性判别分析 LDA</h4><p>​    判别分析是一种统计技术，其中，线性判别分析 （Linear Discriminant Analysis）是对 $Fisher$ 线性鉴别方法的归纳</p><h5 id="定义-9-5：线性判别分析"><a href="#定义-9-5：线性判别分析" class="headerlink" title="定义 9.5：线性判别分析"></a>定义 9.5：线性判别分析</h5><p>​    线性判别分析是一种找到最佳分离两个或者多个类的变量的线性组合的方法</p><h4 id="9-3-4-局部线性嵌入-LLE"><a href="#9-3-4-局部线性嵌入-LLE" class="headerlink" title="9.3.4 局部线性嵌入 LLE"></a>9.3.4 局部线性嵌入 LLE</h4><h5 id="定义-9-6：局部线性嵌入"><a href="#定义-9-6：局部线性嵌入" class="headerlink" title="定义 9.6：局部线性嵌入"></a>定义 9.6：局部线性嵌入</h5><p>局部线性嵌入（Locally Linear Embedding，LLE）消除了估计广泛分析的数据点之间成对距离的需要，从局部线性拟合中恢复全局非线性结构</p><h4 id="9-3-5-t-分布邻域嵌入-t-SNE"><a href="#9-3-5-t-分布邻域嵌入-t-SNE" class="headerlink" title="9.3.5 t 分布邻域嵌入 t-SNE"></a>9.3.5 t 分布邻域嵌入 t-SNE</h4><h5 id="定义-9-7：t-分布邻域嵌入"><a href="#定义-9-7：t-分布邻域嵌入" class="headerlink" title="定义 9.7：t-分布邻域嵌入"></a>定义 9.7：t-分布邻域嵌入</h5><p>​    t-分布邻域嵌入（t-distributed stochastic neighbor embedding，t-SNE）将数据点间的距离转化为概率分布并且以此来表达点与点之间的相似度，算法使得高低维数据分布尽可能接近为目标</p>]]></content>
    
    
    <categories>
      
      <category>Fundamentals of Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>纬度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第八章 多维概率分布</title>
    <link href="/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%A4%9A%E7%BB%B4%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/"/>
    <url>/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%A4%9A%E7%BB%B4%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h2 id="第八章-多维概率分布"><a href="#第八章-多维概率分布" class="headerlink" title="第八章 多维概率分布"></a>第八章 多维概率分布</h2><h3 id="8-1-多维概率分布"><a href="#8-1-多维概率分布" class="headerlink" title="8.1 多维概率分布"></a>8.1 多维概率分布</h3><h4 id="8-1-1-联合分布"><a href="#8-1-1-联合分布" class="headerlink" title="8.1.1 联合分布"></a>8.1.1 联合分布</h4><ol><li><p>二维随机变量</p><p>设样本空间为 $\Omega = e$，$X = X(e)$，和 $Y = Y(e)$，是定义在 $\Omega$ 上的随机变量，由他们构成的一个变量 $(X,Y)$ 叫做二维随机变量或二维随机向量</p></li></ol><h5 id="定义-8-1：联合分布"><a href="#定义-8-1：联合分布" class="headerlink" title="定义 8.1：联合分布"></a>定义 8.1：联合分布</h5><p>设 $(X,Y)$ 是二维随机变量， $x,y$ 是任意实数，称二元函数<br>$$<br>F(x,y) = P(X\leq x\cap Y\leq y) = P(X\leq x,Y\leq y)<br>$$<br>为二元随机变量 $(X,Y)$ 的联合分布函数</p><h5 id="定义-8-2：二维离散随机变量概率分布律"><a href="#定义-8-2：二维离散随机变量概率分布律" class="headerlink" title="定义 8.2：二维离散随机变量概率分布律"></a>定义 8.2：二维离散随机变量概率分布律</h5><p>若二维随机变量的可能取值只有有限个或者可列无穷个，则称二维随机变量为离散型随机变量。二维离散型随机变量 $(X,Y)$ 的所有可能取值为 $(x_i,y_i),(i=1,2,…,n)$，则称<br>$$<br>P{X = x_i,Y = y_i} = p_{ij}<br>$$<br>为二维离散行随机变量 $(X,Y)$ 的概率分布律，简称分布律</p><p>注意，二维离散随机变量的概率分布仍然满足概率的公理化定义：非负性，规范性，可列可加性（级数）</p><h5 id="定义-8-3：二位连续随机变量的概率密度"><a href="#定义-8-3：二位连续随机变量的概率密度" class="headerlink" title="定义 8.3：二位连续随机变量的概率密度"></a>定义 8.3：二位连续随机变量的概率密度</h5><p>设二维随机变量 $(X,Y)$ 的分布函数为 $F(x,y)$，如果存在非负函数 $f(x,y)$，使得 $\forall x,y\in\mathbb{R}$，都有<br>$$<br>F(x,y) = \int_{-\infty}^{x}\int_{-\infty}^{y}f(s,t)dsdt<br>$$<br>则称 $(X,Y)$ 为二位连续随机变量，并称非负函数 $f(x,y)$ 为 $(X,Y)$ 的概率密度函数，或称 $f(x,y)$ 为 $X$ 和 $Y$ 的联合概率密度</p><p>注意，二维连续随机变量的概率分布仍然满足概率的公理化定义：非负性，规范性，可列可加性（级数），在此基础上，我们还有<br>$$<br>f(x,y) = \frac{\partial^2F(x,y)}{\partial x\partial y}<br>$$</p><h4 id="8-1-2-边缘分布"><a href="#8-1-2-边缘分布" class="headerlink" title="8.1.2 边缘分布"></a>8.1.2 边缘分布</h4><h5 id="定义-8-4：二维随机变量的边缘分布"><a href="#定义-8-4：二维随机变量的边缘分布" class="headerlink" title="定义 8.4：二维随机变量的边缘分布"></a>定义 8.4：二维随机变量的边缘分布</h5><p>设 $(X,Y)$ 为二维随机变量，称一维随机变量 $X$ 或 $Y$ 的概率分布为二维随机变量 $(X,Y)$ 关于 $X$ 或 $Y$ 对应的边缘分布，分别记作 $F_X(x), F_Y(y)$</p><h5 id="定义-8-5：二维离散随机变量的边缘分布律"><a href="#定义-8-5：二维离散随机变量的边缘分布律" class="headerlink" title="定义 8.5：二维离散随机变量的边缘分布律"></a>定义 8.5：二维离散随机变量的边缘分布律</h5><p>设二维随机变量 $(X,Y)$ 的分布律为 $p_{ij}$，那么对于随机变量 $X$，$Y$ 其各自的分布律对于固定的 $i,j = 1,2,…$， 满足<br>$$<br>P{X=x_i} = \sum_jp_{ij}=p_i<br>$$<br>则称 $p_i$ 为随机变量 $(X,Y)$ 的边缘分布律。</p><h5 id="定义-8-6：二维连续随机变量的边缘概率密度"><a href="#定义-8-6：二维连续随机变量的边缘概率密度" class="headerlink" title="定义 8.6：二维连续随机变量的边缘概率密度"></a>定义 8.6：二维连续随机变量的边缘概率密度</h5><p>设二维随机变量 $(X,Y)$ 的概率密度为 $f(x,y)$，边缘概率密度 $f_X(x)$ 和 $f_Y(y)$ 定义为<br>$$<br>f_X(x) = \int_{-\infty}^{+\infty}f(x,y)dy\<br>f_Y(y) = \int_{-\infty}^{+\infty}f(x,y)dx<br>$$</p><h4 id="8-1-3-条件分布"><a href="#8-1-3-条件分布" class="headerlink" title="8.1.3 条件分布"></a>8.1.3 条件分布</h4><h5 id="定义-8-7：离散型随机变量的条件概率"><a href="#定义-8-7：离散型随机变量的条件概率" class="headerlink" title="定义 8.7：离散型随机变量的条件概率"></a>定义 8.7：离散型随机变量的条件概率</h5><p>设 $(X,Y)$ 是二维离散型随机变量，其分布律为 $P{X=x_i,Y=y_i}=p_{ij}$，其边缘概率分别为 $p_{i\cdot}\ p_{\cdot j}$，则条件概率定义为<br>$$<br>P{X=x_i|Y=y_i}=\frac{P{X=x_i,Y=y_i}}{P{Y=y_i}} = \frac{p_{ij}}{p_{\cdot j}}\<br>P{Y=y_i|X=x_i}=\frac{P{X=x_i,Y=y_i}}{P{X=x_i}} = \frac{p_{ij}}{p_{i \cdot}}<br>$$</p><h5 id="定义-8-8：连续型随机变量的条件概率"><a href="#定义-8-8：连续型随机变量的条件概率" class="headerlink" title="定义 8.8：连续型随机变量的条件概率"></a>定义 8.8：连续型随机变量的条件概率</h5><p>设 $(X,Y)$ 是二维连续型随机变量，其概率密度为 $f(x,y)$，其边缘改率分别为 $f_X(x), f_Y(y)$，则条件概率定义为<br>$$<br>f_{X|Y}(x|y) = \frac{f(x,y)}{f_Y(y)}\<br>f_{Y|X}(y|x) = \frac{f(x,y)}{f_X(x)}\<br>$$<br>连续型随机变量的条件概率分布定义为<br>$$<br>F_{X|Y}(x|y) = P{X\leq x|Y=y}=\int_{-\infty}^{x}\frac{f(x,y)}{f_Y(y)}dx\<br>F_{Y|X}(y|x) = P{Y\leq y|X=x}=\int_{-\infty}^{y}\frac{f(x,y)}{f_X(x)}dy\<br>$$</p><h4 id="8-1-4-独立性"><a href="#8-1-4-独立性" class="headerlink" title="8.1.4 独立性"></a>8.1.4 独立性</h4><h5 id="定义-8-9：独立性"><a href="#定义-8-9：独立性" class="headerlink" title="定义 8.9：独立性"></a>定义 8.9：独立性</h5><p>二维随机变量 $(X,Y)$ 的分布函数及其边缘分布函数分别设为 $F(x,y)$ 和 $F_X(x),\ F_Y(y)$，若<br>$$<br>\forall (x,y):F(x,y) = F_X(x)F_Y(y)<br>$$<br>则称随机变量 $X$ 和 $Y$ 是相互独立的</p><h5 id="定义-8-10：离散随机变量的独立性"><a href="#定义-8-10：离散随机变量的独立性" class="headerlink" title="定义 8.10：离散随机变量的独立性"></a>定义 8.10：离散随机变量的独立性</h5><p>离散二维随机变量 $(X,Y)$ 的联合分布律和边缘分布律分别设为 $p_{ij}$ 和 $p_{i\cdot},\ p_{\cdot j}$，若<br>$$<br>\forall (i，j):p_{ij} = p_{i\cdot}\times p_{\cdot j}<br>$$<br>则称随机变量 $X$ 和 $Y$ 是相互独立的</p><h5 id="定义-8-11：连续随机变量的独立性"><a href="#定义-8-11：连续随机变量的独立性" class="headerlink" title="定义 8.11：连续随机变量的独立性"></a>定义 8.11：连续随机变量的独立性</h5><p>连续二维随机变量 $(X,Y)$ 的联合分布律和边缘分布律分别设为 $f(x,y)$ 和 $f_X(x),\ f_Y(y)$，若<br>$$<br>\forall (x,y):f(x,y) = f_X(x)\times f_Y(y)<br>$$<br>则称随机变量 $X$ 和 $Y$ 是相互独立的</p><h3 id="8-2-多维分布的矩"><a href="#8-2-多维分布的矩" class="headerlink" title="8.2 多维分布的矩"></a>8.2 多维分布的矩</h3><h4 id="8-2-1-独立性的多维矩"><a href="#8-2-1-独立性的多维矩" class="headerlink" title="8.2.1 独立性的多维矩"></a>8.2.1 独立性的多维矩</h4><h5 id="定理-8-1："><a href="#定理-8-1：" class="headerlink" title="定理 8.1："></a>定理 8.1：</h5><p>已知 $X$ 和 $Y$ 相互独立，则有：<br>$$<br>E(XY) = E(X)E(Y)<br>$$</p><h5 id="定理-8-2："><a href="#定理-8-2：" class="headerlink" title="定理 8.2："></a>定理 8.2：</h5><p>已知 $X$ 和 $Y$ 相互独立，则有：<br>$$<br>D(X+Y) = D(X) + D(Y)<br>$$</p><h4 id="8-2-2-相关性的多维矩"><a href="#8-2-2-相关性的多维矩" class="headerlink" title="8.2.2 相关性的多维矩"></a>8.2.2 相关性的多维矩</h4><h5 id="定义-8-12：协方差"><a href="#定义-8-12：协方差" class="headerlink" title="定义 8.12：协方差"></a>定义 8.12：协方差</h5><p>随机变量 $X$ 和 $Y$ 的协方差定义为<br>$$<br>Cov(X,Y)\triangleq E(X-E(X))E(Y-E(Y))<br>$$</p><h5 id="定理-8-3：协方差计算"><a href="#定理-8-3：协方差计算" class="headerlink" title="定理 8.3：协方差计算"></a>定理 8.3：协方差计算</h5><p>$$<br>Cov(X,Y) = E(XY)-E(X)E(Y)<br>$$</p><h5 id="推论-8-1："><a href="#推论-8-1：" class="headerlink" title="推论 8.1："></a>推论 8.1：</h5><p>对于任意随机变量 $X,Y,Z$，不难得出：<br>$$<br>Cov(X,Y)=Cov(Y,X)\<br>Cov(a,a)=0\<br>Cov(aX,bY)=abCov(X,Y)\<br>Cov(X+Y,Z)=Cov(X,Z)+Cov(Y,Z)<br>$$</p><h5 id="推论-8-2："><a href="#推论-8-2：" class="headerlink" title="推论 8.2："></a>推论 8.2：</h5><p>对于任意随机变量 $X,Y:$<br>$$<br>D(X\pm Y)=D(X)+D(Y)\pm 2Cov(X,Y)<br>$$</p><h5 id="推论-8-3："><a href="#推论-8-3：" class="headerlink" title="推论 8.3："></a>推论 8.3：</h5><p>若 $X$ 与 $Y$ 相互独立，则：<br>$$<br>Cov(X,Y) = 0<br>$$</p><h5 id="定义-8-13：相关系数"><a href="#定义-8-13：相关系数" class="headerlink" title="定义 8.13：相关系数"></a>定义 8.13：相关系数</h5><p>协方差的数值会收到 $X,Y$ 的量纲的影响，为了更加客观地度量变量之间的关系，我们将协方差归一化，定义为相关系数。若随机变量 $X$ 和 $Y$ 的数学期望和方差都存在，则称：<br>$$<br>\rho_{XY}=\frac{Cov(X,Y)}{\sqrt{D(X)D(Y)}}\<br>$$<br>为随机变量 $X$ 和 $Y$ 的相关系数</p><h5 id="定理-8-4：Schwarz不等式"><a href="#定理-8-4：Schwarz不等式" class="headerlink" title="定理 8.4：Schwarz不等式"></a>定理 8.4：Schwarz不等式</h5><p>$$<br>Cov^2(X,Y)\leq \sigma^2_X\sigma^2_Y\<br>$$</p><h5 id="推论-8-4：相关系数归一性"><a href="#推论-8-4：相关系数归一性" class="headerlink" title="推论 8.4：相关系数归一性"></a>推论 8.4：相关系数归一性</h5><p>$$<br>|\rho_{XY}|\leq 1\<br>$$</p><h5 id="定理-8-5：线性相关定理"><a href="#定理-8-5：线性相关定理" class="headerlink" title="定理 8.5：线性相关定理"></a>定理 8.5：线性相关定理</h5><p>$|\rho_{XY}|=1$ 的充要条件是 $X,Y$ 几乎处处线性相关</p><h3 id="8-3-常用二维分布"><a href="#8-3-常用二维分布" class="headerlink" title="8.3 常用二维分布"></a>8.3 常用二维分布</h3><h4 id="8-3-1-二维均匀分布"><a href="#8-3-1-二维均匀分布" class="headerlink" title="8.3.1 二维均匀分布"></a>8.3.1 二维均匀分布</h4><h5 id="定义-8-14：二维均匀分布"><a href="#定义-8-14：二维均匀分布" class="headerlink" title="定义 8.14：二维均匀分布"></a>定义 8.14：二维均匀分布</h5><p>设 $G$ 是平面上的有界闭区域，其面积为 $A$，若二维随机变量 $(X,Y)$ 具有概率密度<br>$$<br>\forall(x,y)\in G:f(x,y)=\frac{1}{A}\<br>\forall(x,y)\not \in G:f(x,y) = 0\<br>$$<br>则称 $(X,Y)$ 在 $G$ 上二维均匀分布</p><h4 id="8-3-2-二维正态分布"><a href="#8-3-2-二维正态分布" class="headerlink" title="8.3.2 二维正态分布"></a>8.3.2 二维正态分布</h4><p>如果随机变量 $(X,Y)$ 的概率密度为<br>$$<br>f(x,y) = \frac{1}{2\pi\sigma_1\sigma_2\sqrt{1-\rho^2}}e^{-\frac{1}{2(1-\rho)^2}\bigg[\frac{(x-\mu_1)^2}{\sigma_1^2}-2\rho\frac{(x-\mu_1)(y-\mu_2)}{\sigma_1\sigma_2}+\frac{(y-\mu_2)^2}{\sigma_2^2}\bigg]}\<br>-\infty&lt;x,y&lt;+\infty\<br>$$<br>则称 $(X,Y)$ 服从参数为 $\mu_1,\mu_2,\sigma_1,\sigma_2,\rho$ 的二维正态分布，记为<br>$$<br>(X,Y)\sim \mathbb{N}(\mu_1,\mu_2,\sigma_1^2,\sigma_2^2,\rho)\<br>$$</p><h3 id="8-4-函数的概率分布"><a href="#8-4-函数的概率分布" class="headerlink" title="8.4 函数的概率分布"></a>8.4 函数的概率分布</h3><h4 id="8-4-1-离散函数的分布"><a href="#8-4-1-离散函数的分布" class="headerlink" title="8.4.1 离散函数的分布"></a>8.4.1 离散函数的分布</h4><h4 id="8-4-2-连续函数的分布"><a href="#8-4-2-连续函数的分布" class="headerlink" title="8.4.2 连续函数的分布"></a>8.4.2 连续函数的分布</h4><h5 id="定理-8-6：函数的分布定理"><a href="#定理-8-6：函数的分布定理" class="headerlink" title="定理 8.6：函数的分布定理"></a>定理 8.6：函数的分布定理</h5><p>$X$ 的密度函数为 $f_X(x)$，$-\infty&lt;x&lt;+\infty$，$Y = g(X)$ 严格单调，即 $g’(x)&gt;0 $ 或 $ g’(x)&lt;0$，则 $Y$ 的密度函数为：<br>$$<br>f_Y(x) = f_X(h(y))|h’(y)|\ \ \ (a&lt;y&lt;b)\<br>$$<br>其中<br>$$<br>&amp;a = min(g(-\infty),g(+\infty))\ &amp;b = max(g(-\infty),\ g(+\infty))\ &amp;h(y) = g^{-1}(x)\<br>$$</p><h4 id="8-4-3-极值函数的分布"><a href="#8-4-3-极值函数的分布" class="headerlink" title="8.4.3 极值函数的分布"></a>8.4.3 极值函数的分布</h4>]]></content>
    
    
    <categories>
      
      <category>Fundamentals of Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩</tag>
      
      <tag>概率分布</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第七章 假设检验</title>
    <link href="/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C/"/>
    <url>/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="第七章-假设检验"><a href="#第七章-假设检验" class="headerlink" title="第七章 假设检验"></a>第七章 假设检验</h2><h3 id="7-1-假设检验概述"><a href="#7-1-假设检验概述" class="headerlink" title="7.1 假设检验概述"></a>7.1 假设检验概述</h3><h4 id="7-1-1-基本概念"><a href="#7-1-1-基本概念" class="headerlink" title="7.1.1 基本概念"></a>7.1.1 基本概念</h4><ol><li><p>原假设 (Null Hypothesis) $$H_0$$: $$\mu = \mu_0$$</p></li><li><p>备择假设（Alternative Hypothesis）$$H_1$$：$$\mu \not= \mu_0$$</p></li><li><p>显著性水平（Significance Level）$$\alpha$$：小概率水平</p></li><li><p>确定假设的界限 $$\mathcal{K}$$</p></li></ol><p>​    5. 假设检验的拒绝域 $$\mathscr{D} \subseteq \mathbb{X}^n$$ </p><h4 id="7-1-2-两种错误"><a href="#7-1-2-两种错误" class="headerlink" title="7.1.2 两种错误"></a>7.1.2 两种错误</h4><h5 id="1-第一类错误"><a href="#1-第一类错误" class="headerlink" title="1. 第一类错误"></a>1. 第一类错误</h5><h5 id="2-第二类错误"><a href="#2-第二类错误" class="headerlink" title="2. 第二类错误"></a>2. 第二类错误</h5><h4 id="7-1-3-显著性水平与p值"><a href="#7-1-3-显著性水平与p值" class="headerlink" title="7.1.3 显著性水平与p值"></a>7.1.3 显著性水平与p值</h4><h5 id="1-使用p值进行假设检验的基本法则是："><a href="#1-使用p值进行假设检验的基本法则是：" class="headerlink" title="1. 使用p值进行假设检验的基本法则是："></a>1. 使用p值进行假设检验的基本法则是：</h5><p>​    若 $p$ 值小于 $\alpha $ , 则拒绝 $H_0$，否则就不拒绝 $H_0$   ($\alpha$ 决定是否显著，$p$ 表现有多显著) </p><p>​    $p$ 值越小，则认为拒绝原假设的理由越充分</p><h4 id="7-1-4-单边与双边检验"><a href="#7-1-4-单边与双边检验" class="headerlink" title="7.1.4 单边与双边检验"></a>7.1.4 单边与双边检验</h4><h5 id="1-双边（Two-Tail）检验"><a href="#1-双边（Two-Tail）检验" class="headerlink" title="1. 双边（Two-Tail）检验"></a>1. 双边（Two-Tail）检验</h5><p>$$<br>H_0:\mu=\mu_0,\ H_1:\mu=\mu_1<br>$$</p><h5 id="2-单边（One-Tail）假设"><a href="#2-单边（One-Tail）假设" class="headerlink" title="2. 单边（One-Tail）假设"></a>2. 单边（One-Tail）假设</h5><p>$$<br>H_0:\mu\leq\mu_0,\ H_1:\mu&gt;\mu_0<br>$$</p><h4 id="7-1-5-基本步骤"><a href="#7-1-5-基本步骤" class="headerlink" title="7.1.5 基本步骤"></a>7.1.5 基本步骤</h4><ol><li><p>建立原假设和备选假设，选择合适的 $p$ 值</p></li><li><p>对总体抽样，获取总体样本值</p></li><li><p>选取统计量（其抽样分布要明确，不含参数）</p></li><li><p>分两种（或同时）方法进行决策判断</p></li></ol><p>​        &lt;1&gt; 利用 $\alpha$ 决定什么是拒绝域</p><p>​        &lt;2&gt; 利用样本数据计算 $p$ 值，将其与 $\alpha$ 比较</p><h3 id="7-2-参数假设检验-先假定分布形式，再来估计参数"><a href="#7-2-参数假设检验-先假定分布形式，再来估计参数" class="headerlink" title="7.2 参数假设检验 (先假定分布形式，再来估计参数)"></a>7.2 参数假设检验 (先假定分布形式，再来估计参数)</h3><h4 id="7-2-1-Z-检验-大样本或方差已知"><a href="#7-2-1-Z-检验-大样本或方差已知" class="headerlink" title="7.2.1  Z 检验 (大样本或方差已知)"></a>7.2.1  Z 检验 (大样本或方差已知)</h4><ol><li><p>建立有关均值的备择假设和原假设，选择合适的显著性水平 $\alpha$</p></li><li><p>建立统计量 $Z\sim \mathbb{N}(0,\ 1)$，计算统计量数值 $z$</p></li><li><p>根据统计量数值和显著性水平 $\alpha$ 决定拒绝域</p></li><li><p>判断是否落入拒绝域，有需要的话再考察 $p$ 值</p></li></ol><h4 id="7-2-2-t-检验-小样本且-sigma-2-未知"><a href="#7-2-2-t-检验-小样本且-sigma-2-未知" class="headerlink" title="7.2.2  t 检验 (小样本且 $\sigma^2$ 未知)"></a>7.2.2  t 检验 (小样本且 $\sigma^2$ 未知)</h4><ol><li><p>建立有关均值的备择假设和原假设，选择合适的显著性水平 $\alpha$</p></li><li><p>建立统计量 $t\sim t(n’)$，计算统计量数值 $t$</p></li><li><p>根据统计量数值和显著性水平 $\alpha$ 决定拒绝域</p></li><li><p>判断是否落入拒绝域，有需要的话再考察 $p$ 值</p></li></ol><h4 id="7-2-3-chi-2-检验-判断方差变化是否显著"><a href="#7-2-3-chi-2-检验-判断方差变化是否显著" class="headerlink" title="7.2.3  $$\chi^2$$检验 (判断方差变化是否显著)"></a>7.2.3  $$\chi^2$$检验 (判断方差变化是否显著)</h4><ol><li><p>建立有关均值的备择假设和原假设，选择合适的显著性水平 $\alpha$</p></li><li><p>建立统计量 $\chi^2\sim \chi^2(n’)$，计算统计量数值 $\chi^2$</p></li><li><p>根据统计量数值和显著性水平 $\alpha$ 决定拒绝域</p></li><li><p>判断是否落入拒绝域，有需要的话再考察 $p$ 值</p></li></ol><h4 id="7-2-4-F检验-判断方差比变化是否显著"><a href="#7-2-4-F检验-判断方差比变化是否显著" class="headerlink" title="7.2.4  F检验 (判断方差比变化是否显著)"></a>7.2.4  F检验 (判断方差比变化是否显著)</h4><ol><li><p>建立有关均值的备择假设和原假设，选择合适的显著性水平 $\alpha$</p></li><li><p>建立统计量 $F\sim F(n_1,\ n_2)$，计算统计量数值 $F$</p></li><li><p>根据统计量数值和显著性水平 $\alpha$ 决定拒绝域</p></li><li><p>判断是否落入拒绝域，有需要的话再考察 $p$ 值</p></li></ol><h3 id="7-3-非参数假设检验（对总体分布形式未知）"><a href="#7-3-非参数假设检验（对总体分布形式未知）" class="headerlink" title="7.3 非参数假设检验（对总体分布形式未知）"></a>7.3 非参数假设检验（对总体分布形式未知）</h3><h4 id="7-3-1-符号检验（Sign-Test）"><a href="#7-3-1-符号检验（Sign-Test）" class="headerlink" title="7.3.1 符号检验（Sign Test）"></a>7.3.1 符号检验（Sign Test）</h4><h4 id="7-3-2-秩和检验（Wilcoxon-Rank-Sum）"><a href="#7-3-2-秩和检验（Wilcoxon-Rank-Sum）" class="headerlink" title="7.3.2 秩和检验（Wilcoxon Rank-Sum）"></a>7.3.2 秩和检验（Wilcoxon Rank-Sum）</h4><h5 id="1-秩（Rank）指的是两组数据混合排序后的序号均值"><a href="#1-秩（Rank）指的是两组数据混合排序后的序号均值" class="headerlink" title="1. 秩（Rank）指的是两组数据混合排序后的序号均值"></a>1. 秩（Rank）指的是两组数据混合排序后的序号均值</h5><h5 id="定理7-1：大样本逼近"><a href="#定理7-1：大样本逼近" class="headerlink" title="定理7.1：大样本逼近"></a>定理7.1：大样本逼近</h5><p>当两样本容量较大时（经验要求 $n_1$, $n_2 &gt; 10$ ），秩和统计检验量 $T$ 近似服从 $$\mathbb{N}(\mu,\sigma^2)$$，其中：<br>$$<br>\mu=\frac{n_1(n_1+n_2+1)}{2}\<br>\sigma^2=\frac{n_1n_2(n_1+n_2+1)}{12}<br>$$<br>则：<br>$$<br>U=\frac{T-\mu}{\sigma}\sim\mathbb{N}(0,\ 1)<br>$$<br>所以秩和检验的拒绝域为 $|U|&gt;z_{\frac{\alpha}{2}}$</p><h4 id="7-3-3-偏度峰度检验"><a href="#7-3-3-偏度峰度检验" class="headerlink" title="7.3.3 偏度峰度检验"></a>7.3.3 偏度峰度检验</h4><h5 id="1-偏度与峰度"><a href="#1-偏度与峰度" class="headerlink" title="1. 偏度与峰度"></a>1. 偏度与峰度</h5><p>偏度：<br>$$<br>\nu_1\triangleq\frac{E((X-E(X))^3)}{(Var(X))^{\frac{3}{2}}}=E[(\frac{X-E(X)}{\sqrt{Var(X)}})^{3}]\<br>$$<br>峰度：<br>$$<br>\nu_1\triangleq\frac{E((X-E(X))^4)}{(Var(X))^{2}}=E[(\frac{X-E(X)}{\sqrt{Var(X)}})^{4}]\<br>$$</p><h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5><h4 id="7-3-4-chi-2-拟合优度检验"><a href="#7-3-4-chi-2-拟合优度检验" class="headerlink" title="7.3.4 $$\chi^{2}$$拟合优度检验"></a>7.3.4 $$\chi^{2}$$拟合优度检验</h4><h5 id="定理7-2：Pearson定理"><a href="#定理7-2：Pearson定理" class="headerlink" title="定理7.2：Pearson定理"></a>定理7.2：Pearson定理</h5><h4 id="7-3-5-chi-2-独立性检验"><a href="#7-3-5-chi-2-独立性检验" class="headerlink" title="7.3.5 $$\chi^{2}$$独立性检验"></a>7.3.5 $$\chi^{2}$$独立性检验</h4>]]></content>
    
    
    <categories>
      
      <category>Fundamentals of Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>假设检验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第六章 参数估计</title>
    <link href="/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%8F%82%E6%95%B0%E4%BC%B0%E8%AE%A1/"/>
    <url>/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%8F%82%E6%95%B0%E4%BC%B0%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="6-1-点估计"><a href="#6-1-点估计" class="headerlink" title="6.1 点估计"></a>6.1 点估计</h3><h4 id="6-1-1-矩估计"><a href="#6-1-1-矩估计" class="headerlink" title="6.1.1 矩估计"></a>6.1.1 矩估计</h4><h5 id="定义6-1：矩估计"><a href="#定义6-1：矩估计" class="headerlink" title="定义6.1：矩估计"></a>定义6.1：矩估计</h5><p>随机变量 $X$ 服从某总体分布，其中包含 $k$ 个未知参数，$θ_i(i = 1, 2, … , k), \ μ_l = E(X^l)$ 为总体的 $l$ 阶矩。$X_i(i = 1, 2, … , n)$ 是来自于 $X$ 的样本，那么求解以下方程组得到的估计值 $θ_i(i = 1, 2, …, k)$ 的方法称为矩估计法。<br>$$<br>μ_i = A_i(i = 1, 2, …， k)<br>$$</p><h5 id="定理6-1-矩估计定理"><a href="#定理6-1-矩估计定理" class="headerlink" title="定理6.1 矩估计定理"></a>定理6.1 矩估计定理</h5><p>设随机变量 $X$ 的数学期望和 $μ$ 和方差 $σ^2$ 都存在，且有估计量 $σ^2&gt;0$。$μ$ 和 $σ^2$ 均未知。$X_i(i = 1, 2, …， n)$ 为来自 $X$ 的样本。则 $μ$ 和 ${σ}^2$ 的估计量分别为<br>$$<br>\hat{μ} = \overline{X}\<br>\hat{σ}^2 = \frac{1}{n}\sum_{i = 1}^{n}(X_i - \overline{X})^2<br>$$</p><h4 id="6-1-2-极大似然估计"><a href="#6-1-2-极大似然估计" class="headerlink" title="6.1.2 极大似然估计"></a>6.1.2 极大似然估计</h4><h5 id="定义6-2：极大似然估计"><a href="#定义6-2：极大似然估计" class="headerlink" title="定义6.2：极大似然估计"></a>定义6.2：极大似然估计</h5><p>$x$ 是样本值，$θ$ 为需要估计的总体参数，$L$ 为似然函数，极大似然估计的等式定义如下：<br>$$<br>\hatθ_{MLE}(x) = \underset{θ}{arg\max}L(θ)<br>$$<br>其中，对于随机变量 $X$, 似然函数 $L(θ) = \displaystyle\prod_{i = 1}^nP(X = x)$</p><h5 id="定理6-2：Poisson分布极大似然估计定理"><a href="#定理6-2：Poisson分布极大似然估计定理" class="headerlink" title="定理6.2：Poisson分布极大似然估计定理"></a>定理6.2：Poisson分布极大似然估计定理</h5><p>设 $X\sim\pi(\lambda)$ , $X_i(i = 1,2,…,n)$ 为 $X$ 的一个样本,则$\hat{\lambda} = \overline{X}$</p><h5 id="定理6-3：Exponential分布极大似然估计定理"><a href="#定理6-3：Exponential分布极大似然估计定理" class="headerlink" title="定理6.3：Exponential分布极大似然估计定理"></a>定理6.3：Exponential分布极大似然估计定理</h5><p>设 $X\sim\mathbb{E}(\lambda)$ , $X_i(i = 1,2,…,n)$为 $X$ 的一个样本, 则$\hat{\lambda} = \frac{1}{\overline{X}}$</p><h5 id="定理6-4：Gauss分布极大似然估计定理"><a href="#定理6-4：Gauss分布极大似然估计定理" class="headerlink" title="定理6.4：Gauss分布极大似然估计定理"></a>定理6.4：Gauss分布极大似然估计定理</h5><p>设 $X\sim\mathbb{N}(\mu,\sigma^2)$ , $X_i(i = 1,2,…,n)$ 为 $X$ 的一个样本, 则<br>$$<br>\hat{μ} = \overline{X}\<br>\hat{σ}^2 = \frac{1}{n}\sum_{i = 1}^{n}(X_i - \overline{X})^2<br>$$</p><h5 id="定理6-5：Uniform分布极大似然估计定理"><a href="#定理6-5：Uniform分布极大似然估计定理" class="headerlink" title="定理6.5：Uniform分布极大似然估计定理"></a>定理6.5：Uniform分布极大似然估计定理</h5><p>设 $X\sim\mathbb{U}(a,b)$ , $X_i(i = 1,2,…,n)$ 为 $X$ 的一个样本, 则 $a$ 和 $b$ 的极大似然估计分别为 $min_i{X_i}$ ，$max_i{X_i}$</p><h4 id="6-1-3-截尾估计"><a href="#6-1-3-截尾估计" class="headerlink" title="6.1.3 截尾估计"></a>6.1.3 截尾估计</h4><h4 id="6-1-4-评估分析"><a href="#6-1-4-评估分析" class="headerlink" title="6.1.4 评估分析"></a>6.1.4 评估分析</h4><h5 id="定义6-3：估计的无偏性"><a href="#定义6-3：估计的无偏性" class="headerlink" title="定义6.3：估计的无偏性"></a>定义6.3：估计的无偏性</h5><p>无偏估计指的是估计量抽样分布的数学期望等于被估总体参数。即对于 $\hat\theta(X_1,\ X_2, …，\ X_n)$，$E(\hat\theta)$ 存在且有<br>$$<br>E(\hat{\theta}) = \theta<br>$$<br>则称 $\hat\theta$ 为 $\theta$ 的无偏估计</p><h5 id="引理6-1："><a href="#引理6-1：" class="headerlink" title="引理6.1："></a>引理6.1：</h5><p> $X_i(i = 1,2,…,n)$为 $X$ 的一个样本，$g(x)$ 是 $x$ 的函数且 $E(g(X_i))$ 和 $Var(g(X_i))$ 存在，则<br>$$<br>&amp; E(\sum_{i = 1}^ng(X_i)) = n(E(g(X_1)))\<br>&amp; Var(\sum_{i = 1}^ng(X_i)) = n(Var(g(X_1)))<br>$$</p><h5 id="定理6-6"><a href="#定理6-6" class="headerlink" title="定理6.6:"></a>定理6.6:</h5><p>设总体 $X$ 的均值是 $\mu$ ，方差为 $\sigma^2$，$X_i(i = 1,2,…,n)$为 $X$ 的一个样本，则：</p><p>（1）$E(\overline{X}) = \mu$ （ $\overline X$ 是 $\mu$ 的无偏估计）</p><p>（2）$Var(\overline{X})=\frac{\sigma^2}{n}$</p><p>（3）$E(S^2)=\sigma^2$   （$S^2$ 是 $\sigma^2$ 的无偏估计）</p><p>其中，$S^2$要考虑偏差，有 $S^2 = \displaystyle \frac{1}{n - 1}\displaystyle\sum_{i = 1}^{n}(X_i - \overline{X})^2$</p><h5 id="定理6-7"><a href="#定理6-7" class="headerlink" title="定理6.7:"></a>定理6.7:</h5><p>设总体 $X$ 的 $k$ 阶矩 $\mu_k = E(X^k)$，$k \geq 1$ 存在，无论总体服从什么分布，$k$ 阶样本矩$A_k = \frac{1}{n}\displaystyle\sum_{i = 1}^nX_i^k$ 是 $k$ 阶总体矩 $\mu_k$ 的无偏估计</p><h5 id="定义6-4：估计的有效性"><a href="#定义6-4：估计的有效性" class="headerlink" title="定义6.4：估计的有效性"></a>定义6.4：估计的有效性</h5><p>对于总体未知参数的两个无偏估计量，相应抽样分布的方差小视为更有效，即，若 $\hat\theta_1，\hat\theta_2$ 为 $\theta$ 的两个无偏估计，有<br>$$<br>Var(\hat\theta_1) &lt; Var(\hat\theta_2)<br>$$<br>则称 $\hat\theta_1$ 比 $\hat\theta_2$ 更有效</p><h5 id="定义6-5：估计的一致性（类比于一致收敛）"><a href="#定义6-5：估计的一致性（类比于一致收敛）" class="headerlink" title="定义6.5：估计的一致性（类比于一致收敛）"></a>定义6.5：估计的一致性（类比于一致收敛）</h5><p>一致性是指随着样本容量 $n$ 增大，估计量越来越接近总体参数。即对于任意 $\epsilon &gt; 0$ ，有<br>$$<br>\lim_{n\rightarrow\infty}P(|\hat\theta - \theta|&lt;\epsilon) = 1<br>$$<br>则称 $\hat\theta$ 是 $\theta$ 的一致性估计量</p><h3 id="6-2-区间估计"><a href="#6-2-区间估计" class="headerlink" title="6.2 区间估计"></a>6.2 区间估计</h3><h5 id="定义6-6：置信区间"><a href="#定义6-6：置信区间" class="headerlink" title="定义6.6：置信区间"></a>定义6.6：置信区间</h5><p>设总体 $X$ 的分布$\ F(x;\theta)$ 中含有未知参数 $\theta$ ，若存在样本的两个估计量 $\underline{\theta}(X_i)$ 和 $\overline{\theta}(X_i)$ $(i = 1, \ 2,\ …,\ n)$ 使得对于给定的 $\alpha\ (0 &lt; \alpha &lt;1)$ ，有<br>$$<br>P(\underline\theta&lt;\theta&lt;\overline\theta) = 1 - \alpha<br>$$<br> 则称随机区间 $(\underline\theta，\overline\theta)$ 为总体参数 $\theta$ 的置信水平为 $1 - \alpha$ 的（双侧）置信区间，$\underline\theta$ 和 $ \overline\theta$ 分别为置信下限和置信上限</p><h4 id="6-2-1-单总体均值区间估计"><a href="#6-2-1-单总体均值区间估计" class="headerlink" title="6.2.1 单总体均值区间估计"></a>6.2.1 单总体均值区间估计</h4><h5 id="估计条件-1-X-sim-mathbb-N-mu-sigma-2-且-sigma-2-已知，-mu-未知"><a href="#估计条件-1-X-sim-mathbb-N-mu-sigma-2-且-sigma-2-已知，-mu-未知" class="headerlink" title="估计条件 1 $X\sim\mathbb{N}(\mu,\sigma^2)$ 且 $\sigma^2$ 已知，$\mu$ 未知"></a>估计条件 1 $X\sim\mathbb{N}(\mu,\sigma^2)$ 且 $\sigma^2$ 已知，$\mu$ 未知</h5><h5 id="估计条件-2-X-sim-mathbb-N-mu-sigma-2-且-sigma-2-，-mu-未知"><a href="#估计条件-2-X-sim-mathbb-N-mu-sigma-2-且-sigma-2-，-mu-未知" class="headerlink" title="估计条件 2. $X\sim\mathbb{N}(\mu,\sigma^2)$ 且 $\sigma^2$，$\mu$ 未知"></a>估计条件 2. $X\sim\mathbb{N}(\mu,\sigma^2)$ 且 $\sigma^2$，$\mu$ 未知</h5><h5 id="估计条件-3-X-不服从Gauss分布，但是样本容量较大（大于30）"><a href="#估计条件-3-X-不服从Gauss分布，但是样本容量较大（大于30）" class="headerlink" title="估计条件 3. $$X$$ 不服从Gauss分布，但是样本容量较大（大于30）"></a>估计条件 3. $$X$$ 不服从Gauss分布，但是样本容量较大（大于30）</h5><h4 id="6-2-2-单总体方差区间估计"><a href="#6-2-2-单总体方差区间估计" class="headerlink" title="6.2.2 单总体方差区间估计"></a>6.2.2 单总体方差区间估计</h4><h5 id="估计条件-1-X-sim-mathbb-N-mu-sigma-2-且-sigma-2-，-mu-未知"><a href="#估计条件-1-X-sim-mathbb-N-mu-sigma-2-且-sigma-2-，-mu-未知" class="headerlink" title="估计条件 1. $X\sim\mathbb{N}(\mu,\sigma^2)$ 且 $\sigma^2$，$\mu$ 未知"></a>估计条件 1. $X\sim\mathbb{N}(\mu,\sigma^2)$ 且 $\sigma^2$，$\mu$ 未知</h5><h4 id="6-2-3-双总体均值差区间估计"><a href="#6-2-3-双总体均值差区间估计" class="headerlink" title="6.2.3 双总体均值差区间估计"></a>6.2.3 双总体均值差区间估计</h4><h5 id="估计条件-1-X-sim-mathbb-N-mu-1-sigma-1-2-，-Y-sim-mathbb-N-mu-2-sigma-2-2-且-sigma-2-，-mu-1-mu-2-未知，-sigma-1-2-sigma-2-2-已知"><a href="#估计条件-1-X-sim-mathbb-N-mu-1-sigma-1-2-，-Y-sim-mathbb-N-mu-2-sigma-2-2-且-sigma-2-，-mu-1-mu-2-未知，-sigma-1-2-sigma-2-2-已知" class="headerlink" title="估计条件 1. $X\sim\mathbb{N}(\mu_1,\sigma_1^2)$ ，$Y\sim\mathbb{N}(\mu_2,\sigma_2^2)$ 且 $\sigma^2$，$\mu_1,\ \mu_2$ 未知，$\sigma_1^2,\ \sigma_2^2$ 已知"></a>估计条件 1. $X\sim\mathbb{N}(\mu_1,\sigma_1^2)$ ，$Y\sim\mathbb{N}(\mu_2,\sigma_2^2)$ 且 $\sigma^2$，$\mu_1,\ \mu_2$ 未知，$\sigma_1^2,\ \sigma_2^2$ 已知</h5><h5 id="估计条件-2-X-sim-mathbb-N-mu-1-sigma-1-2-，-Y-sim-mathbb-N-mu-2-sigma-2-2-且-sigma-2-，-mu-1-mu-2-未知，-sigma-1-2-sigma-2-2-未知，但-sigma-1-2-sigma-2-2"><a href="#估计条件-2-X-sim-mathbb-N-mu-1-sigma-1-2-，-Y-sim-mathbb-N-mu-2-sigma-2-2-且-sigma-2-，-mu-1-mu-2-未知，-sigma-1-2-sigma-2-2-未知，但-sigma-1-2-sigma-2-2" class="headerlink" title="估计条件 2. $X\sim\mathbb{N}(\mu_1,\sigma_1^2)$ ，$Y\sim\mathbb{N}(\mu_2,\sigma_2^2)$ 且 $\sigma^2$$，$$\mu_1,\ \mu_2$ 未知，$\sigma_1^2,\ \sigma_2^2$ 未知，但 $\sigma_1^2=\sigma_2^2$"></a>估计条件 2. $X\sim\mathbb{N}(\mu_1,\sigma_1^2)$ ，$Y\sim\mathbb{N}(\mu_2,\sigma_2^2)$ 且 $\sigma^2$$，$$\mu_1,\ \mu_2$ 未知，$\sigma_1^2,\ \sigma_2^2$ 未知，但 $\sigma_1^2=\sigma_2^2$</h5><h5 id="估计条件3-X-和-Y-不服从Gauss分布，但是样本容量均较大（大于30）"><a href="#估计条件3-X-和-Y-不服从Gauss分布，但是样本容量均较大（大于30）" class="headerlink" title="估计条件3. $X$ 和 $Y$ 不服从Gauss分布，但是样本容量均较大（大于30）"></a>估计条件3. $X$ 和 $Y$ 不服从Gauss分布，但是样本容量均较大（大于30）</h5><h4 id="6-2-4-双总体方差比区间估计"><a href="#6-2-4-双总体方差比区间估计" class="headerlink" title="6.2.4 双总体方差比区间估计"></a>6.2.4 双总体方差比区间估计</h4><h5 id="估计条件-1-X-sim-mathbb-N-mu-1-sigma-1-2-，-Y-sim-mathbb-N-mu-2-sigma-2-2-且-sigma-2-，-mu-1-mu-2-未知，-sigma-1-2-sigma-2-2-未知"><a href="#估计条件-1-X-sim-mathbb-N-mu-1-sigma-1-2-，-Y-sim-mathbb-N-mu-2-sigma-2-2-且-sigma-2-，-mu-1-mu-2-未知，-sigma-1-2-sigma-2-2-未知" class="headerlink" title="估计条件 1. $X\sim\mathbb{N}(\mu_1,\sigma_1^2)$ ，$Y\sim\mathbb{N}(\mu_2,\sigma_2^2)$ 且 $\sigma^2$，$\mu_1,\ \mu_2$ 未知，$\sigma_1^2,\ \sigma_2^2$ 未知"></a>估计条件 1. $X\sim\mathbb{N}(\mu_1,\sigma_1^2)$ ，$Y\sim\mathbb{N}(\mu_2,\sigma_2^2)$ 且 $\sigma^2$，$\mu_1,\ \mu_2$ 未知，$\sigma_1^2,\ \sigma_2^2$ 未知</h5><h4 id="6-2-5-二项分布区间估计（考察Bernoulli分布正态逼近定理）"><a href="#6-2-5-二项分布区间估计（考察Bernoulli分布正态逼近定理）" class="headerlink" title="6.2.5 二项分布区间估计（考察Bernoulli分布正态逼近定理）"></a>6.2.5 二项分布区间估计（考察Bernoulli分布正态逼近定理）</h4><h4 id="6-2-6-单侧置信区间"><a href="#6-2-6-单侧置信区间" class="headerlink" title="6.2.6 单侧置信区间"></a>6.2.6 单侧置信区间</h4>]]></content>
    
    
    <categories>
      
      <category>Fundamentals of Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>参数估计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第五章 抽样分布</title>
    <link href="/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%8A%BD%E6%A0%B7%E5%88%86%E5%B8%83/"/>
    <url>/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%8A%BD%E6%A0%B7%E5%88%86%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h2 id="第五章-抽样分布"><a href="#第五章-抽样分布" class="headerlink" title="第五章 抽样分布"></a>第五章 抽样分布</h2><h3 id="5-1-数据抽样"><a href="#5-1-数据抽样" class="headerlink" title="5.1 数据抽样"></a>5.1 数据抽样</h3><h4 id="5-1-1-数据分析"><a href="#5-1-1-数据分析" class="headerlink" title="5.1.1 数据分析"></a>5.1.1 数据分析</h4><h5 id="1-全体数据-rightarrow-整体结论"><a href="#1-全体数据-rightarrow-整体结论" class="headerlink" title="1. 全体数据 $$\rightarrow$$ 整体结论"></a>1. 全体数据 $$\rightarrow$$ 整体结论</h5><h5 id="1-全体数据-rightarrow-样本数据-rightarrow-样本结论-rightarrow-整体结论"><a href="#1-全体数据-rightarrow-样本数据-rightarrow-样本结论-rightarrow-整体结论" class="headerlink" title="1. 全体数据 $$\rightarrow$$ 样本数据 $$\rightarrow$$ 样本结论 $$\rightarrow$$ 整体结论"></a>1. 全体数据 $$\rightarrow$$ 样本数据 $$\rightarrow$$ 样本结论 $$\rightarrow$$ 整体结论</h5><h4 id="5-1-2-抽样方法"><a href="#5-1-2-抽样方法" class="headerlink" title="5.1.2 抽样方法"></a>5.1.2 抽样方法</h4><h5 id="1-简单随机抽样"><a href="#1-简单随机抽样" class="headerlink" title="1. 简单随机抽样"></a>1. 简单随机抽样</h5><h5 id="2-系统抽样"><a href="#2-系统抽样" class="headerlink" title="2. 系统抽样"></a>2. 系统抽样</h5><h5 id="3-整群抽样"><a href="#3-整群抽样" class="headerlink" title="3. 整群抽样"></a>3. 整群抽样</h5><h5 id="4-分层抽样"><a href="#4-分层抽样" class="headerlink" title="4. 分层抽样"></a>4. 分层抽样</h5><h4 id="5-1-3-抽样应用示例"><a href="#5-1-3-抽样应用示例" class="headerlink" title="5.1.3 抽样应用示例"></a>5.1.3 抽样应用示例</h4><h3 id="5-2-矩与抽样分布"><a href="#5-2-矩与抽样分布" class="headerlink" title="5.2 矩与抽样分布"></a>5.2 矩与抽样分布</h3><h4 id="5-2-1-矩与统计量"><a href="#5-2-1-矩与统计量" class="headerlink" title="5.2.1 矩与统计量"></a>5.2.1 矩与统计量</h4><h5 id="定理5-1：统计量抽样收敛定理"><a href="#定理5-1：统计量抽样收敛定理" class="headerlink" title="定理5.1：统计量抽样收敛定理"></a>定理5.1：统计量抽样收敛定理</h5><p>设总体$$X$$的均值是$$\mu$$，方差为$$\sigma^2$$，$$X_i(i = 1,2,…,n)$$为$$X$$的一个样本，则：</p><p>（1）$$E(\overline{X}) = \mu$$ （ $$\overline X$$是 $$\mu$$ 的无偏估计）</p><p>（2）$$Var(\overline{X})=\frac{\sigma^2}{n}$$</p><p>（3）$$E(S^2)=\sigma^2$$   （$$S^2$$ 是 $$\sigma^2$$ 的无偏估计）</p><p>其中，$$S^2$$要考虑偏差，有$$S^2 = \frac{1}{n - 1}\displaystyle\sum_{i = 1}^{n}(X_i - \overline{X})^2$$</p><h4 id="5-2-2-抽样分布"><a href="#5-2-2-抽样分布" class="headerlink" title="5.2.2 抽样分布"></a>5.2.2 抽样分布</h4><h5 id="1-抽样分布的种类"><a href="#1-抽样分布的种类" class="headerlink" title="1. 抽样分布的种类"></a>1. 抽样分布的种类</h5><p>目前已知的抽样分布就多大几十种，但是常见的抽样分布只有四种：$$Gauss$$ 分布，$$t$$ 分布，$$F$$ 分布，$$\chi^2$$ 分布</p><h4 id="5-2-3-抽样分布示例"><a href="#5-2-3-抽样分布示例" class="headerlink" title="5.2.3 抽样分布示例"></a>5.2.3 抽样分布示例</h4><h3 id="5-3-极限定理"><a href="#5-3-极限定理" class="headerlink" title="5.3 极限定理"></a>5.3 极限定理</h3><h4 id="5-3-1-矩的不等式"><a href="#5-3-1-矩的不等式" class="headerlink" title="5.3.1 矩的不等式"></a>5.3.1 矩的不等式</h4><h5 id="定理5-2：Marcov不等式"><a href="#定理5-2：Marcov不等式" class="headerlink" title="定理5.2：Marcov不等式"></a>定理5.2：Marcov不等式</h5><p>设$$\ X\ $$是非负随机变量且具有数学期望 $$E(X)$$ ，则 $$\forall{\varepsilon} &gt; 0$$，有：<br>$$<br>P(X\geq\varepsilon)\leq\frac{E(X)}{\varepsilon}<br>$$</p><h5 id="定理5-3：Chebyshev不等式"><a href="#定理5-3：Chebyshev不等式" class="headerlink" title="定理5.3：Chebyshev不等式"></a>定理5.3：Chebyshev不等式</h5><p>设随机变量$$\ X\ $$具有数学期望 $$E(X)=\mu$$， $$Var(X) = \sigma^2$$ ，则 $$\forall{\varepsilon} &gt; 0$$ ，有：<br>$$<br>P(|x-\mu|\geq\varepsilon)\leq\frac{\sigma^2}{\varepsilon^2}<br>$$</p><h4 id="5-3-2-大数定律"><a href="#5-3-2-大数定律" class="headerlink" title="5.3.2 大数定律"></a>5.3.2 大数定律</h4><h5 id="定理5-4：方差为0的充要条件"><a href="#定理5-4：方差为0的充要条件" class="headerlink" title="定理5.4：方差为0的充要条件"></a>定理5.4：方差为0的充要条件</h5><p>$$Var(X)=0$$ $$iff.$$ $$P(X=E(X)) = 1$$</p><h5 id="定理5-5：Bernoulli大数定律"><a href="#定理5-5：Bernoulli大数定律" class="headerlink" title="定理5.5：Bernoulli大数定律"></a>定理5.5：Bernoulli大数定律</h5><p>$$X_n\sim\mathbb{B}(n,\ p)$$，$$\forall\varepsilon&gt;0$$，有：<br>$$<br>\displaystyle{\lim_{n\rightarrow\infty}}P(|\frac{x_n}{n}-p|&lt;\varepsilon)=1<br>$$</p><h5 id="定理5-6：Chebyshev大数定律"><a href="#定理5-6：Chebyshev大数定律" class="headerlink" title="定理5.6：Chebyshev大数定律"></a>定理5.6：Chebyshev大数定律</h5><p> 设 $$X_i(i = 1,2,…,n)$$为独立同分布随机变量，数学期望 $$E(X) = \mu$$ 和有限的方差 $$Var(X_i) = \sigma_i^2$$，$$\forall\ \varepsilon&gt;0$$，有：<br>$$<br>\displaystyle{\lim_{n\rightarrow\infty}}P(|\frac{1}{n}\sum_{i=1}^{n}X_i-\frac{1}{n}\sum_{i=1}^{n}EX_i|&lt;\varepsilon)=1<br>$$</p><h5 id="定理5-7：Khinchin大数定律"><a href="#定理5-7：Khinchin大数定律" class="headerlink" title="定理5.7：Khinchin大数定律"></a>定理5.7：Khinchin大数定律</h5><p> 设 $$X_i(i = 1,2,…,n)$$为 $$X$$ 的独立同分布随机变量，数学期望 $$E(X_i) = \mu$$ 存在，$$\forall\ \varepsilon&gt;0$$，有：<br>$$<br>\displaystyle{\lim_{n\rightarrow\infty}}P(|\frac{1}{n}\sum_{i=1}^{n}X_i-\mu|&lt;\varepsilon)=1<br>$$</p><h5 id="定理5-8：弱大数定律"><a href="#定理5-8：弱大数定律" class="headerlink" title="定理5.8：弱大数定律"></a>定理5.8：弱大数定律</h5><p> 设 $$X_i(i = 1,2,…,n)$$为独立同分布随机变量，数学期望 $$E(X)$$ 存在，则 $$\overline{X}<em>n$$ 依概率收敛于 $$EX$$ ，即 $$\forall\ \varepsilon &gt;0$$，有：<br>$$<br>\displaystyle{\lim</em>{n\rightarrow\infty}}P(|\frac{x_n}{n}-p|&lt;\varepsilon)=1<br>$$</p><h4 id="5-3-3-中心极限定理"><a href="#5-3-3-中心极限定理" class="headerlink" title="5.3.3 中心极限定理"></a>5.3.3 中心极限定理</h4><h5 id="定理5-9：De-Moivre-Laplace中心极限定理"><a href="#定理5-9：De-Moivre-Laplace中心极限定理" class="headerlink" title="定理5.9：De Moivre-Laplace中心极限定理"></a>定理5.9：De Moivre-Laplace中心极限定理</h5><p>$$X_n\sim\mathbb{B}(n,\ p)$$，则：<br>$$<br>\lim_{n\rightarrow\infty}P(\frac{X_n-np}{\sqrt{np(1-p)}}\leq{x})=\frac{1}{\sqrt{2\pi}}\int_{-\infty}^{x}e^{\frac{-t^2}{2}}dt<br>$$</p><h5 id="定理5-10：独立同分布中心极限定理"><a href="#定理5-10：独立同分布中心极限定理" class="headerlink" title="定理5.10：独立同分布中心极限定理"></a>定理5.10：独立同分布中心极限定理</h5><p> 设 $$X_i(i = 1,2,…,n)$$为独立同分布随机变量，数学期望 $$E(X) = \mu$$ 和有限的方差 $$Var(X_i) = \sigma_i^2$$，随机变量之和 $$\displaystyle\sum_{i = 1}^{n}X_i$$ ，设：<br>$$<br>Y_n = \frac{\displaystyle\sum_{i = 1}^{n}X_i-E(\displaystyle\sum_{i = 1}^{n}X_i)}{\sqrt{D(\displaystyle\sum_{i = 1}^{n}X_i)}}=\frac{\displaystyle\sum_{i = 1}^{n}X_i-n\mu}{\sqrt{n}\sigma}<br>$$<br>则：<br>$$<br>\lim_{n\rightarrow\infty}P(Y_n\leq{x})=\frac{1}{\sqrt{2\pi}}\int_{-\infty}^{x}e^{\frac{-t^2}{2}}dt=\Phi(x)<br>$$</p><h5 id="定理5-11：独立同分布正态样本"><a href="#定理5-11：独立同分布正态样本" class="headerlink" title="定理5.11：独立同分布正态样本"></a>定理5.11：独立同分布正态样本</h5><p>$$X_i$$ (i = 1，2，…，n) 是总体 $\mathbb{N}(\mu,\sigma^2)$ 的样本，$$\overline{X}$$ 是样本均值，则：<br>$$<br>\overline{X}\sim\mathbb{N}(\mu,\frac{\sigma^2}{n})<br>$$</p><h3 id="5-4-常用抽样分布"><a href="#5-4-常用抽样分布" class="headerlink" title="5.4 常用抽样分布"></a>5.4 常用抽样分布</h3><h4 id="5-4-1-Gamma-函数"><a href="#5-4-1-Gamma-函数" class="headerlink" title="5.4.1 $$\Gamma$$函数"></a>5.4.1 $$\Gamma$$函数</h4><h5 id="定义5-1：-Gamma-函数"><a href="#定义5-1：-Gamma-函数" class="headerlink" title="定义5.1：$$\Gamma$$函数"></a>定义5.1：$$\Gamma$$函数</h5><p>实数域上 $$\Gamma$$ 函数定义为：<br>$$<br>\Gamma(x)=\int_{0}^{+\infty}t^{x-1}e^{-t}dt\ (x&gt;0)<br>$$<br>$$\Gamma$$ 函数的重要性质：<br>$$<br>\Gamma(n) = (n-1)!\ \ \ n\in\mathbb{N}\<br>\Gamma(1-x)\Gamma(x)=\frac{\pi}{sin\pi{x}}\<br>\Gamma(\frac{1}{2})=\sqrt{\pi}\<br>\Gamma(x)\rightarrow\sqrt{2\pi}e^{-x}x^{x-\frac{1}{2}}\ \ \ x\rightarrow+\infty<br>$$</p><h4 id="5-4-2-chi-2-分布-Karl-Pearson"><a href="#5-4-2-chi-2-分布-Karl-Pearson" class="headerlink" title="5.4.2  $$\chi^{2}$$ 分布 (Karl Pearson)"></a>5.4.2  $$\chi^{2}$$ 分布 (Karl Pearson)</h4><h5 id="定理5-2：-chi-2-分布"><a href="#定理5-2：-chi-2-分布" class="headerlink" title="定理5.2：$$\chi^{2}$$分布"></a>定理5.2：$$\chi^{2}$$分布</h5><p>设 $$X_i(i = 1,2,…,n)$$为 $\mathbb{N}(0,1)$ 的独立同分布随机变量，则称随机变量：<br>$$<br>\chi^2 = \sum_{i=1}^{n}X_i^2<br>$$<br>为服从自由度为 $n$ 的 $\chi^2$ 分布，记为 $\chi^2(n)$</p><h5 id="定理5-12：-chi-2-分布可加性"><a href="#定理5-12：-chi-2-分布可加性" class="headerlink" title="定理5.12：$$\chi^{2}$$分布可加性"></a>定理5.12：$$\chi^{2}$$分布可加性</h5><p>设 $X_1 \sim \chi^2(n_1)$，$X_2 \sim\chi^2(n_2)$，且 $X_1$ 和 $X_2$ 相互独立，则：<br>$$<br>X_1+X_2\sim\chi^2(n_1+n_2)<br>$$</p><h5 id="定理5-13：-chi-2-分布的概率密度"><a href="#定理5-13：-chi-2-分布的概率密度" class="headerlink" title="定理5.13：$$\chi^{2}$$分布的概率密度"></a>定理5.13：$$\chi^{2}$$分布的概率密度</h5><p>$$\chi^2(n)$$ 分布的概率密度函数为：<br>$$<br>f(x)=\frac{1}{2^{\frac{n}{2}}\Gamma(\frac{n}{2})}x^{\frac{n}{2}-1}e^{-\frac{x}{2}}<br>$$</p><h5 id="定理5-14：-chi-2-分布的是数字特征"><a href="#定理5-14：-chi-2-分布的是数字特征" class="headerlink" title="定理5.14：$$\chi^{2}$$分布的是数字特征"></a>定理5.14：$$\chi^{2}$$分布的是数字特征</h5><p>若 $X \sim \chi^2(n)$，则 $E(X)=n$，$Var(X)=2n$</p><h5 id="定理5-15：均值抽样分布定理"><a href="#定理5-15：均值抽样分布定理" class="headerlink" title="定理5.15：均值抽样分布定理"></a>定理5.15：均值抽样分布定理</h5><p>$$X_i$$ (i = 1，2，…，n) 是总体 $\mathbb{N}(\mu,\sigma^2)$ 的样本，$$\overline{X}$$ 是样本均值，则：<br>$$<br>\overline{X}\sim\mathbb{N}(\mu,\frac{\sigma^2}{n})<br>$$</p><h5 id="定理5-16：方差抽样分布定理"><a href="#定理5-16：方差抽样分布定理" class="headerlink" title="定理5.16：方差抽样分布定理"></a>定理5.16：方差抽样分布定理</h5><p>$$X_i$$ (i = 1，2，…，n) 是总体 $\mathbb{N}(\mu,\sigma^2)$ 的样本，$S^2$ 是样本方差，则有：<br>$$<br>\frac{(n-1)S^2}{\sigma^2}\sim\chi^2(n-1)<br>$$</p><h4 id="5-4-3-t-分布-Gosset"><a href="#5-4-3-t-分布-Gosset" class="headerlink" title="5.4.3  $$t$$ 分布 (Gosset)"></a>5.4.3  $$t$$ 分布 (Gosset)</h4><h5 id="定义5-3：-t-分布"><a href="#定义5-3：-t-分布" class="headerlink" title="定义5.3：$$t$$ 分布"></a>定义5.3：$$t$$ 分布</h5><p>设 $X\sim\mathbb{N}(0,1)$，$Y\sim\chi^2(n)$，且 $X$ 和 $Y$ 相互独立，则随机变量<br>$$<br>t=\frac{X}{\sqrt{\frac{Y}{n}}}<br>$$<br>称为服从自由度为 $n$ 的 $t$ 分布，记为 $t(n)$</p><h5 id="定理5-17：预备定理"><a href="#定理5-17：预备定理" class="headerlink" title="定理5.17：预备定理"></a>定理5.17：预备定理</h5><p>设 $(X_1$，$X_{2})$ 是二维随机变量，其分布密度函数为 $f(x_1,\ x_2)$，且 $X_1$ 和 $X_2$ 相互独立，则 $$ 的分布密度函数为：<br>$$<br>f_X(x)=f_{x_1}(xx_2)f_{x_2}(x_2)|x_2|dx_2<br>$$</p><h5 id="定理5-18：-t-分布密度函数"><a href="#定理5-18：-t-分布密度函数" class="headerlink" title="定理5.18：$$t$$ 分布密度函数"></a>定理5.18：$$t$$ 分布密度函数</h5><p>$t(n)$ 的密度函数为:<br>$$<br>f(x)=\frac{\Gamma(\frac{n+1}{2})}{\sqrt{n\pi}\Gamma(\frac{n}{2})}(1+\frac{x^2}{n})^{-\frac{n+1}{2}}<br>$$</p><h5 id="定理5-19：-t-分布数字特征"><a href="#定理5-19：-t-分布数字特征" class="headerlink" title="定理5.19：$$t$$ 分布数字特征"></a>定理5.19：$$t$$ 分布数字特征</h5><p>$X\sim t(n)$ ，则：<br>$$<br>E(X) = 0\<br>Var(X)=\frac{n}{n-2}<br>$$</p><h5 id="定理5-20：-t-分布对称性"><a href="#定理5-20：-t-分布对称性" class="headerlink" title="定理5.20：$$t$$ 分布对称性"></a>定理5.20：$$t$$ 分布对称性</h5><p>对于给定的正数 $\alpha\ (0&lt;\alpha&lt;1)$，称满足条件 $P(t&gt;t_{\alpha}(n))=\int_{t_{\alpha}(n)}^{+\infty}f(x)dx=\alpha$ 的点 $t_{\alpha}(n)$ 称为 $t(n)$ 上的 $\alpha$ 分位点。则：<br>$$<br>t_{1-\alpha}(n)=-t_{\alpha}{(n)}<br>$$</p><h5 id="定理5-21：-t-分布的正态收敛性"><a href="#定理5-21：-t-分布的正态收敛性" class="headerlink" title="定理5.21：$$t$$ 分布的正态收敛性"></a>定理5.21：$$t$$ 分布的正态收敛性</h5><p>$t_(n)$ 分布的概率密度 $f(x)$ 趋向于标准正态分布的概率密度，即：<br>$$<br>\lim_{n\rightarrow\infty}f(x)=\frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}}， (-\infty&lt;x&lt;+\infty)<br>$$</p><h5 id="定理5-22：均值抽样分布定理"><a href="#定理5-22：均值抽样分布定理" class="headerlink" title="定理5.22：均值抽样分布定理"></a>定理5.22：均值抽样分布定理</h5><p>$$X_i\ (i = 1，2，…，n)$$  是总体 $\mathbb{N}(\mu,\sigma^2)$ 的样本，总体方差未知，样本均值和样本方差分别为 $\overline{X}$ 和 $S^2$ ，则：<br>$$<br>\frac{\overline{X}-\mu}{\frac{S}{\sqrt{n}}}\sim t(n-1)<br>$$</p><h4 id="5-4-4-F-分布-Fisher"><a href="#5-4-4-F-分布-Fisher" class="headerlink" title="5.4.4 $$F$$ 分布 (Fisher)"></a>5.4.4 $$F$$ 分布 (Fisher)</h4><h5 id="定义5-4：-F-分布"><a href="#定义5-4：-F-分布" class="headerlink" title="定义5.4：$$F$$ 分布"></a>定义5.4：$$F$$ 分布</h5><p>设 $X\sim\chi^2(n_1)$，$Y\sim\chi^2(n_2)$，且 $X$ 和 $Y$ 相互独立，则随机变量<br>$$<br>F=\frac{\frac{X}{n_1}}{\frac{Y}{n_2}}=\frac{n_2}{n_1}\frac{X}{Y}<br>$$<br>称为服从自由度为 $n_1，n_2$ 的 $F$ 分布，记为 $F(n_1，n_2)$，其中 $n_1$ 称为第一自由度，$n_2$ 称为第二自由度。</p><h5 id="定理5-23：-F-分布的倒数对称性"><a href="#定理5-23：-F-分布的倒数对称性" class="headerlink" title="定理5.23：$$F$$ 分布的倒数对称性"></a>定理5.23：$$F$$ 分布的倒数对称性</h5><p>$$<br>F_{1-\alpha}(n_1,\ n_2)=\frac{1}{F_{\alpha}(n_1, \ n_2)}<br>$$</p><h5 id="定理5-24：-F-分布密度函数"><a href="#定理5-24：-F-分布密度函数" class="headerlink" title="定理5.24：$$F$$ 分布密度函数"></a>定理5.24：$$F$$ 分布密度函数</h5><p>$F(n_1, \ n_2)$ 分布的概率密度函数为：<br>$$<br>f(x;\ n_1,\ n_2) = \frac{\Gamma(\frac{n_1+n_2}{2})}{\Gamma(\frac{n_1}{2})\Gamma(\frac{n_2}{2})}(\frac{n_1}{n_2})^{\frac{n_1}{2}}\frac{x^{\frac{n_1-2}{2}}}{(1+\frac{n_1}{n_2}x)^{\frac{n_1+n_2}{2}}}，\ x&gt;0<br>$$</p><h5 id="定理5-25：-F-分布数学期望"><a href="#定理5-25：-F-分布数学期望" class="headerlink" title="定理5.25：$$F$$ 分布数学期望"></a>定理5.25：$$F$$ 分布数学期望</h5><p>若 $X\sim F(n_1，n_2)$，则：<br>$$<br>E(X)=\frac{n_2}{n_2-2}，\ n_2&gt;2\<br>Var(X)=\frac{n_2^2(2n_1+2n_2-4)}{n_1(n_2-2)^2(n_2-4)}，\ n_2&gt;4<br>$$</p><h5 id="定理5-26：正态分布逼近定理"><a href="#定理5-26：正态分布逼近定理" class="headerlink" title="定理5.26：正态分布逼近定理"></a>定理5.26：正态分布逼近定理</h5><p>设 $X_{i}\ (i=1，2，…，n_1)$ ， $Y_{i}\ (i=1，2，…，n_2)$ ，是分别来自两正态总体  $\mathbb{N}(\mu_1,\sigma_1^2)$， $\mathbb{N}(\mu_2,\sigma_2^2)$，则：<br>$$<br>\frac{(\overline X-\overline Y)-(\mu_1-\mu_2)}{\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}}\sim \mathbb{N}(0,\ 1)<br>$$</p><h5 id="定理5-27：方差抽样分布定理"><a href="#定理5-27：方差抽样分布定理" class="headerlink" title="定理5.27：方差抽样分布定理"></a>定理5.27：方差抽样分布定理</h5><p>设 $X_{i}\ (i=1，2，…，n_1)$ ， $Y_{i}\ (i=1，2，…，n_2)$ ，是分别来自两正态总体  $\mathbb{N}(\mu_1,\sigma_1^2)$， $\mathbb{N}(\mu_2,\sigma_2^2)$，$S_1^2,\ S_2^2 $ 分别为两样本方差，则：<br>$$<br>\frac{S_1^2/S_2^2}{\sigma_1^2/\sigma_2^2}\sim F(n_1-1,\ n_2-1)<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>Fundamentals of Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>抽样分布</tag>
      
      <tag>极限定理</tag>
      
      <tag>大数定律</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第四章 常用概率分布</title>
    <link href="/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E5%B8%B8%E7%94%A8%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/"/>
    <url>/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E5%B8%B8%E7%94%A8%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h2 id="第四章-常用概率分布"><a href="#第四章-常用概率分布" class="headerlink" title="第四章 常用概率分布"></a>第四章 常用概率分布</h2><h3 id="4-1-离散概率分布"><a href="#4-1-离散概率分布" class="headerlink" title="4.1 离散概率分布"></a>4.1 离散概率分布</h3><h4 id="4-1-1-Bernoulli-分布"><a href="#4-1-1-Bernoulli-分布" class="headerlink" title="4.1.1 Bernoulli 分布"></a>4.1.1 Bernoulli 分布</h4><h5 id="定义4-1-Bernoulli-分布"><a href="#定义4-1-Bernoulli-分布" class="headerlink" title="定义4.1 Bernoulli 分布"></a>定义4.1 Bernoulli 分布</h5><p>随机变量 $X$ 服从参数 $p$ 的伯努利分布，若：<br>$$<br>P{X = k} = p^k(1-p)^{1-k}\<br>k \in {0,\ 1}<br>$$<br>记作<br>$$<br>X\sim Bern(p)<br>$$</p><h5 id="定理4-1-Bernoulli-分布矩生成函数"><a href="#定理4-1-Bernoulli-分布矩生成函数" class="headerlink" title="定理4.1  Bernoulli 分布矩生成函数"></a>定理4.1  Bernoulli 分布矩生成函数</h5><p>$X$ 为伯努利分布随机变量，则<br>$$<br>M_X(s) = (1-p)+pe^s<br>$$</p><h4 id="4-1-2-Binomial-分布"><a href="#4-1-2-Binomial-分布" class="headerlink" title="4.1.2 Binomial 分布"></a>4.1.2 Binomial 分布</h4><h5 id="定义4-2-Binomial-分布"><a href="#定义4-2-Binomial-分布" class="headerlink" title="定义4.2 Binomial 分布"></a>定义4.2 Binomial 分布</h5><p>随机变量 $X$ 服从参数 $n,\ p$ 的二项分布，若<br>$$<br>P{X = k} = \binom{n}{k}p^k(1-p)^{n-k}\<br>k = 1,\ 2,…,n<br>$$<br>其中 $n,\ p$ 为参数，记为 $X\sim \mathbb{B}(n,\ p)$. 特别地，利用微分恒等式可以得到二项分布的数字特征<br>$$<br>E(X) = np\<br>V(X) = np(1-p)<br>$$</p><h5 id="定理4-2-Binomial-分布矩生成函数"><a href="#定理4-2-Binomial-分布矩生成函数" class="headerlink" title="定理4.2 Binomial 分布矩生成函数"></a>定理4.2 Binomial 分布矩生成函数</h5><p>$X\sim \mathbb{B}(n,\ p)$，则<br>$$<br>M_X(s) = (pe^s+1-p)^n<br>$$</p><h5 id="定理4-3-Binomial-分布可加性"><a href="#定理4-3-Binomial-分布可加性" class="headerlink" title="定理4.3 Binomial 分布可加性"></a>定理4.3 Binomial 分布可加性</h5><p>两二项分布随机变量 $X\sim \mathbb{B}(m,\ p), Y\sim\mathbb{B}(n,\ p)$ 相互独立，则有<br>$$<br>X+Y\sim\mathbb{B}(m+n,\ p)<br>$$</p><h4 id="4-1-3-Poisson-分布"><a href="#4-1-3-Poisson-分布" class="headerlink" title="4.1.3 Poisson 分布"></a>4.1.3 Poisson 分布</h4><h5 id="定义4-3-Poisson-分布"><a href="#定义4-3-Poisson-分布" class="headerlink" title="定义4.3 Poisson 分布"></a>定义4.3 Poisson 分布</h5><p>泊松分布的概率分布律为<br>$$<br>P{X = k} = \frac{\lambda^k}{k!}e^{-\lambda}\k= 0,\ 1,\ 2,\ …<br>$$<br>其中 $\lambda$ 为参数，记作 $X\sim \pi(\lambda)$. 利用简单的变形可得泊松分布的数字特征<br>$$<br>E(X) = \lambda\<br>V(X) = \lambda<br>$$</p><h5 id="定理4-4-Poisson-分布矩生成函数"><a href="#定理4-4-Poisson-分布矩生成函数" class="headerlink" title="定理4.4 Poisson 分布矩生成函数"></a>定理4.4 Poisson 分布矩生成函数</h5><p>$X\sim\pi(\lambda)$，则<br>$$<br>M_X(s) = e^{\lambda(e^s - 1)}<br>$$</p><h5 id="定理4-5-Binomial-分布-Poisson-逼近定理"><a href="#定理4-5-Binomial-分布-Poisson-逼近定理" class="headerlink" title="定理4.5 Binomial 分布 Poisson 逼近定理"></a>定理4.5 Binomial 分布 Poisson 逼近定理</h5><p>设 $\lambda&gt;0$ 是一个常数，$n$ 为正整数，若 $np_n$ 近似为 $\lambda$ ，则对于任意固定的非负整数 $k$，有<br>$$<br>\lim_{n\rightarrow \infty}\binom{n}{k}p_n^k(1-p_n)^{n-k}=\frac{\lambda^k}{k!}e^{-\lambda}<br>$$</p><h4 id="4-1-4-Geometric-分布"><a href="#4-1-4-Geometric-分布" class="headerlink" title="4.1.4 Geometric 分布"></a>4.1.4 Geometric 分布</h4><h5 id="定义4-4-Geometric-分布"><a href="#定义4-4-Geometric-分布" class="headerlink" title="定义4.4 Geometric 分布"></a>定义4.4 Geometric 分布</h5><p>几何分布的概率分布律为<br>$$<br>P{X=k}=(1-p)^{k-1}p\k = 1,\ 2,\ …,\ n<br>$$<br>其中 $p$ 为参数，记作 $X\sim\mathbb{G}(p)$. 利用等比数列求和错位相减得到几何分布的数字特征<br>$$<br>E(X) = \frac{1}{p}\<br>V(x) = \frac{1-p}{p^2}<br>$$</p><h5 id="定理4-6-Geometric-分布无记忆性"><a href="#定理4-6-Geometric-分布无记忆性" class="headerlink" title="定理4.6 Geometric 分布无记忆性"></a>定理4.6 Geometric 分布无记忆性</h5><p>取值为正整数的随机变量 $X$ 服从几何分布，当且仅当 $X$ 有无记忆性<br>$$<br>P{X&gt;m+n\ |\ X&gt;m} = P{X&gt;n}\ \forall m,\ n\geq0<br>$$</p><h5 id="定理4-7-Geometric-分布矩生成函数"><a href="#定理4-7-Geometric-分布矩生成函数" class="headerlink" title="定理4.7 Geometric 分布矩生成函数"></a>定理4.7 Geometric 分布矩生成函数</h5><p>$X\sim\mathbb{G}(p)$ ，则<br>$$<br>M_X(s) = \frac{pe^s}{1-(1-p)e^s}<br>$$</p><h4 id="4-1-5-Negative-Binomial-Pascal-分布"><a href="#4-1-5-Negative-Binomial-Pascal-分布" class="headerlink" title="4.1.5 Negative-Binomial (Pascal) 分布"></a>4.1.5 Negative-Binomial (Pascal) 分布</h4><h5 id="定义4-5-Negative-Binomial-分布-一般化的几何分布"><a href="#定义4-5-Negative-Binomial-分布-一般化的几何分布" class="headerlink" title="定义4.5 Negative-Binomial 分布(一般化的几何分布)"></a>定义4.5 Negative-Binomial 分布(一般化的几何分布)</h5><p>随机变量 $X$ 服从参数为 $r$ 和 $p$ 的负二项分布，其概率分布律为<br>$$<br>\mathbb{NB}(k;r,p) = \binom{k-1}{n-r}(1-p)^{k-r}p^r\k = r,\ r+1,\ ……<br>$$<br>记作 $X\sim\mathbb{NB}(r,\ p)$. 特别地，利用组合恒等式不难求出负二项分布的数字特征<br>$$<br>E(X) = \frac{r}{p}\V(X) = \frac{r(1-p)}{p^2}<br>$$</p><h5 id="定理4-8-Negative-Binomial-分布-Poisson-逼近定理"><a href="#定理4-8-Negative-Binomial-分布-Poisson-逼近定理" class="headerlink" title="定理4.8 Negative-Binomial 分布 Poisson 逼近定理"></a>定理4.8 Negative-Binomial 分布 Poisson 逼近定理</h5><p>令 $p = \frac{r}{\lambda+r}$，则<br>$$<br>\lim_{r\rightarrow\infty}\mathbb{NB}(k’;r,p) = \lim_{r\rightarrow\infty}\binom{k’+r-1}{k’}(1-p)^{k’}p^r = \pi(k’;\lambda)<br>$$</p><h4 id="4-1-6-Hyper-Geometric-分布"><a href="#4-1-6-Hyper-Geometric-分布" class="headerlink" title="4.1.6 Hyper-Geometric 分布"></a>4.1.6 Hyper-Geometric 分布</h4><h5 id="定义4-6-Hyper-Geometric分布"><a href="#定义4-6-Hyper-Geometric分布" class="headerlink" title="定义4.6 Hyper-Geometric分布"></a>定义4.6 Hyper-Geometric分布</h5><p>超几何分布的概率分布律为<br>$$<br>P(X=i) = \frac{\binom{m}{i}\binom{N-m}{n-i}}{\binom{N}{n}}\<br>i = 1,\ 2,\ …,\ n<br>$$<br>其中参数 $n,\ N,\ m$ 均为正整数且 $m\le N,\ n\le N$，记作 $X\sim\mathbb{H}(N,n,m)$. 特别地，利用极大似然估计不难得到超几何分布的数字特征<br>$$<br>E(X) = \frac{nm}{N}\V(X) = \frac{nm}{N}\bigg(\frac{(n-1)(m-1)}{N-1}+1-\frac{nm}{N}\bigg)<br>$$</p><h5 id="定理4-9-Hyper-Geometric-分布-Binomial-逼近定理"><a href="#定理4-9-Hyper-Geometric-分布-Binomial-逼近定理" class="headerlink" title="定理4.9 Hyper-Geometric 分布 Binomial 逼近定理"></a>定理4.9 Hyper-Geometric 分布 Binomial 逼近定理</h5><p>$$<br>\lim_{n\rightarrow\infty}\mathbb{H}(N,M,n)=\mathbb{B}(n,p)<br>$$</p><p>其中 $\frac{M}{N}=p$ </p><h3 id="4-2-连续概率分布"><a href="#4-2-连续概率分布" class="headerlink" title="4.2 连续概率分布"></a>4.2 连续概率分布</h3><h4 id="4-2-1-Uniform-分布"><a href="#4-2-1-Uniform-分布" class="headerlink" title="4.2.1 Uniform 分布"></a>4.2.1 Uniform 分布</h4><h5 id="定义4-7-Uniform-分布"><a href="#定义4-7-Uniform-分布" class="headerlink" title="定义4.7 Uniform 分布"></a>定义4.7 Uniform 分布</h5><p>均匀分布的概率密度函数为<br>$$<br>f(x)= \frac{1}{b-a}\<br>a&lt;x&lt;b<br>$$<br>其中 $a,\ b$ 为参数，记作 $X\sim\mathbb{U}(a,b)$，利用定义不难求出均匀分布的数字特征<br>$$<br>E(X) = \frac{a+b}{2}\<br>V(X) = \frac{(b-a)^2}{12}<br>$$</p><h5 id="定理4-10-Uniform-分布矩生成函数"><a href="#定理4-10-Uniform-分布矩生成函数" class="headerlink" title="定理4.10 Uniform 分布矩生成函数"></a>定理4.10 Uniform 分布矩生成函数</h5><p>$X\sim\mathbb{U}(a,b)$，则<br>$$<br>M_X(s) = \frac{e^{sb}-e^{sa}}{s(b-a)}<br>$$</p><h4 id="4-2-2-Exponential-分布"><a href="#4-2-2-Exponential-分布" class="headerlink" title="4.2.2 Exponential 分布"></a>4.2.2 Exponential 分布</h4><h5 id="定义4-8-Exponential-分布"><a href="#定义4-8-Exponential-分布" class="headerlink" title="定义4.8 Exponential 分布"></a>定义4.8 Exponential 分布</h5><p>指数分布的概率密度为<br>$$<br>f(x) = \lambda e^{-\lambda x}\x&gt;0<br>$$<br> 其中 $\lambda &gt; 0$ 为参数，称 $X$ 服从参数为 $\lambda $ 的指数分布，记作 $X\sim\mathbb{E}(\lambda)$. 利用矩生成函数不难算出指数分布的数字特征<br>$$<br>E(X) = \frac{1}{\lambda}\V(X) = \frac{1}{\lambda^2}<br>$$</p><h5 id="定理4-11-Exponential-分布的无记忆性"><a href="#定理4-11-Exponential-分布的无记忆性" class="headerlink" title="定理4.11 Exponential 分布的无记忆性"></a>定理4.11 Exponential 分布的无记忆性</h5><p>$X\sim\mathbb{E}(\lambda)$，则<br>$$<br>\forall s.\ t&gt;0:P{X&gt;s+t\ |\ X&gt;s}=P{X&gt;t}<br>$$</p><h5 id="定理4-12-Exponential-分布矩生成函数"><a href="#定理4-12-Exponential-分布矩生成函数" class="headerlink" title="定理4.12 Exponential 分布矩生成函数"></a>定理4.12 Exponential 分布矩生成函数</h5><p>$X\sim\mathbb{E}(\lambda)$，则<br>$$<br>M_X(s) = \frac{\lambda}{\lambda-s}\s&lt;\lambda<br>$$</p><h5 id="定理4-13-Geometric-分布连续化定理"><a href="#定理4-13-Geometric-分布连续化定理" class="headerlink" title="定理4.13 Geometric 分布连续化定理"></a>定理4.13 Geometric 分布连续化定理</h5><p>$X_n\sim\mathbb{G}(x_n;p)$，令 $p = \frac{\lambda}{n}$，则对于 $t&gt;0,\ n\geq1$，有<br>$$<br>\lim_{n\rightarrow\infty}P{X_n&lt;nt} = 1-e^{-\lambda t}<br>$$</p><h4 id="4-2-3-Normal-分布"><a href="#4-2-3-Normal-分布" class="headerlink" title="4.2.3 Normal 分布"></a>4.2.3 Normal 分布</h4><h5 id="定义4-9-Normal-分布"><a href="#定义4-9-Normal-分布" class="headerlink" title="定义4.9 Normal 分布"></a>定义4.9 Normal 分布</h5><p>正态分布的概率密度为<br>$$<br>f(x) = \frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}\<br>-\infty&lt;x&lt;+\infty<br>$$</p><p>其中，$\mu,\sigma$ 为参数，记作 $X\sim\mathbb{N}(\mu,\sigma^2)$. 利用二重积分不难得到正态分布的数字特征<br>$$<br>E(X) = \mu\<br>V(X) = \sigma^2<br>$$</p><h5 id="定理4-14-Standard-Normal-分布的对称性"><a href="#定理4-14-Standard-Normal-分布的对称性" class="headerlink" title="定理4.14 Standard Normal 分布的对称性"></a>定理4.14 Standard Normal 分布的对称性</h5><p>为了方便，记标准正态分布的概率密度函数和分布函数分别为 $\phi(x)$ 和 $\Phi(x)$<br>$$<br>\phi(x) = \frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}}\<br>\Phi(x) = \int_{-\infty}^{x}\phi(x)dx<br>$$<br>则有<br>$$<br>\Phi(x) + \Phi(-x) = 1<br>$$</p><h5 id="定理4-15-Normal-分布标准化"><a href="#定理4-15-Normal-分布标准化" class="headerlink" title="定理4.15 Normal 分布标准化"></a>定理4.15 Normal 分布标准化</h5><p>若 $X\sim\mathbb{N}(\mu,\sigma^2)$，则<br>$$<br>Z = \frac{X-\mu}{\sigma}\sim\mathbb{N}(0,1)<br>$$</p><h5 id="定理4-16-Normal-分布矩生成函数"><a href="#定理4-16-Normal-分布矩生成函数" class="headerlink" title="定理4.16 Normal 分布矩生成函数"></a>定理4.16 Normal 分布矩生成函数</h5><p>若 $X\sim\mathbb{N}(\mu,\sigma^2)$，则<br>$$<br>M_X(s) = exp{\mu t + \frac{\sigma^2t^2}{2}}<br>$$</p><h5 id="定理4-17-Binomial-分布-Normal-逼近定理"><a href="#定理4-17-Binomial-分布-Normal-逼近定理" class="headerlink" title="定理4.17 Binomial 分布 Normal 逼近定理"></a>定理4.17 Binomial 分布 Normal 逼近定理</h5><p>$$<br>\lim_{n\rightarrow\infty}\mathbb{B}(n,p) = \mathbb{N}(\mu,\sigma^2)<br>$$</p><p>其中，$\mu = np,\ \sigma^2 = np(1-p)$</p><h5 id="定理4-18-Poisson-分布-Normal-逼近定理"><a href="#定理4-18-Poisson-分布-Normal-逼近定理" class="headerlink" title="定理4.18 Poisson 分布 Normal 逼近定理"></a>定理4.18 Poisson 分布 Normal 逼近定理</h5><p>$$<br>\lim_{n\rightarrow\infty}\pi(\lambda) = \mathbb{N}(\mu,\sigma^2)<br>$$</p><p>其中 $\sigma^2 = \lambda$</p>]]></content>
    
    
    <categories>
      
      <category>Fundamentals of Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概率分布</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三章 随机变量</title>
    <link href="/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/"/>
    <url>/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="第三章-随机变量"><a href="#第三章-随机变量" class="headerlink" title="第三章 随机变量"></a>第三章 随机变量</h2><h3 id="3-1-数据分布与概率分布"><a href="#3-1-数据分布与概率分布" class="headerlink" title="3.1 数据分布与概率分布"></a>3.1 数据分布与概率分布</h3><h4 id="3-1-1-数据分布"><a href="#3-1-1-数据分布" class="headerlink" title="3.1.1 数据分布"></a>3.1.1 数据分布</h4><h5 id="1-一般性定义"><a href="#1-一般性定义" class="headerlink" title="1. 一般性定义"></a>1. 一般性定义</h5><p>数据分布的一般性定义：从特定数据到一般规律的抽象。</p><h4 id="3-1-2-随机变量"><a href="#3-1-2-随机变量" class="headerlink" title="3.1.2 随机变量"></a>3.1.2 随机变量</h4><h5 id="定义-3-1：随机变量"><a href="#定义-3-1：随机变量" class="headerlink" title="定义 3.1：随机变量"></a>定义 3.1：随机变量</h5><p>给定的样本空间为 $\Omega = {\omega}$，若对于每一个样本点 $\omega \in\Omega$，都有唯一确定的 $X(\omega)$ 与之对应，则称 $X(\omega)$ 是一个随机变量，简记为 $X$, 即：<br>$$<br>X: \Omega\rightarrow X(\Omega)<br>$$</p><h5 id="定义-3-2：分布函数"><a href="#定义-3-2：分布函数" class="headerlink" title="定义 3.2：分布函数"></a>定义 3.2：分布函数</h5><p>随机变量 $X$ 的分布函数定义为<br>$$<br>F(x) = P(X\leq x) \  \ \ (x\in\mathbb{R})<br>$$</p><h5 id="引理-3-1：分布函数基本性质"><a href="#引理-3-1：分布函数基本性质" class="headerlink" title="引理 3.1：分布函数基本性质"></a>引理 3.1：分布函数基本性质</h5><p>对于任意随机变量 $X$，其分布函数 $F(x)$ 具有以下的性质：<br>$$<br>\begin{align*}<br>&amp;1.\ \forall x\in \mathbb{R},0\le F(x)\le 1 \ &amp;2.\ \forall x_1\leq x_2,F(x_1)\leq F(x_2)\ &amp;3.\ \forall x_0\in\mathbb{R},F(x_0) = \lim_{x\rightarrow x_0^{+}} F(x)\ &amp;4.\ F(-\infty) = \lim_{x\rightarrow - \infty}F(x) = 0,\ F(+\infty) = \lim_{x\rightarrow +<br>\infty}F(x) = 1<br>\end{align*}<br>$$</p><h4 id="3-1-3-离散随机变量"><a href="#3-1-3-离散随机变量" class="headerlink" title="3.1.3 离散随机变量"></a>3.1.3 离散随机变量</h4><h5 id="定义3-3：离散型随机变量"><a href="#定义3-3：离散型随机变量" class="headerlink" title="定义3.3：离散型随机变量"></a>定义3.3：离散型随机变量</h5><p>一个随机变量的可能（概率非零）取值至多可列个，则称它为离散型随机变量。$X=x_i$ 的概率标记为<br>$$<br>P(X = x_i) = p_i\(i = 1,2,3,…)<br>$$</p><h4 id="3-1-4-连续随机变量"><a href="#3-1-4-连续随机变量" class="headerlink" title="3.1.4 连续随机变量"></a>3.1.4 连续随机变量</h4><h5 id="定义-3-4：连续随机变量"><a href="#定义-3-4：连续随机变量" class="headerlink" title="定义 3.4：连续随机变量"></a>定义 3.4：连续随机变量</h5><p>对于随机变量 $X$ 及其分布函数 $F(x)$，如存在非负可积函数 $f(x)$，满足 $\forall x:F(x) = \int_{-\infty}^{+\infty}f(t)dt$ ，则称 $X$ 为连续随机变量，$f(x)$ 称为 $X$ 的概率密度函数</p><h5 id="定理-3-1：连续随机变量性质"><a href="#定理-3-1：连续随机变量性质" class="headerlink" title="定理 3.1：连续随机变量性质"></a>定理 3.1：连续随机变量性质</h5><ol><li><p>若 $F$ 在点 $x$ 处连续，则 $F’(x) = f(x)$</p></li><li><p>连续随机变量 $X$ 的任意一点概率为 $0$ , 即有<br>$$<br>\forall x:P(X=x)=0<br>$$</p></li></ol><h4 id="3-1-5-随机变量的函数的分布"><a href="#3-1-5-随机变量的函数的分布" class="headerlink" title="3.1.5 随机变量的函数的分布"></a>3.1.5 随机变量的函数的分布</h4><h5 id="定理-3-2：函数的分布定理"><a href="#定理-3-2：函数的分布定理" class="headerlink" title="定理 3.2：函数的分布定理"></a>定理 3.2：函数的分布定理</h5><p>$X$ 的密度函数为 $f_X(x)$，$-\infty&lt;x&lt;+\infty$，$Y = g(X)$ 严格单调，即 $g’(x)&gt;0 \or g’(x)&lt;0$，则 $Y$ 的密度函数为：<br>$$<br>f_Y(x) = f_X(h(y))|h’(y)|\ \ \ (a&lt;y&lt;b)<br>$$<br>其中<br>$$<br>&amp;a = min(g(-\infty),g(+\infty))\ &amp;b = max(g(-\infty),\ g(+\infty))\ &amp;h(y) = g^{-1}(x)<br>$$</p><h3 id="3-2-期望与矩"><a href="#3-2-期望与矩" class="headerlink" title="3.2 期望与矩"></a>3.2 期望与矩</h3><h4 id="3-2-1-原点矩"><a href="#3-2-1-原点矩" class="headerlink" title="3.2.1 原点矩"></a>3.2.1 原点矩</h4><h5 id="1-原点矩"><a href="#1-原点矩" class="headerlink" title="1. 原点矩"></a>1. 原点矩</h5><p>给定一批数据 $x_1,x_2,x_3,…,x_n$，其 $k$ 阶原点矩 $A_k \triangleq \frac{1}{n}\displaystyle{\sum_{i = 1}^{n}x_i^k}$</p><h5 id="定义-3-5："><a href="#定义-3-5：" class="headerlink" title="定义 3.5："></a>定义 3.5：</h5><p>离散随机变量 $X$ 的数学期望定义为<br>$$<br>E(X)= \displaystyle{\sum_{i = 1}^\infty}x_ip_i<br>$$<br> 连续随机变量 $X$ 的数学期望定义为<br>$$<br>E(X) = \int_{-\infty}^{+\infty}xf(x)dx<br>$$<br>这里要求 $\displaystyle{\sum_{i = 1}^\infty}x_ip_i$ 和 $\int_{-\infty}^{+\infty}xf(x)dx$ 绝对收敛</p><h5 id="定理-3-3：数学期望性质"><a href="#定理-3-3：数学期望性质" class="headerlink" title="定理 3.3：数学期望性质"></a>定理 3.3：数学期望性质</h5><p>随机变量的数学期望有如下性质</p><ol><li>$E(C) = C \ (C\in \mathbb{R})$</li><li>$E(CX) = CE(X)\ (C\in \mathbb{R})$</li><li>$E(X\pm Y) = E(X)\pm E(Y)$</li><li>$E(XY) = E(X)E(Y)  \ iff.X,Y\ are\ independent$</li></ol><h4 id="3-2-2-中心矩"><a href="#3-2-2-中心矩" class="headerlink" title="3.2.2 中心矩"></a>3.2.2 中心矩</h4><h5 id="定义-3-6：中心矩"><a href="#定义-3-6：中心矩" class="headerlink" title="定义 3.6：中心矩"></a>定义 3.6：中心矩</h5><p>给定随机变量 $X$，若 $E((X-E(X))^k)$ 存在，则其 $k$ 阶中心矩定义为 $E((X-E(X))^k)$ </p><h5 id="定义-3-7：方差与标准差"><a href="#定义-3-7：方差与标准差" class="headerlink" title="定义 3.7：方差与标准差"></a>定义 3.7：方差与标准差</h5><p>$X$ 随机变量的二姐中心矩为方差，记作 $\sigma^2(X)$ 或 $Var(X)$ 或 $D(X)$ ，而 $\sqrt{Var(X)}$ 称为 $X$ 的标准差，记为 $\sigma(X)$</p><h5 id="定理-3-4：方差计算定理"><a href="#定理-3-4：方差计算定理" class="headerlink" title="定理 3.4：方差计算定理"></a>定理 3.4：方差计算定理</h5><p>$$<br>D(X) = E(X^2) - E^2(X)<br>$$</p><h5 id="定理-3-5：方差的性质"><a href="#定理-3-5：方差的性质" class="headerlink" title="定理 3.5：方差的性质"></a>定理 3.5：方差的性质</h5><ol><li><p>设 $C$ 为常数，则 $D(C) = 0$</p></li><li><p>设 $X$ 是随机变量，$C$ 是常数，则<br>$$<br>D(X+C)=D(X)\D(CX) = C^2D(X)<br>$$</p></li><li><p>设随机变量 $X$ 与 $Y$ 相互独立，则：<br>$$<br>D(X\pm Y) = D(X) + D(Y)<br>$$</p></li></ol><h3 id="3-3-矩的数学工具"><a href="#3-3-矩的数学工具" class="headerlink" title="3.3 矩的数学工具"></a>3.3 矩的数学工具</h3><h4 id="3-3-1-微分恒等式"><a href="#3-3-1-微分恒等式" class="headerlink" title="3.3.1 微分恒等式"></a>3.3.1 微分恒等式</h4><h5 id="定义-3-8：微分恒等式法"><a href="#定义-3-8：微分恒等式法" class="headerlink" title="定义 3.8：微分恒等式法"></a>定义 3.8：微分恒等式法</h5><p>$\alpha,\beta,\omega$ 是一些参数，$\exist c\in\mathbb{N},s.t.n_{min},n_{max}\leq c$，设<br>$$<br>\displaystyle{\sum_{n = n_{min}}^{n_{max}}}f(n;\alpha,\beta,…,\omega)= g(\alpha,\beta,…,\omega)<br>$$<br> 其中 $f$ 和 $g$ 是关于 $\alpha$ 的可微函数. 如果 $f$ 退化到足以保证求和和求微分的次序可以交换，则<br>$$<br>\displaystyle{\sum_{n = n_{min}}^{n_{max}}}\frac{\partial f(n;\alpha,\beta,…,\omega)}{\partial\alpha}= \frac{\partial g(\alpha,\beta,…,\omega)}{\partial\alpha}<br>$$</p><h4 id="3-3-1-矩生成函数的定义"><a href="#3-3-1-矩生成函数的定义" class="headerlink" title="3.3.1 矩生成函数的定义"></a>3.3.1 矩生成函数的定义</h4><h5 id="定义-3-9：矩生成函数"><a href="#定义-3-9：矩生成函数" class="headerlink" title="定义 3.9：矩生成函数"></a>定义 3.9：矩生成函数</h5><p>随机变量 $X$ 的矩生成函数<br>$$<br>M_X(s) \triangleq E(e^{sX})<br>$$<br>其中，如果 $\exist\delta\in\mathbb{R},s.t. \forall s\in [-\delta,\delta],M_X(s) \ is\ finite$，则称 $M_X(s)$ 存在 </p><h4 id="3-3-3-矩生成函数的计算"><a href="#3-3-3-矩生成函数的计算" class="headerlink" title="3.3.3 矩生成函数的计算"></a>3.3.3 矩生成函数的计算</h4><h5 id="定理-3-6：矩生成定理"><a href="#定理-3-6：矩生成定理" class="headerlink" title="定理 3.6：矩生成定理"></a>定理 3.6：矩生成定理</h5><p>假设随机变量 $X$ 的矩生成函数 $M_X(s)$ 存在，则：<br>$$<br>A_k = E(X^k) = {\frac{d^k}{dx^k}M_X(s)}\bigg{|}_{s=0}<br>$$</p><h4 id="3-3-4-矩生成函数的性质"><a href="#3-3-4-矩生成函数的性质" class="headerlink" title="3.3.4 矩生成函数的性质"></a>3.3.4 矩生成函数的性质</h4><h5 id="定理-3-7：矩生成函数唯一性定理"><a href="#定理-3-7：矩生成函数唯一性定理" class="headerlink" title="定理 3.7：矩生成函数唯一性定理"></a>定理 3.7：矩生成函数唯一性定理</h5><p>对于两随机变量 $X$ 和 $Y$ ，假设存在常数 $\delta$ ，使得 $M_X(s)$ 和 $M_Y(s)$ 对于任意 $s\in[-\delta,\ \delta]$ 存在且相等，则 $X$ 和 $Y$ 的分布函数相等，即<br>$$<br>\forall t\in \mathbb{R} :F_X(t) = F_Y(t)<br>$$</p><h5 id="定理-3-8：矩生成函数可加性定理"><a href="#定理-3-8：矩生成函数可加性定理" class="headerlink" title="定理 3.8：矩生成函数可加性定理"></a>定理 3.8：矩生成函数可加性定理</h5><p>$X_i(i = 1,\ 2,\ …,\ n)$ 为独立随机变量，则<br>$$<br>M_{ {\sum_{i =1}^{n} }X_i(s)} = \displaystyle{\prod_{i= 1}^{n} }M_{X_i}(s)<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>Fundamentals of Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩</tag>
      
      <tag>随机变量</tag>
      
      <tag>数学期望</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二章 概率论基础</title>
    <link href="/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="第二章-概率论基础"><a href="#第二章-概率论基础" class="headerlink" title="第二章 概率论基础"></a>第二章 概率论基础</h2><h3 id="2-1-概率定义"><a href="#2-1-概率定义" class="headerlink" title="2.1 概率定义"></a>2.1 概率定义</h3><h4 id="2-1-1-集合表示"><a href="#2-1-1-集合表示" class="headerlink" title="2.1.1 集合表示"></a>2.1.1 集合表示</h4><h5 id="定义-2-1：随机事件"><a href="#定义-2-1：随机事件" class="headerlink" title="定义 2.1：随机事件"></a>定义 2.1：随机事件</h5><p>样本空间 $\Omega$ 的任意一个子集 $\Omega’$ 称为随机事件，简称事件。记某次实验结果 $\omega$ ，当 $\omega\in\Omega’$ 时，我们称这一事件 $\Omega’$ 发生</p><h4 id="2-1-2-古典概率"><a href="#2-1-2-古典概率" class="headerlink" title="2.1.2 古典概率"></a>2.1.2 古典概率</h4><h5 id="定义-2-2：古典概率"><a href="#定义-2-2：古典概率" class="headerlink" title="定义 2.2：古典概率"></a>定义 2.2：古典概率</h5><p>$\Omega = {\omega_1,\ \omega_2,\ …,\ \omega_n}$ 有穷且每个样本点等可能，即 $P({\omega_i}) = \frac{1}{n}$，则称这样的概率类型为古典概率</p><h4 id="2-1-3-几何概率"><a href="#2-1-3-几何概率" class="headerlink" title="2.1.3 几何概率"></a>2.1.3 几何概率</h4><p>试验可能结果是欧几里得空间中的点，所有样本点的集合 $\Omega$ 是此空间中的一个几何图形，满足条件 $0&lt;m(\Omega)&lt;+\infty$ ，这里 $m(\Omega)$ 表示该集合的勒贝格测度（如长度，面积，体积等）。对 $\Omega$ 的任何可测子集 $A$ 的几何概率定义为<br>$$<br>P(A) = \frac{m(A)}{m(\Omega)}<br>$$</p><h4 id="2-1-4-概率公理化"><a href="#2-1-4-概率公理化" class="headerlink" title="2.1.4 概率公理化"></a>2.1.4 概率公理化</h4><h5 id="定义2-4：概率公理化定义"><a href="#定义2-4：概率公理化定义" class="headerlink" title="定义2.4：概率公理化定义"></a>定义2.4：概率公理化定义</h5><p>随机试验样本空间为 $\Omega$ ，任意事件 $A$ 赋予一实数 $P(A)$，满足下列三个条件</p><ol><li><p>非负性：$P(A)\geq0$</p></li><li><p>规范性：$P(\Omega) = 1$</p></li><li><p>可列可加性：若事件 $A_k(k = 1,\ 2,\ …,\infty)$ 两两不相容，则<br>$$<br>P(\bigcup_{i = 1}^{\infty}A_i) = \displaystyle\sum_{i = 1}^{n}P(A_i)<br>$$</p></li></ol><p>称 $P:\mathscr{F}\rightarrow\mathbb{R}$ 为概率函数，简称概率</p><h5 id="引理-2-1：空集为零"><a href="#引理-2-1：空集为零" class="headerlink" title="引理 2.1：空集为零"></a>引理 2.1：空集为零</h5><p>$$<br>P(\varnothing) = 0<br>$$</p><h5 id="引理-2-2：互补性"><a href="#引理-2-2：互补性" class="headerlink" title="引理 2.2：互补性"></a>引理 2.2：互补性</h5><p>$$<br>P(\overline{A}) = 1-P(A)<br>$$</p><h5 id="引理-2-3：单调性"><a href="#引理-2-3：单调性" class="headerlink" title="引理 2.3：单调性"></a>引理 2.3：单调性</h5><p>设 $A, B$ 是两个事件，则<br>$$<br>A\subseteq B \implies P(A)\leq P(B)<br>$$</p><h5 id="引理-2-4：可拆性"><a href="#引理-2-4：可拆性" class="headerlink" title="引理 2.4：可拆性"></a>引理 2.4：可拆性</h5><p>对于任意两个随机事件 $E_1,\ E_2$<br>$$<br>P(E_1\cup E_2) = P(E_1)+P(E_2)- P(E_1\cap E_2)<br>$$</p><h5 id="引理-2-5：事件概率的估计"><a href="#引理-2-5：事件概率的估计" class="headerlink" title="引理 2.5：事件概率的估计"></a>引理 2.5：事件概率的估计</h5><p>对任意有限或可列无穷的事件序列 $E_1,E_2, …,E_n$，总有<br>$$<br>P\bigg(\bigcup_{i&gt;1}E_i\bigg)\leq\sum_{i\geq1}P(E_i)<br>$$</p><h3 id="2-2-概率计算"><a href="#2-2-概率计算" class="headerlink" title="2.2 概率计算"></a>2.2 概率计算</h3><h4 id="2-2-1-条件概率"><a href="#2-2-1-条件概率" class="headerlink" title="2.2.1 条件概率"></a>2.2.1 条件概率</h4><h5 id="定义2-5：条件概率"><a href="#定义2-5：条件概率" class="headerlink" title="定义2.5：条件概率"></a>定义2.5：条件概率</h5><p>对于事件 $A$ 和 $B$ , 若 $P(B) \not= 0$，称<br>$$<br>P(A|B) = \frac{P(AB)}{P(B)}<br>$$</p><h4 id="2-2-2-乘法公式"><a href="#2-2-2-乘法公式" class="headerlink" title="2.2.2 乘法公式"></a>2.2.2 乘法公式</h4><h5 id="定理-2-1：乘法公式"><a href="#定理-2-1：乘法公式" class="headerlink" title="定理 2.1：乘法公式"></a>定理 2.1：乘法公式</h5><p>若 $P(A_1)&gt;0$，则 $P(A_1A_2)= P(A_1)P(A_2|A_1)$ ，一般地，我们有<br>$$<br>P(\prod_{i = 1}^{n}A_i) = P(A_1)P(A_2|A_1)P(A_3|A_1A_2)…P(A_n|A_1A_2A_3…A_{n-1})<br>$$</p><h4 id="2-2-3-全概率公式"><a href="#2-2-3-全概率公式" class="headerlink" title="2.2.3 全概率公式"></a>2.2.3 全概率公式</h4><p>设 $B_k(k = 1,\ 2,\ …,\ n)$ 是样本空间 $\Omega$ 的一个完备事件组，且 $P(B_k)&gt;0\ (k = 1,\ 2,\ …,\ n)$，则对于任意随机事件 $A$ ，有<br>$$<br>P(A) = \sum_{i =1}^nP(B_i)P(A|B_i)<br>$$</p><h4 id="2-2-4-Bayes公式"><a href="#2-2-4-Bayes公式" class="headerlink" title="2.2.4 Bayes公式"></a>2.2.4 Bayes公式</h4><p>设 $B_k(k = 1,\ 2,\ …,\ n)$ 是样本空间 $\Omega$ 的一个完备事件组，且 $P(B_k)&gt;0\ (k = 1,\ 2,\ …,\ n)$，则对于任意随机事件 $A,\ P(A)&gt;0$ ，有<br>$$<br>P(B_i|A) = \frac{P(A|B_i)P(B_i)}{P(A)}<br>$$</p><h4 id="2-2-5-独立性"><a href="#2-2-5-独立性" class="headerlink" title="2.2.5 独立性"></a>2.2.5 独立性</h4><h5 id="定义2-6：独立性"><a href="#定义2-6：独立性" class="headerlink" title="定义2.6：独立性"></a>定义2.6：独立性</h5><p>一般地，若事件 $A$ 和 $B$ , 满足<br>$$<br>P(AB)=P(A)P(B)<br>$$<br>则称事件 $A,B$ 相互独立</p><p>一般地，若事件 $A_k(k = 1,\ 2,\ …,\ n)$ 对于任意 $I\subset {1,\ 2,\ …,\ n}$，有<br>$$<br>P(\bigcap_{i\in I}A_i) = \prod_{i\in I}P(A_i)<br>$$<br>则称 $A_k(k = 1,\ 2,\ …,\ n)$ 相互独立</p><h5 id="定理-2-4：独立性的另一定义"><a href="#定理-2-4：独立性的另一定义" class="headerlink" title="定理 2.4：独立性的另一定义"></a>定理 2.4：独立性的另一定义</h5><p>设 $A$，$B$  是两个事件，且 $P(A) &gt; 0$ ，则  $A$，$B$  独立当且仅当<br>$$<br>P(B|A) = P(B)<br>$$</p><h5 id="定理-2-5：独立性的推论"><a href="#定理-2-5：独立性的推论" class="headerlink" title="定理 2.5：独立性的推论"></a>定理 2.5：独立性的推论</h5><p>若事件 $A$，$B$  独立，则对下列各对事件均相互独立<br>$$<br>A\ &amp;\ \overline{B}\ \overline{A}\ &amp;\ B\ \overline{A}\ &amp;\ \overline{B}<br>$$</p><h3 id="2-3随机测试示例"><a href="#2-3随机测试示例" class="headerlink" title="2.3随机测试示例"></a>2.3随机测试示例</h3><h4 id="2-3-1-问题背景"><a href="#2-3-1-问题背景" class="headerlink" title="2.3.1 问题背景"></a>2.3.1 问题背景</h4><h4 id="2-3-2-随机测试初步"><a href="#2-3-2-随机测试初步" class="headerlink" title="2.3.2 随机测试初步"></a>2.3.2 随机测试初步</h4><h4 id="2-3-3-随机测试改进"><a href="#2-3-3-随机测试改进" class="headerlink" title="2.3.3 随机测试改进"></a>2.3.3 随机测试改进</h4>]]></content>
    
    
    <categories>
      
      <category>Fundamentals of Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概率</tag>
      
      <tag>Bayes公式</tag>
      
      <tag>随机测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一章 数据分析初探</title>
    <link href="/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%88%9D%E6%8E%A2/"/>
    <url>/2022/10/29/Fundamentals%20of%20Data%20Science/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章-数据分析初探"><a href="#第一章-数据分析初探" class="headerlink" title="第一章 数据分析初探"></a>第一章 数据分析初探</h2><h3 id="1-1-认识数据"><a href="#1-1-认识数据" class="headerlink" title="1.1 认识数据"></a>1.1 认识数据</h3><h5 id="定义-1-1：数据"><a href="#定义-1-1：数据" class="headerlink" title="定义 1.1：数据"></a>定义 1.1：数据</h5><p>数据是自然世界抽象为集合元素的表示。在实际应用中，采用某种数学元素作为数据的抽象表示，数据集作为相应的集合</p><h5 id="定义-1-2：信息"><a href="#定义-1-2：信息" class="headerlink" title="定义 1.2：信息"></a>定义 1.2：信息</h5><p>数据赋予某种结构获得信息 $\mathcal{I=S}(\mathcal D)$。信息通常能被人类所理解，并被用来消除不确定性。</p><h5 id="定义-1-3：偏序结构"><a href="#定义-1-3：偏序结构" class="headerlink" title="定义 1.3：偏序结构"></a>定义 1.3：偏序结构</h5><p>$A$ 上的关系 $R$ 是自反的，反对称的，传递的。则 $R$ 是一个偏序，集合 $A$ 与 $R$一起称作偏序集，记做 $(A,\ R)$，在不引起混淆的情况下，可以简写成 $A$</p><h5 id="定义-1-4：知识"><a href="#定义-1-4：知识" class="headerlink" title="定义 1.4：知识"></a>定义 1.4：知识</h5><p>知识是信息和规则的二元组 $\mathcal{K}=&lt;\mathcal{I,R}&gt;$。信息与规则结合获得知识，并且能够推理出更多的知识</p><h3 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h3><h5 id="定义1-5：定类数据（Norminal）"><a href="#定义1-5：定类数据（Norminal）" class="headerlink" title="定义1.5：定类数据（Norminal）"></a>定义1.5：定类数据（Norminal）</h5><p>定类数据是对事物进行分类的结果，表现为类别，是仅仅反映观测对象所属类别的数据</p><h5 id="定义-1-6：定序数据（Original）"><a href="#定义-1-6：定序数据（Original）" class="headerlink" title="定义 1.6：定序数据（Original）"></a>定义 1.6：定序数据（Original）</h5><p>定序数据是只仅仅反映观测对象等级，顺序关系的数据，是有定序尺度计量而形成的，表现为类别，可以进行排序，属于品质数据</p><h5 id="定义-1-7：定距数据（Interval）"><a href="#定义-1-7：定距数据（Interval）" class="headerlink" title="定义 1.7：定距数据（Interval）"></a>定义 1.7：定距数据（Interval）</h5><p>定距数据是指具有顺序和距离属性的数据，室友定距尺度计量形成的，表现为数值，可以进行加、减运算以精确计算的数据</p><h5 id="定义-1-8：定比数据（Ratio）"><a href="#定义-1-8：定比数据（Ratio）" class="headerlink" title="定义 1.8：定比数据（Ratio）"></a>定义 1.8：定比数据（Ratio）</h5><p>定比数据是指具有顺序，距离和比例属性的数据，室友定比尺度计量形成的，表现为数值，可以进行四则运算。没有负数。</p><h3 id="1-3-数据汇总"><a href="#1-3-数据汇总" class="headerlink" title="1.3 数据汇总"></a>1.3 数据汇总</h3><h5 id="定义-1-9：众数"><a href="#定义-1-9：众数" class="headerlink" title="定义 1.9：众数"></a>定义 1.9：众数</h5><p>众数是一批数据中出现次数最多的那个数，记为 $M_0$</p><h5 id="定义-1-10：中位数"><a href="#定义-1-10：中位数" class="headerlink" title="定义 1.10：中位数"></a>定义 1.10：中位数</h5><p>设一批数据经过排序之后为 $X_1,\ X_2,\ …,\ X_n$，则其中位数 $M_e \triangleq M_{[\frac{n+1}{2}]}$</p><h5 id="定义-1-11：四分位数"><a href="#定义-1-11：四分位数" class="headerlink" title="定义 1.11：四分位数"></a>定义 1.11：四分位数</h5><p>一批数据按升序排序后为 $X_1,\ X_2\ ,…,\ X_n$，则其第 $i$ 位的四分位数 $Q_i \triangleq \frac{i(n+1)}{4},\ (i = 1,\ 2,\ 3)$</p><h5 id="定义-1-12：算术平均值"><a href="#定义-1-12：算术平均值" class="headerlink" title="定义 1.12：算术平均值"></a>定义 1.12：算术平均值</h5><p>设一批数据 $X_1,\ X_2\ ,…,\ X_n$，则其算数平均值<br>$$<br>\overline{X}\triangleq\frac{1}{n}\sum_{i = 1}^{n}X_i<br>$$</p><h5 id="定理-1-1：算术平均值归零性"><a href="#定理-1-1：算术平均值归零性" class="headerlink" title="定理 1.1：算术平均值归零性"></a>定理 1.1：算术平均值归零性</h5><p>设一批数据 $X_1,\ X_2\ ,…,\ X_n$，$\overline{X}$ 为其算数平均值，则<br>$$<br>\sum_{i = 1}^{n}(X_i-\overline{X}) = 0<br>$$</p><h5 id="定义-1-13：加权算术平均值"><a href="#定义-1-13：加权算术平均值" class="headerlink" title="定义 1.13：加权算术平均值"></a>定义 1.13：加权算术平均值</h5><p>设一批数据 $X_1,\ X_2\ ,…,\ X_n$，相应的权重为  $\omega_1,\ \omega_2\ ,…,\ \omega_n$，不失一般性，我们假设权重和为 $1$ ，则其加权算术平均值为<br>$$<br>\overline{X} = \sum_{i = 1}^{n}\omega_iX_i<br>$$</p><h5 id="定义-1-14：内四分位距"><a href="#定义-1-14：内四分位距" class="headerlink" title="定义 1.14：内四分位距"></a>定义 1.14：内四分位距</h5><p>内四分位距 $\triangleq Q_3-Q_1$</p><h5 id="定义-1-15：偏差平方和，方差和标准差"><a href="#定义-1-15：偏差平方和，方差和标准差" class="headerlink" title="定义 1.15：偏差平方和，方差和标准差"></a>定义 1.15：偏差平方和，方差和标准差</h5><p> 设一批数据为 $X_1,\ X_2\ ,…,\ X_n$，则数据的偏差平方和为每个数据与平均值偏差平方的和，即<br>$$<br>d^2\triangleq\sum_{i = 1}^{n}(X_i-\overline X)^2<br>$$<br>数据的方差 $S^2$ 为偏差平方和的平均值<br>$$<br>S^2\triangleq {d^2\over n}<br>$$<br>数据的标准差 $S$ 为方差的算术平方根<br>$$<br>S \triangleq \sqrt{S^2}<br>$$</p><h5 id="定理-1-2：偏差平方和计算公式"><a href="#定理-1-2：偏差平方和计算公式" class="headerlink" title="定理 1.2：偏差平方和计算公式"></a>定理 1.2：偏差平方和计算公式</h5><p>设一批数据为 $X_1,\ X_2\ ,…,\ X_n$，其方差为 $S^2$，则<br>$$<br>d^2= \sum_{i = 1}^{n}X_i^2-{(\displaystyle\sum_{i = 1}^nX_i)^2\over n}<br>$$</p><h5 id="定义-1-16：修正方差和标准差"><a href="#定义-1-16：修正方差和标准差" class="headerlink" title="定义 1.16：修正方差和标准差"></a>定义 1.16：修正方差和标准差</h5><p>设一批数据为 $X_1,\ X_2\ ,…,\ X_n$，则数据的方差和标准差 $S^2,\ S$ 为<br>$$<br>S^2 = {d^2\over n -1}\S = \sqrt{S^2}<br>$$</p><h5 id="定义-1-17：变异系数"><a href="#定义-1-17：变异系数" class="headerlink" title="定义 1.17：变异系数"></a>定义 1.17：变异系数</h5><p>样本的变异系数为样本标准差除以样本的均值</p><h5 id="定理-1-3：算术平均值偏差极小性"><a href="#定理-1-3：算术平均值偏差极小性" class="headerlink" title="定理 1.3：算术平均值偏差极小性"></a>定理 1.3：算术平均值偏差极小性</h5><p>设数据 $X_1,\ X_2\ ,…,\ X_n$，$\overline{X}$ 为其算术均值，则算术平均值 $\overline X$ 的偏差平方和最小，即<br>$$<br>\overline{X} = arg\min_{a}\sum_{i = 1}^{n}(X_i - a)^2<br>$$</p><h5 id="定义-1-18：矩"><a href="#定义-1-18：矩" class="headerlink" title="定义 1.18：矩"></a>定义 1.18：矩</h5><p>设一批数据 $X_1,\ X_2\ ,…,\ X_n$，其 $k$ 阶原点矩定义为 $(k\in\mathbb{N})$<br>$$<br>A_k = {1\over n}\sum_{i = 1}^{n}x_i^k<br>$$<br>其 $k$ 阶中心矩定义为 $(k\in\mathbb{N})$<br>$$<br>B_k = {1\over n}\sum_{i = 1}^{n}(X_i - \overline{X})^k<br>$$</p><h5 id="定理-1-4：矩表示"><a href="#定理-1-4：矩表示" class="headerlink" title="定理 1.4：矩表示"></a>定理 1.4：矩表示</h5><p>$$<br>B_k = \sum_{i = 0}^{n}C_n^i(-A_1)^iA_{n-i}<br>$$</p><h5 id="定义-1-19：偏度"><a href="#定义-1-19：偏度" class="headerlink" title="定义 1.19：偏度"></a>定义 1.19：偏度</h5><p>设一批数据 $X_1,\ X_2\ ,…,\ X_n$，则其偏度 $s^3$ 为<br>$$<br>s^3\triangleq {B_3\over B_2^{1.5}}<br>$$</p><h5 id="定义-1-20：峰度"><a href="#定义-1-20：峰度" class="headerlink" title="定义 1.20：峰度"></a>定义 1.20：峰度</h5><p>设一批数据 $X_1,\ X_2\ ,…,\ X_n$，则其峰度 $s^4$ 为<br>$$<br>s^4 = {B_4\over B_2^2}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>Fundamentals of Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data</tag>
      
      <tag>order</tag>
      
      <tag>矩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSI Network Layer</title>
    <link href="/2022/10/27/Computer%20Networking/OSI%20Model/OSI%20Network%20Layer/"/>
    <url>/2022/10/27/Computer%20Networking/OSI%20Model/OSI%20Network%20Layer/</url>
    
    <content type="html"><![CDATA[<h1 id="OSI层次：网络层"><a href="#OSI层次：网络层" class="headerlink" title="OSI层次：网络层"></a>OSI层次：网络层</h1><blockquote><p>关键词：路径选择、路由、寻址</p><p>当路由发生时，在两个系统之间提供连接和路径选择</p><p>这些存在于地理上分离的网络</p></blockquote><h2 id="1-网络层概述"><a href="#1-网络层概述" class="headerlink" title="1. 网络层概述"></a>1. 网络层概述</h2><h3 id="1-1-第三层的责任"><a href="#1-1-第三层的责任" class="headerlink" title="1.1. 第三层的责任"></a>1.1. 第三层的责任</h3><ul><li>通过网络传递数据</li><li>使用分层的寻址方案（不同于水平的MAC寻址）</li><li>网段与数据流控制</li><li>减少拥堵</li><li>与其他网络连通</li></ul><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210240653203.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005760.png" alt="pic6"></a></p><h3 id="1-2-面向连接的网络服务"><a href="#1-2-面向连接的网络服务" class="headerlink" title="1.2. 面向连接的网络服务"></a>1.2. 面向连接的网络服务</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210240653826.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005779.png" alt="pic7"></a></p><p>pic7</p><ul><li>在传输任何数据之前，在发送方和接收方之间建立连接</li></ul><h3 id="1-3-电路交换"><a href="#1-3-电路交换" class="headerlink" title="1.3. 电路交换"></a>1.3. 电路交换</h3><ul><li><em>面向连接</em> 和 <em>电路交换</em> 这两个术语并不相同</li><li>面向连接：首先与接受者建立连接，然后开始数据传输。所有的数据依次通过同一个通道，或者更常见的是，通过同一个虚拟电路</li></ul><h3 id="1-4-无连接网络服务"><a href="#1-4-无连接网络服务" class="headerlink" title="1.4. 无连接网络服务"></a>1.4. 无连接网络服务</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241025533.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005797.png" alt="pic8"></a></p><p>在无连接网络服务中，每一个包会被分别对待（IP就是一个无连接系统）</p><h3 id="1-5-包交换"><a href="#1-5-包交换" class="headerlink" title="1.5. 包交换"></a>1.5. 包交换</h3><ul><li><em>无连接网络</em> 和 <em>包交换</em> 这两个术语不相同</li><li>当数据包从源传递到目标时，它们可以：<ul><li>切换到不同的路径</li><li>不正常到达</li></ul></li><li>设备根据各种标准确定每个包的路径，有些函数可能因数据包而异</li></ul><h3 id="1-6-第三层设备-路由器"><a href="#1-6-第三层设备-路由器" class="headerlink" title="1.6. 第三层设备-路由器"></a>1.6. 第三层设备-路由器</h3><p>互连网段或者网络</p><p>根据IP地址做出逻辑决策</p><p>确定最佳路径</p><p>将数据包从传入端口切换到传出端口</p><h2 id="2-IP-地址和子网"><a href="#2-IP-地址和子网" class="headerlink" title="2. IP 地址和子网"></a>2. IP 地址和子网</h2><h3 id="2-1-IP"><a href="#2-1-IP" class="headerlink" title="2.1. IP"></a>2.1. IP</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241026590.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005829.png" alt="pic9"></a></p><ul><li>版本：占4bit，指的是IP协议的版本 目前的IP协议版本号为4（即IPv4）</li><li>首部长度：占4bit，可表示的最大数值是15个单位（一个单位为4字节），因此IP的首部长度的最大值是60字节，最小值是20字节</li><li>服务类型：占8bit，用来获得更好的服务，这个字段之前一直没有被人们使用</li><li>总长度：占16bit，指的是首部和数据之和的长度，单位为字节，因此数据报的最大长度为65536字节，总长度必须不超过最大传送单元MTU（<strong>指一种通信协议的某一层上面所能通过的最大数据报大小)</strong></li><li>标识(identification)：占16bit，它是一个计数器，用来产生数据报的标识</li><li>标志：占3bit，最高位为0，MF为0表示最后一个分片</li><li>片位移：占13bit，指出：较长的分组在分片之后，某片在原分组中的相对位置，片位移以8个字节为偏移单位</li><li>生存时间：占8bit记为TTL(Time To Live) 数据报在网络中可通过的路由器数的最大值。</li><li>协议：占8bit 指出此数据报携带的数据使用何种协议 以便目的主机的 IP 层将数据部分上交给哪个处理过程</li><li>首部检验和：16bit 只检验数据报的首部，不包括数据部分，这里不采用 CRC 检验码而采用简单的计算方法</li><li>源地址和目标地址：占8位</li></ul><h3 id="2-2-网络层地址"><a href="#2-2-网络层地址" class="headerlink" title="2.2. 网络层地址"></a>2.2. 网络层地址</h3><p>IP地址是32bits</p><p>格式：四个点分的十进制 133.14.17.0</p><p>IP地址由两部分组成：</p><p> ①网络ID</p><p> 由ARIN分配(American Registry for Internet Numbers, <a href="http://www.arin.net/">www.arin.net</a>)</p><p> 标志设备连接到的网络</p><p> 可以由前三个八位中的一个，两个，或者三个识别出</p><p> ②主机ID</p><p> 由网络管理员分配</p><p> 标志了该网络中的被连接的设备</p><p> 可以由后三个八位中的一个，两个，或者三个识别出</p><h3 id="2-3-IP地址"><a href="#2-3-IP地址" class="headerlink" title="2.3. IP地址"></a>2.3. IP地址</h3><table><thead><tr><th align="center">A类</th><th>N</th><th>H</th><th>H</th><th>H</th></tr></thead><tbody><tr><td align="center">B类</td><td>N</td><td>N</td><td>H</td><td>H</td></tr><tr><td align="center">C类</td><td>N</td><td>N</td><td>N</td><td>H</td></tr></tbody></table><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241027983.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005858.png" alt="pic13"></a></p><h4 id="2-3-1-主机数量"><a href="#2-3-1-主机数量" class="headerlink" title="2.3.1. 主机数量"></a>2.3.1. 主机数量</h4><ul><li> 不同类别的主机最大数量是不同的</li><li>A类网络中n最多有 16,777,214 个主机 (224–2224–2)</li><li>B类网络中最多有 65,534 个主机 (216–2216–2)</li><li>C类网络中最多有 254 个主机 (28–228–2)</li><li> 每个网络中的第一个地址（即主机号全为0）是预留的网络地址，表示本机所连接的网络地址</li><li> 最后一个地址（即主机号全为1）预留的，用于表示所有主机</li></ul><h4 id="2-3-2-预留地址"><a href="#2-3-2-预留地址" class="headerlink" title="2.3.2. 预留地址"></a>2.3.2. 预留地址</h4><p> <strong>网络地址</strong></p><p> 主机号部分地址全为0</p><p> A类网络地址实例: <code>113.0.0.0</code></p><p> 网络中的主机只能在网络号相同的时候，与其它主机直接通讯</p><p> <strong>广播地址</strong></p><p> 用于给该网络中所有设备发送数据</p><p> 广播IP地址是主机号全为1的地址</p><p> B类地址示例: <code>176.10.255.255</code></p><p> 受限网络地址：<code>255.255.255.255</code></p><h4 id="2-3-3-IP寻址"><a href="#2-3-3-IP寻址" class="headerlink" title="2.3.3. IP寻址"></a>2.3.3. IP寻址</h4><p><strong>A</strong>类</p><p> <code>99.0.0.0</code>: 预留的网络地址</p><p> <code>99.255.255.255</code>: 广播数量</p><p><strong>B</strong>类</p><p> <code>156.1.0.0</code>: 预留的网络地址</p><p> <code>156.1.255.255</code>: 广播数量</p><p><strong>C</strong>类</p><p> <code>203.1.17.0</code>: 预留的网络地址</p><p> <code>203.1.17.255</code>: 广播数量</p><p><strong>私有地址空间</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.0.0.0</span> - <span class="hljs-number">10</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span><br><span class="hljs-number">172.16.0.0</span> - <span class="hljs-number">172</span>.<span class="hljs-number">31</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span><br><span class="hljs-number">192.168.0.0</span> - <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span><br></code></pre></td></tr></table></figure><p>有一些IP地址范围预留给私有IP地址空间</p><p>IP 地址损耗 和它的解决办法 :</p><p> NAT（网络地址转换Network Address Translation）</p><p> CIDR（无类别域间路由，Classless Inter-Domain Routing）</p><p> IPv6（Internet Protocol Version 6互联网协议）</p><p><strong>子网</strong></p><p>网络管理员有时候需要把网络划分成更小的网络，即子网，来提供额外的灵活性</p><p>从主机号的地址域借了几位用于表示子网地址域</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210262315207.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005963.png" alt="pic14"></a></p><p><strong>子网基础</strong></p><p>子网是网络的小划分</p><p> 提供寻址的灵活性</p><p>子网地址通常由网管分配</p><p>子网减少了广播域</p><p><strong>能借多少位</strong></p><p>至少要借两位</p><table><thead><tr><th align="center"></th><th align="center">主机域大小</th><th align="center">最多借位</th></tr></thead><tbody><tr><td align="center">Class A</td><td align="center">24</td><td align="center">22</td></tr><tr><td align="center">Class B</td><td align="center">16</td><td align="center">14</td></tr><tr><td align="center">Class C</td><td align="center">8</td><td align="center">6</td></tr></tbody></table><p>为什么至少取两位？取一位的话无法区分subNetID和masterNetID，如果你只借了一位来构造子网，那么你只有一个网络号0，以及广播号1</p><p><strong>副产品：浪费的地址</strong></p><p>我们必须在需要的子网数量，可接受的每个子网中主机的数量，和导致的地址浪费中，保持平衡。</p><table><thead><tr><th align="center"><strong>借的位数</strong></th><th align="center"><strong>构造的子网数量</strong></th><th align="center"><strong>每个子网中主机的个数</strong></th><th align="center"><strong>主机的总个数</strong></th><th align="center"><strong>利用率</strong></th></tr></thead><tbody><tr><td align="center">2</td><td align="center">2</td><td align="center">62</td><td align="center">124</td><td align="center">49%</td></tr><tr><td align="center">3</td><td align="center">6</td><td align="center">30</td><td align="center">180</td><td align="center">71%</td></tr><tr><td align="center">4</td><td align="center">14</td><td align="center">14</td><td align="center">196</td><td align="center">77%</td></tr><tr><td align="center">5</td><td align="center">30</td><td align="center">6</td><td align="center">180</td><td align="center">71%</td></tr><tr><td align="center">6</td><td align="center">62</td><td align="center">2</td><td align="center">124</td><td align="center">49%</td></tr></tbody></table><p>构造子网的数量 =2借的位数−2=2借的位数−2</p><p>不能使用第一个子网和最后一个子网，因为一个是广播地址，另一个是网络地址</p><p><strong>子网掩码</strong></p><p>别名：扩展网络前缀</p><p>决定了我们用多少位来构建网络，以及多少位描述主机地址</p><p>A类 255.0.0.0</p><p>B类 255.255.0.0</p><p>C类 255.255.255.0</p><p><strong>子网划分</strong></p><p>我们将下面的IP地址划分子网:223.14.17.0</p><p>需要:</p><p>13 个子网</p><p>每个子网10个主机</p><p>详细计算步骤参见PPT网络层</p><p><strong>计算子网地址</strong></p><p>步骤 1: 把IP地址转化为二进制</p><p>步骤 2: 把子网掩码转化为二进制</p><p>步骤 3: 用 Boolean 运算符 “and” 计算它们两个</p><p>步骤 4: 把网络地址的二进制转化为带点的十进制</p><h2 id="3-第三层设备"><a href="#3-第三层设备" class="headerlink" title="3. 第三层设备"></a>3. 第三层设备</h2><h3 id="3-1-路径选择"><a href="#3-1-路径选择" class="headerlink" title="3.1. 路径选择"></a>3.1. 路径选择</h3><p>路由器基于链路带宽、距离、延迟，来选择传递数据包到目的地的下一个路径上的跳跃</p><h3 id="3-2-IP地址"><a href="#3-2-IP地址" class="headerlink" title="3.2. IP地址"></a>3.2. IP地址</h3><p>IP 地址在软件中实施，用于指出设备所在的网络</p><p>路由器连接到网络，每一个网络必须有一个独特的网络号使得路由能成功地连接</p><p>独特的网络号包含于IP地址中，被分配给每一个连接到该网络的设备</p><h3 id="3-3-路由接口"><a href="#3-3-路由接口" class="headerlink" title="3.3. 路由接口"></a>3.3. 路由接口</h3><h3 id="3-4-路由功能"><a href="#3-4-路由功能" class="headerlink" title="3.4. 路由功能"></a>3.4. 路由功能</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241028790.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005036.png" alt="img"></a></p><p>①剥离框架中的数据链路报头（数据链路报头包括来源目的MAC地址和目的MAC地址）</p><p>②检查网络层地址来决定目的地网络</p><p>③查询它的路由表来决定使用哪一个接口来发送数据，使得数据可以到达目的地网络</p><p>④通过B1接口发送数据，路由器会将数据封装在合适的数据链路框架(帧)中</p><h3 id="3-5-路由接口示例"><a href="#3-5-路由接口示例" class="headerlink" title="3.5. 路由接口示例"></a>3.5. 路由接口示例</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241028143.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005068.png" alt="pic17"></a></p><p>一个路由器通过接口连接到网络，接口也可能指IP路由中的一个端口</p><p>每一个接口都有一个单独的、独特的网络地址</p><h3 id="3-6-IP地址分配"><a href="#3-6-IP地址分配" class="headerlink" title="3.6. IP地址分配"></a>3.6. IP地址分配</h3><p>静态地址分配</p><p> 给每一个设备配置一个IP地址</p><p> 你应该保留非常细致的记录，因为一旦你是用的重复的IP地址，问题就来了</p><p>动态地址分配</p><p> 这里有一些可以动态分配地址的不同方法：</p><p> –RARP: Reverse Address Resolution Protocol.逆向地址解析协议</p><p> –BOOTP: BOOTstrap Protocol.自举协议</p><p> –DHCP: Dynamic Host Configuration Protocol.动态主机配置协议(我们一般使用这种方式)</p><h2 id="4-ARP协议"><a href="#4-ARP协议" class="headerlink" title="4.ARP协议"></a>4.ARP协议</h2><h3 id="4-1-地址解析协议"><a href="#4-1-地址解析协议" class="headerlink" title="4.1. 地址解析协议"></a>4.1. 地址解析协议</h3><p>为了让设备通讯，发送方的设备必须有目的设备的IP地址和MAC地址，<em>缺一不可</em></p><p>ARP 使得一台电脑可以获取与一个IP地址相关的MAC地址</p><h3 id="4-2-ARP操作"><a href="#4-2-ARP操作" class="headerlink" title="4.2. ARP操作"></a>4.2. ARP操作</h3><p>①广播询问MAC地址(请求)</p><p>②IP地址匹配(检查)</p><p>③对应主机回复自己的MAC地址(应答)</p><p>④根据ARP缓存表发送数据帧(ARP缓存表中每个条目具有一定的生命周期)(缓存)</p><h3 id="4-3-互联网通讯"><a href="#4-3-互联网通讯" class="headerlink" title="4.3. 互联网通讯"></a>4.3. 互联网通讯</h3><p>怎么与不在一个物理网段的设备通讯？</p><p> 默认网关</p><p> 代理 ARP</p><h3 id="4-4-默认网关"><a href="#4-4-默认网关" class="headerlink" title="4.4. 默认网关"></a>4.4. 默认网关</h3><p>为了让一个设备可以和别的网络中的设备通讯，你必须给它提供一个默认网关</p><p>默认网关是连接来源主机所处的网段的路由接口的IP地址</p><p>为了让一个设备可以给其它网段上的设备发送数据，来源设备将数据发送到默认网关</p><h3 id="4-5-代理ARP"><a href="#4-5-代理ARP" class="headerlink" title="4.5.代理ARP"></a>4.5.代理ARP</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241029680.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005153.png" alt="pic18"></a></p><p>代理ARP是ARP的一种变化形式</p><p>这种情况下，来源主机没有配置默认网关</p><h3 id="4-6-ARP流程"><a href="#4-6-ARP流程" class="headerlink" title="4.6. ARP流程"></a>4.6. ARP流程</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241030740.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005269.png" alt="pic19"></a></p><h2 id="5-网络层服务"><a href="#5-网络层服务" class="headerlink" title="5. 网络层服务"></a>5. 网络层服务</h2><h3 id="5-1-面向连接的网络服务"><a href="#5-1-面向连接的网络服务" class="headerlink" title="5.1. 面向连接的网络服务"></a>5.1. 面向连接的网络服务</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241030352.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005420.png" alt="pic20"></a></p><p>传输数据前会在发送者和接受者之间建立连接</p><h2 id="6-Routed-and-Routing-Protocols"><a href="#6-Routed-and-Routing-Protocols" class="headerlink" title="6. Routed and Routing Protocols"></a>6. Routed and Routing Protocols</h2><h3 id="6-1-网络协议操作"><a href="#6-1-网络协议操作" class="headerlink" title="6.1. 网络协议操作"></a>6.1. 网络协议操作</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241031069.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005511.png" alt="pic21"></a></p><p>pic21</p><h3 id="6-2-被动路由协议"><a href="#6-2-被动路由协议" class="headerlink" title="6.2. 被动路由协议"></a>6.2. 被动路由协议</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241031592.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005547.png" alt="pic22"></a></p><p>给网络层提供帮助的协议被称为被动（routed）路由协议或可路由（routable）协议</p><p>IP是一个网络层协议，因此，它可以被互联网发送</p><h3 id="6-3-不可路由协议"><a href="#6-3-不可路由协议" class="headerlink" title="6.3. 不可路由协议"></a>6.3. 不可路由协议</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241031640.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005558.png" alt="pic23"></a></p><p>不可路由协议不支持第三层</p><p>其中最常见的不可路由协议是NetBEUI（网络BIOS扩充用户接口）</p><p>NetBEUI 是一个小、快、高效的协议，但只能在一个网段上运行</p><h3 id="6-4-访问可路由协议"><a href="#6-4-访问可路由协议" class="headerlink" title="6.4. 访问可路由协议"></a>6.4. 访问可路由协议</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241030763.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005604.png" alt="pic24"></a></p><h3 id="6-5-路由协议"><a href="#6-5-路由协议" class="headerlink" title="6.5. 路由协议"></a>6.5. 路由协议</h3><p>路由（routing）协议决定了被动路由（routed）协议前往目的地的路径</p><p>用于路由器之间的协议，以便它们可以动态地获知路由信息，并将它们添加到路由表中。</p><h3 id="6-6-分类"><a href="#6-6-分类" class="headerlink" title="6.6. 分类"></a>6.6. 分类</h3><h4 id="6-6-1-静态和动态"><a href="#6-6-1-静态和动态" class="headerlink" title="6.6.1. 静态和动态"></a>6.6.1. 静态和动态</h4><ul><li>静态路由:<ul><li>网关手动将路由信息输入路由器</li></ul></li><li>动态路由:<ul><li>路由器可以联机（on the fly）交换彼此信息</li><li>使用路由（routing）协议来更新路由信息</li><li>RIP, IGRP, EIGRP, OSPF …</li></ul></li></ul><p><strong>静态路由VS动态路由</strong></p><ul><li>静态路由:<ul><li>隐藏了部分互联网</li><li>测试网络中某个特定的链接</li><li>当只有一条路径到达目的网络时，便于维持路由表</li></ul></li><li>动态路由:<ul><li>维持路由表</li><li>定时更新路由信息</li><li>基于路由（routing）协议，共享路由信息</li><li>路由器可以适应变化的网络条件</li></ul></li></ul><h4 id="6-6-2-IGP和EGP"><a href="#6-6-2-IGP和EGP" class="headerlink" title="6.6.2. IGP和EGP"></a>6.6.2. IGP和EGP</h4><p>动态路由</p><p><strong>I</strong>nterior <strong>G</strong>ateway <strong>P</strong>rotocols (RIP, IGRP, EIGRP, OSPF)内部网关协议:</p><p> 用于自治系统，管理局域网中的路由器，如：校园网，公司内网……</p><p><strong>E</strong>xterior <strong>G</strong>ateway <strong>P</strong>rotocols (EGP, BGP)外部网关协议:</p><p> 用于自治系统之间传送包</p><p><strong>IGP vs EGP</strong></p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241030194.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005617.png" alt="pic25"></a></p><p>pic25</p><h4 id="6-6-3-DVP和LSP"><a href="#6-6-3-DVP和LSP" class="headerlink" title="6.6.3. DVP和LSP"></a>6.6.3. DVP和LSP</h4><ul><li><strong>D</strong>istance-<strong>V</strong>ector <strong>P</strong>rotocols (RIP, IGRP)距离矢量协议:<ul><li>从相邻的视角看网络拓扑</li><li>路由器之间添加距离矢量</li><li>周期性频繁的更新</li><li>复制一份路由表，传给相邻路由器</li></ul></li><li><strong>L</strong>ink <strong>S</strong>tate <strong>P</strong>rotocols (OSPF)链路状态协议:<ul><li>了解整个网络拓扑</li><li>计算去其它路由的最短路径</li><li>由事件触发更新</li><li>把链路状态路由的更新信息发给其它路由</li></ul></li></ul><h3 id="6-7-发送距离矢量"><a href="#6-7-发送距离矢量" class="headerlink" title="6.7. 发送距离矢量"></a>6.7. 发送距离矢量</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241033027.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005654.png" alt="pic26"></a></p><h3 id="6-8-发送链路状态"><a href="#6-8-发送链路状态" class="headerlink" title="6.8. 发送链路状态"></a>6.8. 发送链路状态</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241033877.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005749.png" alt="pic27"></a></p><h3 id="6-9-RIP-Route-Information-Protocol-路由信息协议"><a href="#6-9-RIP-Route-Information-Protocol-路由信息协议" class="headerlink" title="6.9. RIP(Route Information Protocol)路由信息协议"></a>6.9. RIP(Route Information Protocol)路由信息协议</h3><p><strong>一定会考！！</strong></p><p>最受欢迎</p><p>属于内部网关协议、距离矢量协议</p><p>跳数hop是唯一的度量标准</p><p>最大跳数为15</p><p>每30秒更新一次</p><p>不总是选择最快路径</p><p>产生很多网络拥塞</p><p>RIP v2 是 RIP v1的一个很重要的改进版本</p><h3 id="6-10-IGRP-内部网关路由选择协议-amp-EIGRP-增强网关路由选择协议"><a href="#6-10-IGRP-内部网关路由选择协议-amp-EIGRP-增强网关路由选择协议" class="headerlink" title="6.10. IGRP(内部网关路由选择协议)&amp;EIGRP(增强网关路由选择协议)"></a>6.10. IGRP(内部网关路由选择协议)&amp;EIGRP(增强网关路由选择协议)</h3><p>思科专利</p><p>属于内部网关协议、距离矢量协议</p><p>综合以延迟，带宽，负载，可靠性为度量标准</p><p>最大跳数为255</p><p>每90秒更新一次</p><p>EIGRP 是 IGRP的进阶版, 混合了路由（routing）协议</p><h3 id="6-11-OSPF-Open-Shortest-Path-First-开放最短路径优先"><a href="#6-11-OSPF-Open-Shortest-Path-First-开放最短路径优先" class="headerlink" title="6.11. OSPF(Open Shortest Path First)开放最短路径优先"></a>6.11. OSPF(Open Shortest Path First)开放最短路径优先</h3><p>属于内部网关协议、链路状态协议</p><p>综合以代价，速度，可靠性，安全性为衡量</p><p>由事件触发更新</p><h2 id="7-VLSM"><a href="#7-VLSM" class="headerlink" title="7. VLSM"></a>7. VLSM</h2><h3 id="7-1-有类路由-amp-VLSM可变长子网掩码"><a href="#7-1-有类路由-amp-VLSM可变长子网掩码" class="headerlink" title="7.1. 有类路由&amp;VLSM可变长子网掩码"></a>7.1. 有类路由&amp;VLSM可变长子网掩码</h3><h4 id="有类路由"><a href="#有类路由" class="headerlink" title="有类路由"></a>有类路由</h4><p> 有类路由协议要求一个网络只能有一个子网掩码</p><p> 示例：网络192.168.187.0必须只使用一个子网掩码如255.255.255.0</p><h4 id="VLSM-可变长子网掩码"><a href="#VLSM-可变长子网掩码" class="headerlink" title="VLSM-可变长子网掩码"></a>VLSM-可变长子网掩码</h4><p> VLSM的优点是允许一个自治系统有不同的子网掩码</p><h3 id="7-2-VLSM"><a href="#7-2-VLSM" class="headerlink" title="7.2. VLSM"></a>7.2. VLSM</h3><p>有了VLSM，网管可以在少量主机的网络上使用长子网掩码，大量主机的网络上使用短子网掩码</p><p>如果路由协议允许VLSM：</p><p> 在网络连接上使用一个30位的子网掩码，255.255.255.252</p><p> 给用户网络一个24位的掩码，255.255.255.0</p><p> 或者，甚至一个22位的掩码，255.255.252.0，给有着近1000用户的网络</p><p>优点:</p><p> 更有效的使用IP地址</p><p> 使用路由汇总的能力更强</p><p>支持 VLSM 的路由协议:</p><p> OSPF开放最短路径优先</p><p> Integrated Intermediate System to Intermediate System (Integrated IS-IS)</p><p> EIGRP增强内部网关路由选择协议</p><p> RIP v2</p><p> 静态路由</p><p>空间浪费：</p><p> 过去建议不要使用第一个和最后一个子网，但是我们可以在Cisco IOS ver12.0中使用子网</p><p> 在 IOS ver12.0 中, 思科路由器默认使用子网0</p><p> 命令：router(config)#no ip subnet-zero</p><h3 id="7-3-为什么使用VLSM"><a href="#7-3-为什么使用VLSM" class="headerlink" title="7.3. 为什么使用VLSM"></a>7.3. 为什么使用VLSM</h3><p>VLSM 允许一个组织在一个网络地址空间，使用不只一个子网掩码</p><p>使用 VLSM 通常被理解为“给子网划分子网”，可以用来使得寻址效率最大化</p><p>VLSM 是帮助缩小IPv4和IPv6之间差距的修正之一</p><h3 id="7-4-怎么使用VLSM"><a href="#7-4-怎么使用VLSM" class="headerlink" title="7.4. 怎么使用VLSM"></a>7.4. 怎么使用VLSM</h3><p>示例：</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241034156.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005783.png" alt="pic28"></a></p><p>一个C类地址192.168.10.0/24 (表示前24位为网络号)已经被分配</p><p> 珀斯，悉尼，新加坡有一个连接到KL的广域网</p><p> 珀斯需要60个主机</p><p> KL 需要28个主机.</p><p> 悉尼和新加坡各需要12个主机</p><p>为了计算VLSM子网和各自的主机数，在地址范围中先分配最大的需求。需求水平应该按照从大到小的顺序排列。</p><p><strong>步骤一</strong></p><p>珀斯需要60个主机</p><p>用6位，因为这样有2^6-2=62个可用主机地址，因此第4个八位中的2位将表示/26的扩展网络前缀，剩余的6位用来表示主机地址</p><p>将VLSM用在地址192.168.10.0/24上，有：</p><p> 192.168.10.00 hhhhhh/26</p><p> 255.255.255.192(1100 0000)</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241034473.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005812.png" alt="pic29"></a></p><p><strong>步骤二</strong></p><p>KL需要28个主机。在192.168.10.63/26后，下一个可用的地址是192.168.10.64/26</p><p>因为需要28个主机，所以需要5位表示主机地址，这样有2^5-2=30个可用的主机</p><p>因此需要5位来表示主机，3位用于/27的扩展网络前缀</p><p>将VLSM使用在192.168.10.64/26上，有：</p><p> 192.168.10.<strong>010</strong> hhhhh/27</p><p> 255.255.255.224(1110 0000)</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241034636.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005902.png" alt="pic30"></a></p><p><strong>步骤三</strong></p><p>现在悉尼和新加坡各需要12个主机，下一个可用地址从192.168.10.96/27开始</p><p>因为需要12个主机，所以需要4位表示主机地址，有2^4-2=14个可用地址</p><p>因此4位代表主机，4位用于/28的扩展网络前缀</p><p>将VLSM用在192.168.10.96/27上，有：</p><p> 192.168.10.<strong>0110</strong> hhhh/28</p><p> 255.255.255.240(1111 0000)</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241035305.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005210.png" alt="pic31"></a></p><p><strong>步骤四</strong></p><p>现在给广域网分配链接地址，记住，每个广域网链接需要2个IP地址，下个可获取的子网是192.168.10.128/28</p><p>因为每个广域网链接需要2个网络地址，所以2位用于表示主机，有2^2-2=2个可用地址</p><p>因此需要2位表示链接，6位表示/30的扩展网络前缀</p><p>将VLSM用在192.168.10.128/28上，有：</p><p> 192.168.10.<strong>100000</strong> hh/30</p><p> 255.255.255.250(1111 1100)</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241035266.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005471.png" alt="pic32"></a></p><p><strong>result</strong></p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241035283.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005565.png" alt="pic33"></a></p><p>只有没有被使用的子网可以被进一步划分子网</p><p>如果一个子网的任何地址被使用了，那么这个子网不能再被划分</p><h3 id="7-5-路由聚合"><a href="#7-5-路由聚合" class="headerlink" title="7.5. 路由聚合"></a>7.5. 路由聚合</h3><p>无类别域间路由和VLSM的使用，不仅防止了地址浪费，还促进路由聚合</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241035358.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005575.png" alt="pic34"></a></p><p>pic34</p><p><strong>示例</strong></p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241035986.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005655.png" alt="pic35"></a></p><p>计算</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241035591.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005742.png" alt="pic36"></a></p><p><strong>优点</strong></p><p> 减少路由表条目数</p><p> 用于隔离拓扑的变化</p><p> 为了让聚合正确工作，要仔细地在层次结构中分配地址，使得汇总的地址分享同样的高位比特</p><p> VLSM 允许路由聚合，通过将聚合完全基于左边共享的高位，来增加灵活性，即使网络是不连续的。</p><h2 id="8-ICMP"><a href="#8-ICMP" class="headerlink" title="8. ICMP"></a>8. ICMP</h2><h3 id="8-1-一些概念"><a href="#8-1-一些概念" class="headerlink" title="8.1. 一些概念"></a>8.1. 一些概念</h3><p>ICMP (Internet Control Message Protocol)：为了提高 IP 数据报交付成功的机会</p><p>ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告</p><p>ICMP 只是 IP 层的协议</p><p>ICMP 报文作为 IP 层数据报的数据，加上数据报的首部，组成 IP 数据报发送出去</p><h3 id="8-2-ICMP报文的格式"><a href="#8-2-ICMP报文的格式" class="headerlink" title="8.2. ICMP报文的格式"></a>8.2. ICMP报文的格式</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241036001.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005795.png" alt="pic37"></a></p><h3 id="8-3-两种ICMP报文"><a href="#8-3-两种ICMP报文" class="headerlink" title="8.3. 两种ICMP报文"></a>8.3. 两种ICMP报文</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241036590.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005858.png" alt="pic38"></a></p><h3 id="8-4-目的站不可到达"><a href="#8-4-目的站不可到达" class="headerlink" title="8.4. 目的站不可到达"></a>8.4. 目的站不可到达</h3><p><strong>网络不可到达</strong>(net unreachable)</p><p><strong>主机不可到达</strong>(host unreachable)</p><p><strong>协议不可到达（</strong>protocol unreachable）</p><p><strong>端口不可到达（</strong>port unreachable）</p><p><strong>源路由选择不能完成（</strong>source route failed）</p><p><strong>目的网络不可知（</strong>unknown destination network）</p><p><strong>目的主机不可知</strong>（unknown destination host）</p><h3 id="8-5-ICMP差错报告报文的数据字段的内容"><a href="#8-5-ICMP差错报告报文的数据字段的内容" class="headerlink" title="8.5. ICMP差错报告报文的数据字段的内容"></a>8.5. ICMP差错报告报文的数据字段的内容</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241036447.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005892.png" alt="pic39"></a></p><h3 id="8-6-不应发送ICMP差错报告报文的几种情况"><a href="#8-6-不应发送ICMP差错报告报文的几种情况" class="headerlink" title="8.6. 不应发送ICMP差错报告报文的几种情况"></a>8.6. 不应发送ICMP差错报告报文的几种情况</h3><p>对 ICMP 差错报告报文不再发送 ICMP 差错报告报文</p><p>对第一个分片的数据报片的所有后续数据报片都不发送 ICMP 差错报告报文</p><p>对具有多播地址的数据报都不发送 ICMP 差错报告报文</p><p>对具有特殊地址（如127.0.0.0或0.0.0.0）的数据报不发送 ICMP 差错报告报文</p><h3 id="8-7-PING-Packet-InterNet-Groper"><a href="#8-7-PING-Packet-InterNet-Groper" class="headerlink" title="8.7. PING(Packet InterNet Groper)"></a>8.7. PING(Packet InterNet Groper)</h3><p>PING 是用ICMP的”Echo request”和”Echo reply”消息来实现的</p><p>PING 用来测试两个主机之间的连通性</p><p>PING 使用了 ICMP 回送请求与回送回答报文</p><p>PING 是应用层直接使用网络层 ICMP 的例子，它没有通过运输层的 TCP或UDP</p><h2 id="9-移动IP"><a href="#9-移动IP" class="headerlink" title="9. 移动IP"></a>9. 移动IP</h2><h3 id="9-1-基本概念"><a href="#9-1-基本概念" class="headerlink" title="9.1. 基本概念"></a>9.1. 基本概念</h3><p>移动 IP 让电脑可以在从一个因特网接入点换到另一个接入点的时候，保持网络连接</p><p>移动 IP 和 nomadic(不定) IP 是不同的:</p><p> 移动 IP 可以无视接入点的变化，自动保持电脑的网络</p><p> 不定 IP 在接入点变化时，必须先停止连接，然后初始化新的电脑连接</p><h3 id="9-2-移动IP的运作"><a href="#9-2-移动IP的运作" class="headerlink" title="9.2. 移动IP的运作"></a>9.2. 移动IP的运作</h3><p><strong>本地网络</strong>：移动节点被分配给名为本地网络(home network)的特定网络,在该网络里名为本地地址的IP地址是静态的.</p><p><strong>外部网络</strong>：移动节点移至另一个网络， 该网络被认为是此主机的外部网络。</p><p><strong>外部代理</strong>：移动节点通过网络节点(路由器) 注册，如果路由器在外部网络，名为外部代理。</p><p>移动节点与用户本地网络的、名为本地代理的类似代理通信,将移动节点的<strong>转交地址</strong>(care-of address)给予<strong>本地代理</strong></p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241036352.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005928.png" alt="pic40"></a></p><h3 id="9-3-转交地址"><a href="#9-3-转交地址" class="headerlink" title="9.3. 转交地址"></a>9.3. 转交地址</h3><p>移动 IP 提供两种获取转交地址的模式</p><p> <strong>外地代理转交地址</strong></p><p> 该地址通常是发送通告的外地代理的 IP 地址</p><p> 通过代理通告消息被通告给移动节点</p><p> 外地代理是隧道的端点</p><p> 外地代理通过隧道接收数据报时，会对收到的数据报解除封装。然后，外地代理会将内部数据报传送到移动节点</p><p> 许多移动节点可以共用同一转交地址</p><p> <strong>协同定位转交地址</strong></p><p> 由移动节点通过一些方法（如DHCP）获取，作为自身临时IP</p><p> 移动节点充当隧道的端点</p><p> 移动节点对通过隧道传来的数据报解除封装</p><p> 协同定位转交地址可使移动节点在没有外地代理的情况下正常工作</p><p> 如果某个移动节点正在使用协同定位的转交地址，则该移动节点必须与该转交地址处于同一网段。否则，发往该转交地址的数据报将无法传送</p><h3 id="9-4-基本功能"><a href="#9-4-基本功能" class="headerlink" title="9.4. 基本功能"></a>9.4. 基本功能</h3><p><strong>发现</strong> – 移动节点使用发现程序来标识期望的本地代理和外部代理</p><p> 使用ICMP协议</p><p> 移动节点可能在IP层不知道的情况下，由于某些切换机制的作用，从一个网络移到另一个网络。</p><p> 代理发现进程的目的是使代理能检测到这样的移动</p><p> 作为代理的路由器或其他网络节点，周期性发布带广播扩展的路由器广播ICMP报文。报文包括路由器的IP地址</p><p> 移动节点监听这些广播报文。将路由器的网络部分与自身本地地址的网络部分比较，如果不匹配就说明移动节点在外部网络</p><p> 如果移动节点未能接收到代理信息，允许其发布一个ICMP路由器请求报文来寻求路由器响应</p><p><strong>注册</strong> – 移动节点使用认证注册程序将它的转交地址告知它的本地代理</p><p> 用UDP协议</p><p> 注册程序的不安全性</p><p> 移动IP被设计成能抵挡两类攻击</p><p> 一个节点可能伪装成外部代理,并向本地代理发送注册请求,以求将目的为移动节点的通信转到自己.</p><p> 恶意代理可能重发旧的注册报文,有效地将移动节点由网络中除去</p><p> 为达到报文认证,每个注册请求和回应包含认证扩充</p><p><strong>隧道</strong></p><p> 用于将IP数据报由本地地址发至转交地址</p><p> 使用IP协议。将原来整个数据报封装入一个首部带有转交地址的新IP数据报中。</p><p> 隧道将原有的IP报文作为载荷，在外面包上一层新的IP包头，转换成为一个新的IP报文</p><p> 在一定程度上提高了安全性</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241036689.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291005976.png" alt="pic41"></a></p>]]></content>
    
    
    <categories>
      
      <category>Computer Network</category>
      
      <category>OSI Model</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ queue</title>
    <link href="/2022/10/26/C++%20Basic/STL%20Containers/C++%20queue/"/>
    <url>/2022/10/26/C++%20Basic/STL%20Containers/C++%20queue/</url>
    
    <content type="html"><![CDATA[<p>queue是一种容器转换器模板，调用<code>#include&lt; queue&gt;</code>即可使用队列类。</p><h4 id="1-头文件"><a href="#1-头文件" class="headerlink" title="1. 头文件"></a>1. 头文件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="2-queue-初始化"><a href="#2-queue-初始化" class="headerlink" title="2. queue 初始化"></a>2. queue 初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">queue&lt;Type, Container&gt; <span class="hljs-comment">//(&lt;数据类型，容器类型&gt;）</span><br></code></pre></td></tr></table></figure><p> 初始化时必须要有数据类型，容器可省略，省略时则默认为<a href="https://so.csdn.net/so/search?q=deque&spm=1001.2101.3001.7020">deque</a> 类型</p><p> <strong>注意：不能用vector容器初始化queue</strong></p><p> 因为<code>queue</code>转换器要求容器支持<code>front(), back(), push_back()</code>及 <code>pop_front()</code>，说明<code>queue</code>的数据从容器后端入栈而从前端出栈。所以可以使用<code>deque（double-ended queue，双端队列）</code>和<code>list</code>对<code>queue</code>初始化，而<code>vector</code>因其缺少<code>pop_front()</code>，不能用于<code>queue</code>。</p><p> 常见的初始化实例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">queue&lt;<span class="hljs-type">int</span>&gt; q1;<br>queue&lt;<span class="hljs-type">double</span>&gt; q2;  <br>queue＜<span class="hljs-type">char</span>＞ q3；<br><span class="hljs-comment">//默认为用deque容器实现的queue；</span><br><br>C++<br></code></pre></td></tr></table></figure><h4 id="3-queue-常用函数"><a href="#3-queue-常用函数" class="headerlink" title="3. queue 常用函数"></a>3. queue 常用函数</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">push</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//在队尾插入一个元素</span><br><br><span class="hljs-function"><span class="hljs-title">pop</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//删除队列第一个元素</span><br><br><span class="hljs-function"><span class="hljs-title">size</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//返回队列中元素个数</span><br><br><span class="hljs-function"><span class="hljs-title">empty</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//如果队列空则返回true</span><br><br><span class="hljs-function"><span class="hljs-title">front</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//返回队列中的第一个元素</span><br><br><span class="hljs-function"><span class="hljs-title">back</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//返回队列中最后一个元素</span><br><br>C++<br></code></pre></td></tr></table></figure><h4 id="4-queue-使用实例"><a href="#4-queue-使用实例" class="headerlink" title="4. queue 使用实例"></a>4. queue 使用实例</h4><ol><li><code>push()</code>在队尾插入一个元素</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">queue &lt;<span class="hljs-built_in">string</span>&gt; q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;first&quot;</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;second&quot;</span>);<br>cout&lt;&lt;q.front()&lt;&lt;endl;<br><br>//输出 <span class="hljs-built_in">first</span><br><br>C++<br></code></pre></td></tr></table></figure><ol start="2"><li><code>pop()</code> 将队列中最靠前位置的元素删除，没有返回值</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima">queue &lt;<span class="hljs-built_in">string</span>&gt; q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;first&quot;</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;second&quot;</span>);<br>q.<span class="hljs-built_in">pop</span>();<br>cout&lt;&lt;q.front()&lt;&lt;endl;<br><br>// 输出 <span class="hljs-built_in">second</span> <br>// 因为 <span class="hljs-built_in">first</span> 已经被<span class="hljs-built_in">pop</span>（）函数删掉了<br><br>C++<br></code></pre></td></tr></table></figure><ol start="3"><li><code>size()</code> 返回队列中元素个数</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">queue &lt;string&gt; q;<br>q.<span class="hljs-keyword">push</span>(<span class="hljs-string">&quot;first&quot;</span>);<br>q.<span class="hljs-keyword">push</span>(<span class="hljs-string">&quot;second&quot;</span>);<br>cout&lt;&lt;q.<span class="hljs-keyword">size</span>()&lt;&lt;endl;<br><br><span class="hljs-comment">//输出2，因为队列中有两个元素</span><br><br>C++<br></code></pre></td></tr></table></figure><ol start="4"><li><code>empty()</code> 如果队列空则返回<code>true</code></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">queue &lt;string&gt; q;<br>cout&lt;&lt;q.empty()&lt;&lt;endl;<br>q.push(<span class="hljs-string">&quot;first&quot;</span>);<br>q.push(<span class="hljs-string">&quot;second&quot;</span>);<br>cout&lt;&lt;q.empty()&lt;&lt;endl;<br><br><span class="hljs-regexp">//</span>分别输出<span class="hljs-number">1</span>和<span class="hljs-number">0</span><br><span class="hljs-regexp">//</span>最开始队列为空，返回值为<span class="hljs-number">1</span>（ture）；<br><span class="hljs-regexp">//</span>插入两个元素后，队列不为空，返回值为<span class="hljs-number">0</span>（false）；<br><br>C++<br></code></pre></td></tr></table></figure><ol start="5"><li><code>front()</code> 返回队列中的第一个元素</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs maxima">queue &lt;<span class="hljs-built_in">string</span>&gt; q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;first&quot;</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;second&quot;</span>);<br>cout&lt;&lt;q.front()&lt;&lt;endl;<br>q.<span class="hljs-built_in">pop</span>();<br>cout&lt;&lt;q.front()&lt;&lt;endl;<br><br>// 第一行输出<span class="hljs-built_in">first</span>；<br>// 第二行输出<span class="hljs-built_in">second</span>，因为<span class="hljs-built_in">pop</span>（）已经将<span class="hljs-built_in">first</span>删除了<br><br>C++<br></code></pre></td></tr></table></figure><ol start="6"><li><code>back()</code> 返回队列中最后一个元素</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">queue &lt;string&gt; q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;first&quot;</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;second&quot;</span>);<br>cout&lt;&lt;q.<span class="hljs-built_in">back</span>()&lt;&lt;endl;<br><br><span class="hljs-comment">//输出最后一个元素second</span><br><br>C++<br></code></pre></td></tr></table></figure><h4 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5. 参考文章"></a>5. 参考文章</h4><ol><li><a href="https://blog.csdn.net/KEPROM/article/details/109744379">C++队列queue用法详解</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>C++ Basic</category>
      
      <category>STL Containers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSI Data Link Layer</title>
    <link href="/2022/10/26/Computer%20Networking/OSI%20Model/OSI%20Data%20Link%20Layer/"/>
    <url>/2022/10/26/Computer%20Networking/OSI%20Model/OSI%20Data%20Link%20Layer/</url>
    
    <content type="html"><![CDATA[<h1 id="OSI层次：数据链路层"><a href="#OSI层次：数据链路层" class="headerlink" title="OSI层次：数据链路层"></a>OSI层次：数据链路层</h1><blockquote><p>关键词：帧、介质访问控制</p><p>通过物理链路提供可靠的数据传输</p><p>关心物理寻址、网络拓扑、网络访问、错误识别、有序发送帧、流控制</p></blockquote><h2 id="1-数据链路层概述"><a href="#1-数据链路层概述" class="headerlink" title="1. 数据链路层概述"></a>1. 数据链路层概述</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1. 概述"></a>1.1. 概述</h3><p>1.是一种逻辑概念</p><p>2.第2层协议定义了：链路上数据交换的格式 和 链路上两个节点的行为</p><p>3.数据链路层的传输只存在于相邻的链路上</p><h3 id="1-2-LANS和数据链路层"><a href="#1-2-LANS和数据链路层" class="headerlink" title="1.2. LANS和数据链路层"></a>1.2. LANS和数据链路层</h3><h4 id="1-主要任务："><a href="#1-主要任务：" class="headerlink" title="1.主要任务："></a>1.主要任务：</h4><ul><li>错误通知</li><li>网络拓扑</li><li>数据流控制</li></ul><h4 id="2-第一层和第二层之间的不同之处"><a href="#2-第一层和第二层之间的不同之处" class="headerlink" title="2.第一层和第二层之间的不同之处"></a>2.第一层和第二层之间的不同之处</h4><ul><li>第一层不能和更高层沟通，第二层通过 <strong><a href="https://baike.baidu.com/item/LLC%E5%8D%8F%E8%AE%AE/9441993">LLC</a></strong> (Logic Link Control, 逻辑链路控制) 与上层沟通</li><li>第一层根据传输介质发送信号，第二层通过 <strong><a href="https://baike.baidu.com/item/%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/10081534">MAC</a></strong> (Media Access Control，介质访问控制) 发送信号</li><li>第一层不能命名或定义主机，第二层有命名过程</li><li>第一层只能描述比特流，第二层用帧 (frame) 组织比特</li></ul><h3 id="1-3-第二层提供的服务"><a href="#1-3-第二层提供的服务" class="headerlink" title="1.3. 第二层提供的服务"></a>1.3. 第二层提供的服务</h3><p>三个由 LLC 提供给网络层的服务:</p><ul><li>无应答的无连接服务（不需要对方同意）用于：可靠的链路(上层来保证数据正确性)、实时任务、绝大部分用于LANs</li><li>有应答的无连接服务，用于：不可靠的链路，如无线网络<ul><li>确认会降速（降低50%）</li></ul></li><li>有应答的连接服务，比如：蓝牙</li></ul><h3 id="1-4-在普通-LAN-中的-MAC"><a href="#1-4-在普通-LAN-中的-MAC" class="headerlink" title="1.4. 在普通 LAN 中的 MAC"></a>1.4. 在普通 LAN 中的 MAC</h3><p>注意这里的 <strong>以太网</strong>，<strong>令牌环</strong> 和 <strong>FDDI</strong> 指的都是 <strong>LAN</strong> 的类型</p><p>以太网 (IEEE802.3)：逻辑总线拓扑 (信息流在线性总线上) 和物理星型或扩展星型 (布线是星型)</p><p>令牌环 (IEEE802.5)：逻辑环形拓扑 (信息流在环中) 和一个物理星型 (布线是星型)</p><p>FDDI (Fiber DistributedData Interface Network)：逻辑环形拓扑 (信息流在环中) 和物理双环拓扑 (布线是双环形)</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241020402.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291002465.png" alt="pic75"></a></p><p>pic75</p><h3 id="1-5-MAC-的访问方式"><a href="#1-5-MAC-的访问方式" class="headerlink" title="1.5. MAC 的访问方式"></a>1.5. MAC 的访问方式</h3><ol><li>两个宽泛的种类：</li></ol><ul><li>决定性-<strong>轮流</strong>：令牌环 和 FDDI</li><li>非决定性 (概率性)-<strong>先来先服务</strong>：以太网 / IEEE802.3</li></ul><ol><li>决定性MAC协议：</li></ol><ul><li>一个特殊的数据令牌在环中循环</li><li>当主机收到令牌，它可以传输数据而不是令牌，这叫抓住令牌</li><li>当被传输的帧，传了一圈回到发射机处，站点会发射一个新令牌，原来的帧会从环上被抛弃</li></ul><ol><li>非决定性MAC协议：</li></ol><ul><li>这个MAC协议被称为，带冲突检测的载波监听多路访问技术(载波监听多点接入/碰撞检测) <em><strong>Carrier</strong></em> <em><strong>Sense Multiple Access with Collision Detection (CSMA/CD</strong></em>)（考点！！！！！！）</li></ul><p>为了使用这个分享介质的技术，以太网允许网络设备仲裁传输的权利</p><h3 id="1-6-LAN传输方式"><a href="#1-6-LAN传输方式" class="headerlink" title="1.6. LAN传输方式"></a>1.6. LAN传输方式</h3><p><strong>单播</strong> (发送方只有一个人): —收到的帧的MAC地址与本站硬件地址相同</p><p><strong>多播</strong>: 发送给本局域网上部分站点的帧</p><p><strong>广播</strong>: 发送给本局域网上所有站点的帧</p><h2 id="2-以太网-和-CSMA-CD"><a href="#2-以太网-和-CSMA-CD" class="headerlink" title="2. 以太网 和 CSMA/CD"></a>2. 以太网 和 CSMA/CD</h2><h3 id="2-1-LAN标准"><a href="#2-1-LAN标准" class="headerlink" title="2.1. LAN标准"></a>2.1. LAN标准</h3><ol><li>定义了<strong>物理介质</strong>和用于将设备连接到介质的连接器</li><li>定义了设备在数据链路层通讯的方式</li><li>数据链路层定义了数据怎样通过物理介质传输</li><li>数据链路层也定义了，在通信使用同一个通道去上层时，却用了不同的上层协议的情况下，怎样封装使用了特定协议的通信</li><li>数据链路层由 IEEE 分成了两个部分：<ul><li><strong>介质访问控制</strong> Media <strong>Access Control</strong> <em><strong>(MAC)</strong></em> (向下层介质传输)</li><li><strong>逻辑链路控制</strong>* Logical <strong>Link Control</strong> <em><strong>(LLC)</strong></em> (向上层网络传输)</li></ul></li></ol><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241021605.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291002603.png" alt="pic76"></a></p><p>pic76</p><h3 id="2-2-MAC子层（重要考点！！）"><a href="#2-2-MAC子层（重要考点！！）" class="headerlink" title="2.2. MAC子层（重要考点！！）"></a>2.2. MAC子层（重要考点！！）</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210241021530.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291002629.png" alt="pic77"></a></p><p>MAC 子层是帧中的域</p><ol><li>报头</li></ol><p>由0、1交替出现的开头，被称为报头 (10101011)以字节（byte）为单位 （7+1）</p><p>报头（preamble）通知接收站，帧已经来了</p><ol><li>目的地址和源地址域</li></ol><p>源地址：通常是一个单播地址</p><p>目的地址：单播，多播，广播（48位）</p><p>目的地址在源地址之前：快速转发</p><ol><li>长度域暗示了这个域后面跟着的数据的字节，并先于帧校验序列域</li></ol><p><strong>由于数据长度可计算，改为type</strong></p><p><strong>小于0x0600表示length，大于0x0600表示type</strong>（0x0600=1536B）</p><ol><li>数据域包括你想要发送的信息</li></ol><p>数据域长度可变，最大是1500字节，最小是46字节</p><p>6+6+2+46+4=64 <strong>确保发送一次数据占满100m双绞线，不会同时发送</strong></p><ol><li>FCS域（4字节）包括了一个循环冗余校验值cyclic redundancy check</li></ol><p>发送设备发送CRC</p><p>接受设备重新计算CRC来检查传输中帧可能受到的损失</p><h3 id="2-3-LLC子层"><a href="#2-3-LLC子层" class="headerlink" title="2.3. LLC子层"></a>2.3. LLC子层</h3><p>LLC子层管理通过一条链路上设备的通讯</p><p>LLC被定义在IEEE 802.2说明书中，支持无连接和面向连接的服务</p><p>LLC子层允许数据链路层的一部分，运作独立于已有技术</p><p> 一个单独的LLC子层可以和不同的MAC子层相配</p><h3 id="2-4-MAC地址的十六进制数字"><a href="#2-4-MAC地址的十六进制数字" class="headerlink" title="2.4. MAC地址的十六进制数字"></a>2.4. MAC地址的十六进制数字</h3><p>MAC地址有48位，通常表示为12个十六进制</p><p>IEEE要求，前6个十六进制数（从左到右）指出制造商或供应商的身份，还包括了组织唯一标识符</p><p>剩下的6个十六进制数，由特定的供应商管理，包括接口编号</p><p><strong>对应MAC子层的目的地址</strong></p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210262333792.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291002694.png" alt="img"></a></p><h3 id="2-5-以太网802-3广播"><a href="#2-5-以太网802-3广播" class="headerlink" title="2.5. 以太网802.3广播"></a>2.5. 以太网802.3广播</h3><p>一种特殊的MAC地址</p><p>广播（所有端口转发，做成总线的方式）</p><p> MAC目的地址: <strong>全是1(FFFF.FFFF.FFFF)</strong></p><p>广播可以通过不必要的打断，严重影响站点的表现</p><p>所以广播仅在一下情况应该被使用：</p><p> 目的地的MAC地址未知</p><p> 目的地是全体主机</p><h3 id="2-6-组帧framing"><a href="#2-6-组帧framing" class="headerlink" title="2.6. 组帧framing"></a>2.6. 组帧framing</h3><p>组帧是第二层封装的过程</p><p>帧是第二层的协议数据单元</p><p>帧的部分叫做域，每个域由字节构成</p><h3 id="2-7-以太网MAC-CSMA-CD：历史"><a href="#2-7-以太网MAC-CSMA-CD：历史" class="headerlink" title="2.7. 以太网MAC-CSMA/CD：历史"></a>2.7. 以太网MAC-CSMA/CD：历史</h3><p>以太网传输数据时，所有的PC都会接收数据，再根据需求考虑是否丢弃数据</p><p>JAM SIGNAL：冲突信号，32位或者更多的1，所有的设备都会接收该信号</p><h4 id="CSMA-CD传输流程"><a href="#CSMA-CD传输流程" class="headerlink" title="CSMA/CD传输流程"></a>CSMA/CD传输流程</h4><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210262334687.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291002703.png" alt="pic79"></a></p><h2 id="3-无线LAN和CSMA-CD"><a href="#3-无线LAN和CSMA-CD" class="headerlink" title="3. 无线LAN和CSMA/CD"></a>3. 无线LAN和CSMA/CD</h2><h3 id="3-1-无线LAN标准"><a href="#3-1-无线LAN标准" class="headerlink" title="3.1. 无线LAN标准"></a>3.1. 无线LAN标准</h3><p><a href="https://baike.baidu.com/item/%E6%B5%B7%E8%92%82%C2%B7%E6%8B%89%E7%8E%9B/10933854">一个小故事</a></p><ul><li>IEEE 802.11<ul><li>一个关键技术：直接序列扩频 Direct Sequence Spread Spectrum (DSSS)</li><li>DSSS 适用于操作在1到2 Mbps范围内的无线设备</li><li>DSSS 可能操作高达11 Mbps 但超过2Mbps的操作是不兼容的</li><li><strong>WIFI从此产生</strong></li></ul></li><li>IEEE 802.11b<ul><li>也叫 Wi-Fi™</li><li>它将传输能力提升至11 Mbps</li><li>所有802.11b系统都是向后兼容的，所以他们也支持802.11的 1~2 Mbps数据传输率</li><li>通过使用802.11一个不同的编码技术获得更高的数据吞吐率</li><li>操作在2.4 GHz之内</li></ul></li><li>IEEE 802.11a<ul><li>覆盖使用 5 GHz传输带宽的WLAN设备</li><li>使用 5 GHz</li><li>802.11a 有能力提供 54 Mbps 的数据吞吐率，若是使用叫做“双倍率”的专利技术可以到达</li><li>实际上，更标准的速率为 20-26 Mbps.</li></ul></li><li>IEEE 802.11g<ul><li>提供和802.11a (54Mbps)一样的吞吐率，但能向后兼容802.11b</li><li>使用正交频分多路复用技术(OFDM)技术</li></ul></li><li><strong>IEEE 802.11n：WLAN的下一代（目前主要使用的）</strong><ul><li>提供和802.11g相比两倍的带宽108Mbps，理论上可达500-600Mbps</li></ul></li></ul><h2 id="4-第二层设备"><a href="#4-第二层设备" class="headerlink" title="4. 第二层设备"></a>4. 第二层设备</h2><h3 id="4-1-网卡-NICs"><a href="#4-1-网卡-NICs" class="headerlink" title="4.1. 网卡 NICs"></a>4.1. 网卡 NICs</h3><ul><li>NICs在第2层数据链路层扮演了重要的角色：<ul><li>LLC——在计算机中与上层通讯</li><li>MAC——提供对共享访问介质的结构化访问</li><li>命名——提供一个独特的MAC地址</li><li>组帧——封装过程的一部分，为了传输将比特打包</li><li>信号传递——通过使用内置的收发器来产生信号和介质接口</li><li>网卡解析01序列</li></ul></li></ul><h3 id="4-2-网桥"><a href="#4-2-网桥" class="headerlink" title="4.2. 网桥"></a>4.2. 网桥</h3><p>网桥将通信划分成段；基于MAC地址，而不是协议，过滤通信</p><p>网桥可以通过减少大的冲突域，来改进网络表现</p><p>当从网络中一个段到其它段的通信量比较低时，网桥工作的更好</p><p> 当网段之间的通信量变得繁重，网桥会成为瓶颈，减慢通讯</p><p><strong>网桥可以识别帧了</strong></p><p><strong>透明网桥</strong></p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210262334762.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291002710.png" alt="pic11"></a></p><p><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291004430.png" alt="pic11"></p><p>“透明”是指局域网上的站点并不知道所发送的帧将经过哪几个网桥，因为网桥对各站来说是看不见的</p><p> 透明网桥是一种即插即用设备，其标准是 IEEE 802.1D</p><p> 目前以太网中使用得最多的网桥</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210262334302.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291002161.png" alt="pic10"></a></p><p>pic10</p><p>问题：当网络上的设备想要发送数据的时候，但是它不知道目的地址</p><p> 发送一个广播给网络上的所有设备</p><p> 因为网络上每一个设备都要关注这种广播，网桥总是向前传输广播<br>​ 太多广播可能会导致广播风暴这又会导致：</p><p> 网络超时</p><p> 通信减慢</p><p> 无法接受的网络表现</p><p><strong>源路由网桥</strong></p><p> 源路由(source route)网桥在发送帧时将详细的路由信息放在帧的首部中,从而使每个经过的网桥都了解帧的路径</p><p> 在令牌环网络中被广泛使用</p><p> 透明网桥容易安装，但网络资源的利用不充分</p><p> 源路由(source route)网桥在发送帧时将详细的路由信息放在帧的首部中</p><p> 源站以广播方式向欲通信的目的站发送一个发现帧，每个发现帧都记录所经过的路由</p><p> 发现帧到达目的站时就沿各自的路由返回源站</p><p> 源站在得知这些路由后，从所有可能的路由中选择出一个最佳路由</p><p> 凡从该源站向该目的站发送的帧的首部，都必须携带源站所确定的这一路由信息</p><h3 id="4-3-交换机"><a href="#4-3-交换机" class="headerlink" title="4.3. 交换机"></a>4.3. 交换机</h3><p>有两个基本操作：</p><p> 交换数据帧：帧被输入介质接收，然后被输出介质传输</p><p> 交换操作保持：交换机建立和保持交换表，搜索循环。路由器建立和保持路由表和服务表</p><p>交换是一种。通过减少通信量，增加带宽，减轻Ethernet LANs中的网络拥堵的技术</p><p> 交换机创造专用网段，或点对点连接，然后将这些网段在交换机内的虚拟网络中连接起来</p><p> 这叫虚拟回路，因为它仅在两个节点需要通讯时存在，并且是建立在交换机内的</p><p> 你可以把每个交换机端口想象成一个微型网桥，这个过程叫微分段microsegmentation</p><p> 每一个交换机端口给予每个主机全部的介质带宽</p><p>局域网交换机减小了冲突域的大小</p><p>然而，所有连接到交换机的主机仍然在同一个广播域中：</p><p> 也就是说，从一个节点发出的广播仍然会被其他所有连接这个局域网交换机的主机接收</p><h3 id="4-4-冲突域"><a href="#4-4-冲突域" class="headerlink" title="4.4. 冲突域"></a>4.4. 冲突域</h3><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210262334639.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210291002214.png" alt="pic12"></a></p><p>pic12</p><p>a.冲突域的桥分割</p><p>用网桥来分割局域网的以太网，给每个用户提供更多带宽，因为每个网段上用户更少</p><p>网桥不管第3层用什么协议，都会把数据帧继续传输下去</p><p>网桥增加了10%~30%的网络延迟，因为需要做决定</p><p>网桥被看做是存储转发设备，因为它必须接收全部帧，然后在转发之前，验证循环冗余校验CRC</p><p>b.冲突域的交换机分割</p><p>交换机更快，因为他们在硬件中交换，然而网桥在软件中交换</p><p>一个10 Mbps的以太局域网和一个100 Mbps以太局域网可以用交换机连接</p><p>在一个交换式以太网实现中，可用带宽可达100%</p><p>当因为CSMA/CD使得分享式以太网络只使用了全满容量的30%~40%时，网络表现最好</p><p>网桥仅仅支持存储转发，而有些交换机支持直通转发，这样减少了延迟</p><p>c.冲突域的路由器分割</p><p>路由器可以构造最高等级的分割：</p><p> 构造更小的冲突域</p><p> 构造更小的广播域：除非编写的程序要求，否则路由器不会继续向前传送广播</p><p>路由器通过检查数据包上的目的逻辑地址完成向前传输包，然后在它的路由表中查找向前的指令</p><p>因为路由器比网桥有更多的功能，所以操作时有着更大的延迟</p><p>路由器可以像网关一样工作：</p><p> 用于连接不同的网络介质和不同的局域网技术</p>]]></content>
    
    
    <categories>
      
      <category>Computer Network</category>
      
      <category>OSI Model</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DataLink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>请移步我的知乎</title>
    <link href="/2022/10/25/Discrete%20Math/%E8%AF%B7%E7%A7%BB%E6%AD%A5%E6%88%91%E7%9A%84%E7%9F%A5%E4%B9%8E/"/>
    <url>/2022/10/25/Discrete%20Math/%E8%AF%B7%E7%A7%BB%E6%AD%A5%E6%88%91%E7%9A%84%E7%9F%A5%E4%B9%8E/</url>
    
    <content type="html"><![CDATA[<p>我将 NJUSE 大一下学期的离散数学（主要是简单的数据结构）进行了粗略的整理，发布在我的知乎上</p><blockquote><p>@怀明带你去夜生活</p><p><a href="https://www.zhihu.com/column/c_1508391477789564928">https://www.zhihu.com/column/c_1508391477789564928</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Discrete Math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zhihu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ IO</title>
    <link href="/2022/10/25/C++%20Basic/%E8%80%83%E8%AF%95%E5%BF%85%E5%A4%87/C++%20IO/"/>
    <url>/2022/10/25/C++%20Basic/%E8%80%83%E8%AF%95%E5%BF%85%E5%A4%87/C++%20IO/</url>
    
    <content type="html"><![CDATA[<h3 id="1-控制台输入"><a href="#1-控制台输入" class="headerlink" title="1. 控制台输入"></a>1. 控制台输入</h3><h4 id="1-标准输入流-cin"><a href="#1-标准输入流-cin" class="headerlink" title="1. 标准输入流 cin"></a>1. 标准输入流 <code>cin</code></h4><p><code>cin</code> 输入原理简述：</p><p>程序的输入都建有一个缓冲区，即输入缓冲区。每次输入过程是这样的：当一次键盘输入结束时会将输入的数据存入输入缓冲区，而<code>cin</code>函数直接从输入缓冲区中取数据（<code>cin</code> 读取数据是从第一个非空白字符开始到下一个空白字符结束）。正因为 <code>cin</code> 函数是直接从缓冲区取数据的，所以有时候当缓冲区中有<strong>残留数据</strong>时，<code>cin</code> 函数会直接取得这些<strong>残留数据</strong>而不会请求键盘输入。</p><h5 id="1-1-头文件"><a href="#1-1-头文件" class="headerlink" title="1.1. 头文件"></a>1.1. 头文件</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//&lt;iostream&gt; 中定义了 cin/cout/cerr/clog 等对象</span><br></code></pre></td></tr></table></figure><h5 id="1-2-cin-gt-gt"><a href="#1-2-cin-gt-gt" class="headerlink" title="1.2. cin &gt;&gt;"></a>1.2. <code>cin &gt;&gt;</code></h5><p>根据 <code>cin &gt;&gt; sth</code> 中 <code>sth</code> 的变量类型读取数据，这里变量类型可以为 <code>int, float, char, char*, string</code> 等诸多类型。这一输入操作，在遇到<strong>结束符</strong><code>（Space、Tab、Enter）</code>就结束，且<strong>结束符并不保存到变量中</strong>。</p><p><strong>注意：最后一个 <code>enter</code> 也在缓冲区</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_input</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-type">char</span> ch1[<span class="hljs-number">10</span>], ch2[<span class="hljs-number">10</span>];  <br>  <span class="hljs-comment">//这里的char[] 换成char* 或者是 string有相同的效果</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;输入两个字符串：&quot;</span> &lt;&lt; endl;  <br>    cin &gt;&gt; ch1;  <br>    cin &gt;&gt; ch2;  <br>    cout &lt;&lt; <span class="hljs-string">&quot;两个字符串分别为：&quot;</span> &lt;&lt; endl;  <br>    cout &lt;&lt; ch1 &lt;&lt; endl;  <br>    cout &lt;&lt; ch2 &lt;&lt; endl;  <br>    cin.<span class="hljs-built_in">get</span>(ch);<br>    cout &lt;&lt; (<span class="hljs-type">int</span>)ch &lt;&lt; endl; <span class="hljs-comment">//输出10，为最后一个enter输入</span><br>&#125;  <br><br></code></pre></td></tr></table></figure><p>输出结果如下：</p><p><a href="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210251510171.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210290955796.png" alt="image-20221025151057071"></a></p><h5 id="1-3-cin-get"><a href="#1-3-cin-get" class="headerlink" title="1.3. cin.get()"></a>1.3. <code>cin.get()</code></h5><p>其中结束符意味着遇到该符号结束字符串读取,默认为enter，读取的字符个数最多为（长度 - 1），因为最后一个为’\0’。要注意的是，cin.get(字符数组名，接收长度，结束符)操作遇到结束符停止读取，但并不会将结束符从缓冲区丢弃。cin.get函数有如下几种声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function">istream&amp; <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">char</span>&amp; c)</span></span>;<br><br><span class="hljs-function">istream&amp; <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, streamsize n)</span></span>;<br><br><span class="hljs-function">istream&amp; <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, streamsize n, <span class="hljs-type">char</span> delim)</span></span>;<br><br><span class="hljs-function">istream&amp; <span class="hljs-title">get</span><span class="hljs-params">(streambuf&amp; sb)</span></span>;<br><br><span class="hljs-function">istream&amp; <span class="hljs-title">get</span><span class="hljs-params">(streambuf&amp; sb, <span class="hljs-type">char</span> delim)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="1-输入-int"><a href="#1-输入-int" class="headerlink" title="1. 输入 int"></a>1. 输入 <code>int</code></h4><ol><li>输入 10 个数字（以空格或者是换行符分割）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> nums[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    cin &gt;&gt; nums[i];<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>输入未知个数的数字并求和</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;<br>    sum += n;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-输入-char"><a href="#2-输入-char" class="headerlink" title="2. 输入 char"></a>2. 输入 <code>char</code></h4><h5 id="2-1-输入一个字符（包括空白符）"><a href="#2-1-输入一个字符（包括空白符）" class="headerlink" title="2.1. 输入一个字符（包括空白符）"></a>2.1. 输入一个字符（包括空白符）</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span> ch = <span class="hljs-number">0</span>;<br>cin.<span class="hljs-built_in">get</span>(ch);<br><span class="hljs-comment">//就算ch是换行符/tab/空格都会被输入进去</span><br></code></pre></td></tr></table></figure><h5 id="2-2-输入一个非空白的字符"><a href="#2-2-输入一个非空白的字符" class="headerlink" title="2.2. 输入一个非空白的字符"></a>2.2. 输入一个非空白的字符</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span> ch = <span class="hljs-number">0</span>;<br>cin &gt;&gt; ch;<br><span class="hljs-comment">//直到输入非空白字符之前，程序都不会结束</span><br></code></pre></td></tr></table></figure><h5 id="2-3-输入未知个数的字符"><a href="#2-3-输入未知个数的字符" class="headerlink" title="2.3. 输入未知个数的字符"></a>2.3. 输入未知个数的字符</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span> ch;<br><span class="hljs-keyword">while</span>(cin.<span class="hljs-built_in">get</span>(<span class="hljs-type">char</span>))&#123;<br>  <span class="hljs-comment">//do something</span><br>  <span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-comment">//这里连换行符或者是空格/tab都能输入，方便用来判断循环结束的条件</span><br></code></pre></td></tr></table></figure><p><code>get</code> 的返回值为 <code>istream</code> 对象，而 <code>istream</code> 对象可以转换为<code>bool</code> 值，因而可以出现在 <code>while</code> 的条件中；</p><p><code>&gt;&gt;</code> 实际上会转换成函数 <code>operator&gt;&gt;</code> 的调用，函数的返回值也为 <code>istream</code> 对象</p><h4 id="3-输入-string-char"><a href="#3-输入-string-char" class="headerlink" title="3. 输入 string/char *"></a>3. 输入 <code>string/char *</code></h4><h5 id="3-1-普通读入"><a href="#3-1-普通读入" class="headerlink" title="3.1. 普通读入"></a>3.1. 普通读入</h5><p>读入，以空白字符或 <code>EOF</code> 作为结束标志</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s;<br>cin &gt;&gt; s;<br></code></pre></td></tr></table></figure><h5 id="3-2-按需读入"><a href="#3-2-按需读入" class="headerlink" title="3.2. 按需读入"></a>3.2. 按需读入</h5><p>读入一行，以换行符（默认）或指定的字符（称为 delimiter）作为结束标志，delimiter 会被读取但不会出现在 s 中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s;<br><span class="hljs-built_in">getline</span>(cin, s);<br><span class="hljs-built_in">getline</span>(cin, a, <span class="hljs-string">&#x27;,&#x27;</span>);<br><br><span class="hljs-comment">//注意这里的 dlm 一定要是字符而不是字符串</span><br></code></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h3 id="2-控制台输出"><a href="#2-控制台输出" class="headerlink" title="2. 控制台输出"></a>2. 控制台输出</h3><h3 id="3-文件输入"><a href="#3-文件输入" class="headerlink" title="3. 文件输入"></a>3. 文件输入</h3><blockquote><p>待补充</p></blockquote><h3 id="4-文件输出"><a href="#4-文件输出" class="headerlink" title="4. 文件输出"></a>4. 文件输出</h3><blockquote><p>待补充</p></blockquote><h3 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5. 参考文章"></a>5. 参考文章</h3><ol><li><a href="https://blog.csdn.net/a3192048/article/details/80303547">cin、cin.get()、cin.getline()、getline()的区别</a></li><li><a href="https://en.cppreference.com/w/cpp/io/basic_ios/operator_bool">https://en.cppreference.com/w/cpp/io/basic_ios/operator_bool</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>C++ Basic</category>
      
      <category>考试必备</category>
      
    </categories>
    
    
    <tags>
      
      <tag>proficiency</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/24/Computer%20Networking/OSI%20Model/OSI%20Application%20Layer/"/>
    <url>/2022/10/24/Computer%20Networking/OSI%20Model/OSI%20Application%20Layer/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/24/Computer%20Networking/OSI%20Model/OSI%20Transport%20Layer/"/>
    <url>/2022/10/24/Computer%20Networking/OSI%20Model/OSI%20Transport%20Layer/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ map</title>
    <link href="/2022/10/23/C++%20Basic/STL%20Containers/C++%20map/"/>
    <url>/2022/10/23/C++%20Basic/STL%20Containers/C++%20map/</url>
    
    <content type="html"><![CDATA[<p>C++ 中的 <code>map</code> 刻画了键-值对这一 ADT。需要注意的是，使用 map 容器存储的各个键-值对，<strong>键的值既不能重复也不能被修改</strong>。换句话说，map 容器中存储的各个键值对不仅键的值独一无二，键的类型也会用 const 修饰，这意味着只要键值对被存储到 map 容器中，其键的值将不能再做任何修改。</p><h4 id="1-头文件"><a href="#1-头文件" class="headerlink" title="1. 头文件"></a>1. 头文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>C++<br></code></pre></td></tr></table></figure><h4 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2. 初始化"></a>2. 初始化</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map&lt;string, <span class="hljs-type">int</span>&gt; myMap;<br><br><span class="hljs-comment">//or</span><br><br>map&lt;string, <span class="hljs-type">int</span>&gt; myMap&#123;&#123;<span class="hljs-string">&quot;gqc&quot;</span>, <span class="hljs-number">114514</span>&#125;, &#123;<span class="hljs-string">&quot;xzj&quot;</span>, <span class="hljs-number">114514</span>&#125;&#125;;<br><span class="hljs-comment">//注意这里初始化的时候不用写等号，和 Java 区别开来</span><br><br>C++<br></code></pre></td></tr></table></figure><h4 id="3-插入元素"><a href="#3-插入元素" class="headerlink" title="3. 插入元素"></a>3. 插入元素</h4><p><a href="http://c.biancheng.net/cplus/">C++</a> <a href="http://c.biancheng.net/stl/">STL</a> map 类模板中对<code>[ ]</code>运算符进行了重载，即根据使用场景的不同，借助<code>[ ]</code>运算符可以实现不同的操作。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span>  <span class="hljs-comment">//map</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    map&lt;string, string&gt; mymap&#123; &#123;<span class="hljs-string">&quot;gqc&quot;</span>,<span class="hljs-string">&quot;114&quot;</span>&#125; &#125;;<br>    <span class="hljs-comment">//获取已存储键值对中，指定键对应的值</span><br>    cout &lt;&lt; mymap[<span class="hljs-string">&quot;gqc&quot;</span>] &lt;&lt; endl;<br> <br>    <span class="hljs-comment">//向 map 容器添加新键值对</span><br>    mymap[<span class="hljs-string">&quot;ycy&quot;</span>] = <span class="hljs-string">&quot;514&quot;</span>;<br> <br>    <span class="hljs-comment">//修改 map 容器已存储键值对中，指定键对应的值</span><br>    mymap[<span class="hljs-string">&quot;gqc&quot;</span>] = <span class="hljs-string">&quot;064&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = mymap.<span class="hljs-built_in">begin</span>(); iter != mymap.<span class="hljs-built_in">end</span>(); ++iter) &#123;<br>        cout &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//======================================</span><br><br><span class="hljs-comment">//输出为</span><br><span class="hljs-comment">//114</span><br><span class="hljs-comment">//ycy 514</span><br><span class="hljs-comment">//gqc 064</span><br><br>C++<br></code></pre></td></tr></table></figure><p> 注意，只有当 map 容器中确实存有包含该指定键的键值对，借助重载的 [ ] 运算符才能成功获取该键对应的值；反之，若当前 map 容器中没有包含该指定键的键值对，则此时使用 [ ] 运算符将不再是访问容器中的元素，而变成了向该 map 容器中增添一个键值对。其中，该键值对的键用 [ ] 运算符中指定的键，其对应的值取决于 map 容器规定键值对中值的数据类型，如果是基本数据类型，则值为 0；如果是 string 类型，其值为 “”，即空字符串（即使用该类型的默认值作为键值对的值）。</p><p>同时，存储的键值对，其本质都是 pair 类模板创建的 pair 对象。因此，下面程序也可以创建出一模一样的 myMap 容器：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">std::map&lt;std::string, <span class="hljs-type">int</span>&gt;myMap&#123;std::<span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;gqc&quot;</span>, <span class="hljs-number">114</span>),std::<span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;ycy&quot;</span>, <span class="hljs-number">514</span>)&#125;;<br><br>C++<br></code></pre></td></tr></table></figure><h4 id="4-获取元素"><a href="#4-获取元素" class="headerlink" title="4. 获取元素"></a>4. 获取元素</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span>      // map</span><br>using namespace std<span class="hljs-comment">;</span><br> <br><span class="hljs-built_in">int</span> main()&#123;<br>    //创建并初始化 map 容器<br>    std::map&lt;std::<span class="hljs-built_in">string</span>, std::<span class="hljs-built_in">string</span>&gt;myMap&#123; &#123;<span class="hljs-string">&quot;gqc&quot;</span>, <span class="hljs-string">&quot;114&quot;</span>&#125;,<br>                                             &#123;<span class="hljs-string">&quot;ycy&quot;</span>, <span class="hljs-string">&quot;514&quot;&quot;&#125;,</span><br><span class="hljs-string">                                             &#123;&quot;</span>grl<span class="hljs-string">&quot;, &quot;</span><span class="hljs-number">1919</span><span class="hljs-string">&quot;&#125; &#125;;</span><br><span class="hljs-string">    string cValue = myMap[&quot;</span>gqc<span class="hljs-string">&quot;];</span><br><span class="hljs-string">    cout &lt;&lt; cValue &lt;&lt; endl;</span><br><span class="hljs-string">    return 0;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">C++</span><br></code></pre></td></tr></table></figure><h4 id="5-迭代元素"><a href="#5-迭代元素" class="headerlink" title="5. 迭代元素"></a>5. 迭代元素</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span>      // pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>       // string</span><br>using namespace std<span class="hljs-comment">;</span><br> <br><span class="hljs-built_in">int</span> main() &#123;<br>    //创建并初始化 map 容器<br>    map&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;myMap&#123; &#123;<span class="hljs-string">&quot;gqc&quot;</span>, <span class="hljs-string">&quot;114&quot;</span>&#125;,<br>                              &#123;<span class="hljs-string">&quot;ycy&quot;</span>, <span class="hljs-string">&quot;514&quot;&quot;&#125;,</span><br><span class="hljs-string">                              &#123;&quot;</span>grl<span class="hljs-string">&quot;, &quot;</span><span class="hljs-number">1919</span><span class="hljs-string">&quot;&#125;&#125;;</span><br><span class="hljs-string">    //调用 begin()/end() 组合，遍历 map 容器</span><br><span class="hljs-string">    for (map&lt;string, string&gt;::iterator iter = myMap.begin(); iter != myMap.end(); ++iter) &#123;</span><br><span class="hljs-string">        cout &lt;&lt; iter-&gt;first &lt;&lt; &quot;</span> <span class="hljs-string">&quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    return 0;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">C++</span><br></code></pre></td></tr></table></figure><h4 id="6-删除元素"><a href="#6-删除元素" class="headerlink" title="6. 删除元素"></a>6. 删除元素</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sas">删除键为bfff指向的元素<br>cmap.erase(<span class="hljs-string">&quot;bfff&quot;</span>);<br><br> <br>删除迭代器 <span class="hljs-keyword">key</span>所指向的元素<br>map&lt;string,int&gt;::iterator <span class="hljs-keyword">key</span> = cmap.find(<span class="hljs-string">&quot;mykey&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">key</span>!=cmap.<span class="hljs-keyword">end</span>())<br>&#123;<br>    cmap.erase(<span class="hljs-keyword">key</span>);<br>&#125;<br> <br>删除所有元素<br>cmap.erase(cmap.begi<span class="hljs-meta">n</span>(), cmap.<span class="hljs-keyword">end</span>());<br><br>C++<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++ Basic</category>
      
      <category>STL Containers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ string</title>
    <link href="/2022/10/23/C++%20Basic/STL%20Containers/C++%20string/"/>
    <url>/2022/10/23/C++%20Basic/STL%20Containers/C++%20string/</url>
    
    <content type="html"><![CDATA[<h3 id="1-头文件"><a href="#1-头文件" class="headerlink" title="1. 头文件"></a>1. 头文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span> <span class="hljs-comment">//这个可有可无</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br></code></pre></td></tr></table></figure><p><code>&lt;iostream&gt;</code>需要用到<code>std::ios_base</code>类型，<code>std::ios_base</code>有个成员函数的返回类型是<code>std::locale</code>，<code>std::locale</code>定义在<code>&lt;locale&gt;</code>头文件，<code>&lt;locale&gt;</code>中还有一个叫做<code>std::numpunct</code>的类模板，<code>std::numpunct</code>有一个成员函数的返回类型是<code>std::string</code>。</p><p>这就是为什么包含了<code>&lt;iostream&gt;</code>可以使用<code>std::string</code>。但可以看出这一串联系有多么间接和不可靠。</p><p><a href="https://www.zhihu.com/question/270726509/answer/356155720">为什么可以不加#include </a></p><h3 id="2-声明一个C-字符串"><a href="#2-声明一个C-字符串" class="headerlink" title="2. 声明一个C++字符串"></a>2. 声明一个C++字符串</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s; <span class="hljs-comment">//调用 string 类的默认构造函数，不传入任何参数，生成一个空字符串 s </span><br><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(str)</span> <span class="hljs-comment">//拷贝构造函数 生成str的复制品 </span></span><br><span class="hljs-function"></span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(str,stridx)</span> <span class="hljs-comment">//将字符串str内“始于位置stridx”的部分当 作字符串的初值 </span></span><br><span class="hljs-function"></span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(str,stridx,strlen)</span> <span class="hljs-comment">//将字符串str内“始于stridx且长度 顶多strlen”的部分作为字符串的初值 </span></span><br><span class="hljs-function"></span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(cstr)</span> <span class="hljs-comment">//将C字符串作为s的初值 </span></span><br><span class="hljs-function"></span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(chars,chars_len)</span> <span class="hljs-comment">//将C字符串前chars_len个字符作为 字符串s的初值。 </span></span><br><span class="hljs-function"></span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(num,c)</span> <span class="hljs-comment">//生成一个字符串，包含num个c字符 </span></span><br><span class="hljs-function"></span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(beg,end)</span> <span class="hljs-comment">//以区间beg;end(不包含end)内的字符作 为字符串s的初值 </span></span><br><span class="hljs-function"></span><br><span class="hljs-function">s.~<span class="hljs-title">string</span><span class="hljs-params">()</span> <span class="hljs-comment">//销毁所有字符，释放内存</span></span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><h3 id="3-相关函数"><a href="#3-相关函数" class="headerlink" title="3. 相关函数"></a>3. 相关函数</h3><h4 id="3-1-C-字符串和C字符串的转换"><a href="#3-1-C-字符串和C字符串的转换" class="headerlink" title="3.1. C++字符串和C字符串的转换"></a>3.1. C++字符串和C字符串的转换</h4><p>C++ 提供的由 C++ 字符串得到对应的<code>C_string的</code>方法是使用 <code>data()、c_str()</code> 和<code>copy()</code>，其中，<code>data()</code>以字符数组的形式返回字符 串内容，但并不添加<code>&#39;/0&#39;</code>。<code>c_str()</code> 返回一个以 <code>‘/0&#39;</code> 结尾的字符数组， 而 <code>copy()</code> 则把字符串的内容复制或写入既有的 <code>c_string</code> 或 字符数组内。C++字符串并不以<code>&#39;/0&#39;</code>结尾。</p><h4 id="3-2-大小和容量函数"><a href="#3-2-大小和容量函数" class="headerlink" title="3.2. 大小和容量函数"></a>3.2. 大小和容量函数</h4><p>一个C++字符串存在三种大小：</p><ul><li>现有的字符数，函数是<code>size()</code>和 <code>length()</code>，他们等效。<code>empty()</code>用来检查字符串是否为空。</li><li><code>max_size()</code> 这个大小是指当前C++字符串最多能包含的字符数， 很可能和机器本身的限制或者字符串所在位置连续内存的大小有关 系。我们一般情况下不用关心他，应该大小足够我们用的。但是不 够用的话，会抛出<code>length_error</code>异常</li><li><code>capacity()</code>重新分配内存之前 <code>string</code> 所能包含的最大字符数。这里另一个需要指出的是 <code>reserve()</code> 函数，这个函数为 <code>string</code>重新分配内存。重新分配的大小由其参数 决定， 默认参数为0，这时候会对<code>string</code>进行非强制性缩减。</li></ul><h4 id="3-3-元素存取"><a href="#3-3-元素存取" class="headerlink" title="3.3. 元素存取"></a>3.3. 元素存取</h4><p>我们可以使用下标操作符[]和函数at()对元素包含的字符进行访 问。但是应该注意的是操作符[]并不检查索引是否有效（有效索引 <code>0~str.length()</code>），如果索引失效，会引起未定义的行为。而<code>at()</code>会 检查，如果使用 <code>at()</code> 的时候索引无效，会抛出 <code>out_of_range</code> 异常。</p><p>有一个例外不得不说，<code>const string a;</code> 的操作符[]对索引值是 <code>a.length()</code> 仍然有效，其返回值是<code>&#39;/0&#39;</code>，而<code>at()</code> 对索引值为 <code>a.length()</code> 仍然会抛出异常。其他的各种情况，<code>a.length()</code> 索引都是无效的。举例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">const</span> string <span class="hljs-title">Cstr</span><span class="hljs-params">(“<span class="hljs-type">const</span> string”)</span></span>; <br><br><span class="hljs-function">string <span class="hljs-title">Str</span><span class="hljs-params">(“string”)</span></span>; <br><br>Str[<span class="hljs-number">3</span>]; <span class="hljs-comment">//ok </span><br><br>Str.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">//ok </span><br><br>Str[<span class="hljs-number">100</span>]; <span class="hljs-comment">//未定义的行为 </span><br><br>Str.<span class="hljs-built_in">at</span>(<span class="hljs-number">100</span>); <span class="hljs-comment">//throw out_of_range</span><br><br>Str[Str.<span class="hljs-built_in">length</span>()] <span class="hljs-comment">//未定义行为 </span><br>  <br>Cstr[Cstr.<span class="hljs-built_in">length</span>()] <span class="hljs-comment">//返回 ‘/0&#x27; </span><br>  <br>Str.<span class="hljs-built_in">at</span>(Str.<span class="hljs-built_in">length</span>());<span class="hljs-comment">//throw out_of_range </span><br><br>Cstr.<span class="hljs-built_in">at</span>(Cstr.<span class="hljs-built_in">length</span>()); <span class="hljs-comment">//throw out_of_range </span><br><br></code></pre></td></tr></table></figure><p>不赞成类似于下面的引用或指针赋值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span>&amp; r=s[<span class="hljs-number">2</span>]; <br><span class="hljs-type">char</span>* p= &amp;s[<span class="hljs-number">3</span>];<br><br></code></pre></td></tr></table></figure><p>因为一旦发生重新分配，r,p立即失效。</p><p>避免的方法就是不使用。</p><h4 id="3-4-比较函数"><a href="#3-4-比较函数" class="headerlink" title="3.4. 比较函数"></a>3.4. 比较函数</h4><p>C ++字符串支持常见的比较操作符 (&gt;, &gt;=, &lt;, &lt;=, ==, !=)，甚至 支持<code>string</code>与<code>C_string</code>的比较(如 <code>str &lt; &quot;hello&quot;</code>)。在使用 &gt;, &gt;=, &lt;, &lt;= 这些操作符的时候是根据 “当前字符特性” 将字符按字典顺序进行逐一比较。字典排序靠前的字符小，比较的顺序是从前向后比较，遇到不相等的字符就按这个位置上的两个字符的比较结果确定两个字符串的大小。同时，<code>string (“aaaa”)&lt;string(“aaaaaa”)</code>。</p><p>另一个功能强大的比较函数是成员函数 <code>compare()</code>。他支持多参数处理，支持用索引值和长度定位子串来进行比较。他返回一个整数来表示比较结果，返回值意义如下：</p><ul><li>0 - 相等</li><li>&gt; 0 - 大于</li><li>&lt; 0 - 小于</li></ul><p>举例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(“abcd”)</span></span>; <br><br>s.<span class="hljs-built_in">compare</span>(“abcd”); <span class="hljs-comment">//返回0 </span><br><br>s.<span class="hljs-built_in">compare</span>(“dcba”); <span class="hljs-comment">//返回一个小于0的值 </span><br><br>s.<span class="hljs-built_in">compare</span>(“ab”); <span class="hljs-comment">//返回大于0的值 </span><br><br>s.<span class="hljs-built_in">compare</span>(s); <span class="hljs-comment">//相等</span><br><br>s.<span class="hljs-built_in">compare</span>(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,s,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">//用”ab”和”cd”进行比较 小于零 </span><br><br>s.<span class="hljs-built_in">compare</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,”bcx”,<span class="hljs-number">2</span>); <span class="hljs-comment">//用”bc”和”bc”比较</span><br><br></code></pre></td></tr></table></figure><h4 id="3-5-更改内容"><a href="#3-5-更改内容" class="headerlink" title="3.5. 更改内容"></a>3.5. 更改内容</h4><h5 id="1-赋值"><a href="#1-赋值" class="headerlink" title="1. 赋值"></a>1. 赋值</h5><ul><li>第一个赋值方法当然是使用操作符<code>=</code>，新值可以是 <code>string</code>(如：<code>s = ns</code>) 、<code>c_string</code>(如：<code>s = ”gaint”</code>)甚至单一字符（如： `s = ‘j’ ）。</li><li>还可以使用成员函数<code>assign()</code>，这个成员函数可以使你更 灵活的对字符串赋值。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">s.<span class="hljs-built_in">assign</span>(str);<br><br>s.<span class="hljs-built_in">assign</span>(str,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//如果str是”iamangel” 就是把”ama”赋给字符串 </span><br><br>s.<span class="hljs-built_in">assign</span>(str,<span class="hljs-number">2</span>,string::npos);<span class="hljs-comment">//把字符串str从索引值2开始到结尾赋 给s </span><br><br>s.<span class="hljs-built_in">assign</span>(“gaint”); <span class="hljs-comment">//不说 </span><br><br>s.<span class="hljs-built_in">assign</span>(“nico”,<span class="hljs-number">5</span>);<span class="hljs-comment">//把&#x27;n&#x27; ‘I&#x27; ‘c&#x27; ‘o&#x27; ‘/0&#x27;赋给字符串 </span><br><br>s.<span class="hljs-built_in">assign</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;x&#x27;</span>);<span class="hljs-comment">//把五个x赋给字符串</span><br><br></code></pre></td></tr></table></figure><ul><li><p>清空字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">s=””;<br>s.<span class="hljs-built_in">clear</span>();<br>s.<span class="hljs-built_in">erase</span>();<br><br></code></pre></td></tr></table></figure></li></ul><h5 id="2-增加"><a href="#2-增加" class="headerlink" title="2. 增加"></a>2. 增加</h5><ul><li>增加在末尾</li></ul><p> 函数有 +=、 append()、push_back()。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++">s += str;<span class="hljs-comment">//加个字符串 </span><br><br>s += <span class="hljs-string">&quot;my name is jiayp&quot;</span>;<span class="hljs-comment">//加个C字符串 </span><br><br>s += <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">//加个字符 </span><br><br>s.<span class="hljs-built_in">append</span>(str); <br><br>s.<span class="hljs-built_in">append</span>(str, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">//同前面的函数参数assign的解释 </span><br><br>s.<span class="hljs-built_in">append</span>(str, <span class="hljs-number">2</span>, string::npos);<br><br>s.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;my name is jiayp&quot;</span>); <br><br>s.<span class="hljs-built_in">append</span>(“nico”, <span class="hljs-number">5</span>); <br><br>s.<span class="hljs-built_in">append</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;x&#x27;</span>); <br><br>s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">//这个函数只能增加单个字符对STL熟悉的理解起 来很简单</span><br></code></pre></td></tr></table></figure><ul><li>添加在中间的位置</li></ul><p> 这时候可以用 <code>insert()</code> 函数，这个函数需要你指定一个安插位置的索引，被插入的字符串将放在这个索引的后面。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>,”my name”); <br><br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>,str); <br></code></pre></td></tr></table></figure><p> 这种形式的 <code>insert()</code>函数不支持传入单个字符，这时的单个字符必须写成字符串形式。为了插 入单个字符，insert()函数提供了两个对插入单个字符操作的重载函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">insert</span>(size_type index,size_type num,chart c)<br><br><span class="hljs-built_in">insert</span>(iterator pos,size_type num, chart c)<br></code></pre></td></tr></table></figure><p> 其中 <code>size_type</code> 是无符号整数，<code>iterator</code> 是<code>char*</code>, 所以, 这么调用<code>insert</code> 函数是不行的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;j&#x27;</span>);<br></code></pre></td></tr></table></figure><p> 必须这么写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">insert</span>((string::size_type)<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;j&#x27;</span>);<br></code></pre></td></tr></table></figure><p> <code>string</code> 有很多操作是使用STL的迭代器的，他也尽量做得和STL 靠近。</p><h5 id="3-删除"><a href="#3-删除" class="headerlink" title="3. 删除"></a>3. 删除</h5><p>删除函数也有若干种</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s=”il8n”; <br><br>s.<span class="hljs-built_in">replace</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,”nternationalizatio”);<span class="hljs-comment">//从索引1开始的2个替换成后面的C_string </span><br><br>s.<span class="hljs-built_in">erase</span>(<span class="hljs-number">13</span>);<span class="hljs-comment">//从索引13开始往后全删除 </span><br><br>s.<span class="hljs-built_in">erase</span>(<span class="hljs-number">7</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//从索引7开始往后删5个</span><br></code></pre></td></tr></table></figure><h4 id="3-6-提取字串"><a href="#3-6-提取字串" class="headerlink" title="3.6. 提取字串"></a>3.6. 提取字串</h4><p>题取子串的函数是：<code>substr()</code>, 形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">s.<span class="hljs-built_in">substr</span>();<span class="hljs-comment">//返回s的全部内容 </span><br><br>s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">11</span>);<span class="hljs-comment">//从索引11往后的子串 </span><br><br>s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<span class="hljs-comment">//从索引5开始6个字符</span><br></code></pre></td></tr></table></figure><p>值得注意的是，C++ 中的<code>substr()</code>第二个参数是长度，而 Java 中 <code>substr()</code>的两个参数分别表示前闭后开区间的两个端点</p><h4 id="3-7-输入输出"><a href="#3-7-输入输出" class="headerlink" title="3.7. 输入输出"></a>3.7. 输入输出</h4><p>更具体的输入输出可以看[这篇文章](<a href="https://naturalifica.top/2022/10/23/C++">https://naturalifica.top/2022/10/23/C++</a> Basic/考试必备/C++ IO/)</p><ul><li>&gt;&gt; 从输入流读取一个string。</li><li>&lt;&lt; 把一个string写入输出流。</li><li>getline(), 他从输入流读取一行内容，直到遇到分行符或到了文件尾。</li></ul><h4 id="3-8-搜索与查找"><a href="#3-8-搜索与查找" class="headerlink" title="3.8. 搜索与查找"></a>3.8. 搜索与查找</h4><p>查找函数很多，功能也很强大，包括了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">find</span>()<br>  <br><span class="hljs-built_in">rfind</span>()<span class="hljs-comment">//反过来找</span><br>  <br><span class="hljs-built_in">find_first_of</span>()<br>  <br><span class="hljs-built_in">find_last_of</span>()<br>  <br><span class="hljs-built_in">find_first_not_of</span>()<br>  <br><span class="hljs-built_in">find_last_not_of</span>()<br><br></code></pre></td></tr></table></figure><p>这些函数返回符合搜索条件的字符区间内的第一个字符的索引，没找到目标就返回<code>npos</code>。所有的函数的参数<strong>说明如下：</strong></p><p>第一个参数是被搜寻的对象。第二个参数（可有可无）指出string内的搜寻起点索引，第三个参数（可有可无）指出搜寻的字符个数.</p><p>最后再说说<code>npos</code>的含义，<code>string::npos</code>的类型是<code>string::size_type</code>,所以，一旦需要把一个索引与<code>npos</code>相比，这个索引值必须是<code>string::size)type</code> 类型的，更多的情况下，我们可以直接把函数和<code>npos</code>进行比较（如：<code>if(s.find(“jia”)== string::npos</code>)</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="https://blog.csdn.net/samkieth/article/details/50876347">Cpp–string常用函数用法总结</a></li><li><a href="https://www.zhihu.com/question/270726509/answer/356155720">C++ 使用字符串一定要 #include吗?</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>C++ Basic</category>
      
      <category>STL Containers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tree</title>
    <link href="/2022/10/20/Data%20Structure/Tree/"/>
    <url>/2022/10/20/Data%20Structure/Tree/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Tree-的相关定义"><a href="#1-Tree-的相关定义" class="headerlink" title="1. Tree 的相关定义"></a>1. Tree 的相关定义</h3><h4 id="1-1-Tree-的定义"><a href="#1-1-Tree-的定义" class="headerlink" title="1.1. Tree 的定义"></a>1.1. Tree 的定义</h4><p><strong>满足下列三个条件的</strong>数据结构叫做树</p><ol><li><p>A tree T is a collection of nodes(element). </p></li><li><p>The collection can be empty.</p></li><li><p>Otherwise, a tree consists of a distinguished node r , called the root, and zero or more nonemppty (sub) trees $T_1 , T_2 , ……, T_k$.</p></li></ol><h4 id="1-2-Tree-的度，叶，枝，层次和高度"><a href="#1-2-Tree-的度，叶，枝，层次和高度" class="headerlink" title="1.2. Tree 的度，叶，枝，层次和高度"></a>1.2. Tree 的度，叶，枝，层次和高度</h4><ol><li><p>Degree of an elememts(nodes): the number of children it has. </p></li><li><p>Degree of a tree: the maximum of its element degrees. </p></li><li><p>Leaf: element whose degree is 0.</p></li><li><p>Branch: element whose degree is not 0.</p></li><li><p>Level: the level of root is 0.</p><ul><li>the level of an element = the level of its parent + 1.</li></ul></li><li><p>Depth(Height) of a tree: the maximum level of its elements.</p></li></ol><h4 id="1-3-Tree-的存储方法"><a href="#1-3-Tree-的存储方法" class="headerlink" title="1.3. Tree 的存储方法"></a>1.3. Tree 的存储方法</h4><ol><li>广义表表示法</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span>(<span class="hljs-selector-tag">b</span>(f,g),c,<span class="hljs-built_in">d</span>(h,<span class="hljs-selector-tag">i</span>,j),e)<br></code></pre></td></tr></table></figure><ol start="2"><li>双亲表示法</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><ol start="3"><li>左子女-右兄弟表示法</li></ol><h3 id="2-Binary-Tree"><a href="#2-Binary-Tree" class="headerlink" title="2. Binary Tree"></a>2. Binary Tree</h3><h4 id="2-1-Binary-Tree-的定义"><a href="#2-1-Binary-Tree-的定义" class="headerlink" title="2.1. Binary Tree 的定义"></a>2.1. Binary Tree 的定义</h4><p><strong>满足下列两个条件</strong>的叫做二叉树</p><ol><li><p>Definition: A binary tree t is a finite (possibly empty) collection of elements. </p></li><li><p>When the binary tree is not empty: </p><ul><li><p>It has a root element </p></li><li><p>The remaining elements(if any) are partitioned into two binary trees, which are called the left and right subtrees of t. </p></li></ul></li></ol><h4 id="2-2-Binary-Tree-和一般意义的-Tree-有什么区别"><a href="#2-2-Binary-Tree-和一般意义的-Tree-有什么区别" class="headerlink" title="2.2. Binary Tree 和一般意义的 Tree 有什么区别"></a>2.2. Binary Tree 和一般意义的 Tree 有什么区别</h4><ul><li><p>Each element in a binary tree has exactly two subtrees(one or both of these subtrees may be empty). </p><ul><li>Each element in a tree can have any number of subtrees. </li></ul></li><li><p>The subtrees of each element in a binary tree are ordered. That is, we distinguish between the left and the right subtrees. </p><ul><li>The subtrees in a tree are unordered.</li></ul></li></ul><h4 id="2-3-Binary-Tree-的性质"><a href="#2-3-Binary-Tree-的性质" class="headerlink" title="2.3. Binary Tree 的性质"></a>2.3. Binary Tree 的性质</h4><ul><li>The drawing of every binary tree with n elements (n&gt;0) has exactly n-1 edges.<ul><li>因为二叉树是恰好连通的</li></ul></li><li>The number of elements at level $i$ is at most  $2^i \ (i \geq0)$.</li><li>A binary tree of height $h, h\geq0$ , has at least $h+1$  and at most $2^{h+1}–1$ elements in it.</li></ul><p>$$<br>\sum_{i = 0}^h2^i = 2^{h+1}-1<br>$$</p><ul><li>If number of leaves is $n_0$ , and the number of the 2 degree elements is $n_2$ , then $n_0=n_2+1$. </li><li>The height of a binary tree that contains $n (n \geq 0)$ element is at most $n-1$ and at least $[log2 (n+1)]-1$ <ul><li>proof: Since there must be at least one element at each level, the height cannot exceed $n-1$. </li><li>From property 3,we know $n \leq 2^h+1 -1$, so, $h \geq log2 (n+1)-1$, since h is an integer,we get $h=[log2 (n+1)]-1$</li></ul></li><li>Let $i, 0\leq i \leq n-1$, be the number assigned to an element of a complete binary tree. The following are true. <ul><li>if $i=0$, then this element is the root of the binary tree. if $i&gt;0$,then the parent of this element has been assigned the number $[\frac{i - 1}{2}]$</li><li>if $2 \times i+1 \geq n$, then this element has no left child. Otherwise,its left child has been assigned the number $2\times i + 1$.</li><li>if $2 \times i+2\geq n$, then this element has no right child, Otherwise its right child has been assigned the number $2 \times i + 2$.</li></ul></li></ul><h4 id="2-4-特殊类型的-Binary-Tree"><a href="#2-4-特殊类型的-Binary-Tree" class="headerlink" title="2.4. 特殊类型的 Binary Tree"></a>2.4. 特殊类型的 Binary Tree</h4><h5 id="2-4-1-Full-Binary-Tree"><a href="#2-4-1-Full-Binary-Tree" class="headerlink" title="2.4.1 Full Binary Tree"></a>2.4.1 Full Binary Tree</h5><ul><li>A binary tree of height h that contains exactly $2^h+1 -1$ elements is called a full binary tree.</li></ul><h5 id="2-4-2-Complete-binary-tree"><a href="#2-4-2-Complete-binary-tree" class="headerlink" title="2.4.2  Complete binary tree"></a>2.4.2  Complete binary tree</h5><ul><li>Suppose we number the elements in a full binary tree of height h using the number 1 through $2^{h+1} - 1$. We began at level $0$ and go down to level $h$. Within levels the elements are numbered left to right. Suppose we delete the $k$ elements numbered $2^{h+1} -i$, $1 \leq i \leq k$, the resulting binary tree is called a complete binary tree.</li><li>也就是说在广度优先的基础上要使这个二叉树尽可能的满</li></ul><h4 id="2-5-Binary-Tree-的物理层"><a href="#2-5-Binary-Tree-的物理层" class="headerlink" title="2.5. Binary Tree 的物理层"></a>2.5. Binary Tree 的物理层</h4><h5 id="2-5-1-Array-实现"><a href="#2-5-1-Array-实现" class="headerlink" title="2.5.1 Array 实现"></a>2.5.1 Array 实现</h5><ol><li>The binary tree to be represented is regarded as a complete binary tree with some missing elements.<ul><li>如图</li></ul></li></ol><pre><code class=" mermaid">graph TD0((0))--&gt;1((1))--&gt;3((3))--&gt;7((7))1((1))--&gt;4((4))0((0))--&gt;2((2))--&gt;5((5))2((2))--&gt;6((6))</code></pre><ol start="2"><li>这样表示的缺点<ul><li>如果这样的二叉树离完全二叉树很远，那么会很浪费空间</li></ul></li></ol><h5 id="2-5-2-LinkedList-实现"><a href="#2-5-2-LinkedList-实现" class="headerlink" title="2.5.2 LinkedList 实现"></a>2.5.2 LinkedList 实现</h5><ol><li>每一个节点存储三个数据<ul><li>LeftTree （如果不存在的话就是 nullptr）</li><li>data</li><li>RightTree (如果不存在的话就是 nullptr)</li></ul></li></ol><ul><li><p>代码表示</p><ul><li>Java （更具体的）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryNode</span>&#123;<br>  <br>  BinaryNode left;<br>  BinaryNode right;<br>  Object element;<br>  <br>  <br>  BinaryNode()&#123;<br>    letf = right = <span class="hljs-number">0</span>;<br>  &#125;<br>  BinaryNode(Object e)&#123;<br>    element = e;<br>    left = right = <span class="hljs-number">0</span>;<br>  &#125;<br>  BinaryNode(Object e, BinaryNode l, BinaryNode r)&#123;<br>    element = e;<br>    left = l;<br>    right = r;<br>  &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * • Create()</span><br><span class="hljs-comment">*• IsEmpty()</span><br><span class="hljs-comment">*• Root(x)</span><br><span class="hljs-comment">*• MakeTree(root, left, right)</span><br><span class="hljs-comment">*• BreakTree(root, left, right)</span><br><span class="hljs-comment">*• PreOrder</span><br><span class="hljs-comment">*• InOrder</span><br><span class="hljs-comment">*• PostOrder</span><br><span class="hljs-comment">*• LevelOrder</span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>C++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* binaty.h</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTree</span>&#123; <br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">BinaryTree</span>()&#123;root=<span class="hljs-number">0</span>;&#125;;<br>~<span class="hljs-built_in">BinaryTree</span>()&#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span>&#123;<br>    <span class="hljs-keyword">return</span> ((root)?<span class="hljs-literal">false</span>:<span class="hljs-literal">true</span>);<br>  &#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Root</span><span class="hljs-params">(T&amp; x)</span><span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MakeTree</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; data, BinaryTree&lt;T&gt;&amp; leftch, BinaryTree&lt;T&gt;&amp; rightch)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BreakTree</span><span class="hljs-params">(T&amp; data , BinaryTree&lt;T&gt;&amp; leftch, BinaryTree&lt;T&gt;&amp; rightch)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(<span class="hljs-type">void</span>(*visit)(BinaryNode&lt;T&gt;*u))</span></span>&#123;<br>    <span class="hljs-built_in">PreOrder</span>(visit, root);<br>  &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(<span class="hljs-type">void</span>(*visit)(BinaryNode&lt;T&gt; *u))</span></span>&#123;<br>    <span class="hljs-built_in">InOrder</span>(visit, root);<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 这里的函数参数 void(*visit) 是函数指针</span><br><span class="hljs-comment">  * 这个指针指向一段代码，而不是一个数据</span><br><span class="hljs-comment">  * 这个指针的作用是执行指向指针的代码</span><br><span class="hljs-comment">  * @return nothing</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * The function visit is used as parameter to the traversal methods,so that different operations can be</span><br><span class="hljs-comment">* implemented easily</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrder</span> <span class="hljs-params">(<span class="hljs-type">void</span>(*visit)(BinaryNode&lt;T&gt;*u))</span></span>&#123;<br>    <span class="hljs-built_in">PostOrder</span>(visit, root);<br>  &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(<span class="hljs-type">void</span>(*visit)(BinaryNode&lt;T&gt; *u))</span></span>;<br><span class="hljs-keyword">private</span>:<br>BinaryNode&lt;T&gt;* root;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(<span class="hljs-type">void</span>(*visit)(BinaryNode&lt;T&gt; *u), BinaryNode&lt;T&gt;*t)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(<span class="hljs-type">void</span>(*visit)(BinaryNode&lt;T&gt; *u), BinaryNode&lt;T&gt;*t)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(<span class="hljs-type">void</span>(*visit) (BinaryNode&lt;T&gt; *u), BinaryNode&lt;T&gt;*t)</span></span>;<br>&#125;;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 下面是一些成员函数的实现</span><br><span class="hljs-comment">*/</span><br><br>Template&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-type">void</span> BinaryTree&lt;T&gt;::<span class="hljs-built_in">MakeTree</span>(<span class="hljs-type">const</span> T&amp; data, BinaryTree&lt;T&gt;&amp; leftch, BinaryTree&lt;T&gt;&amp; rightch)&#123; <br>  root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BinaryNode</span>&lt;T&gt;(data, leftch.root, rightch.root);<br>  leftch.root = rightch.root = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-type">void</span> BinaryTree&lt;T&gt;::<span class="hljs-built_in">BreakTree</span>(T&amp; data, BinaryTree&lt;T&gt;&amp; leftch, BinaryTree&lt;T&gt;&amp; rightch)&#123; <br>  <span class="hljs-keyword">if</span>(!root)&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-built_in">BadInput</span>();<br>  &#125;<span class="hljs-comment">//tree empty</span><br>data = root.element;<br>leftch.root = root.Left;<br>rightch.root = root.Right;<br><span class="hljs-keyword">delete</span> root;<br>root = <span class="hljs-number">0</span>;<br>&#125; <br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* main.cpp</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> “binary.h”</span><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; <br>BinaryTree&lt;<span class="hljs-type">int</span>&gt; a, x, y, z;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 这是四个二叉树</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ct</span><span class="hljs-params">(BinaryTreeNode&lt;T&gt; *t)</span></span>&#123;<br>  count++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123; <br>  a.<span class="hljs-built_in">MakeTree</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  z.<span class="hljs-built_in">MakeTree</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  x.<span class="hljs-built_in">MakeTree</span>(<span class="hljs-number">3</span>, a, z);<br>  y.<span class="hljs-built_in">MakeTree</span>(<span class="hljs-number">4</span>, x, <span class="hljs-number">0</span>);<br>  y.<span class="hljs-built_in">PreOrder</span>(ct);<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 在遍历所有节点的同时，调用一次 ct（ct只是一个计数器）</span><br><span class="hljs-comment">  */</span><br>  cout &lt;&lt; count &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="2-5-3-Cursor-静态链表-实现"><a href="#2-5-3-Cursor-静态链表-实现" class="headerlink" title="2.5.3 Cursor (静态链表) 实现"></a>2.5.3 Cursor (静态链表) 实现</h5><h4 id="2-6-Binary-Tree-的遍历"><a href="#2-6-Binary-Tree-的遍历" class="headerlink" title="2.6. Binary Tree 的遍历"></a>2.6. Binary Tree 的遍历</h4><p>Each element is visited exactly once </p><ul><li><p>V：表示访问一个结点 </p></li><li><p>L：表示访问V的左子树 </p></li><li><p>R：表示访问V的右子树 </p></li></ul><p>那么有六种情况：VLR  LVR  LRV  VRL  RVL  RLV</p><p>一般地，我们都只考虑 L 在 R 之前的情况，否则可以将这个二叉树的每一个节点的子节点都左右交换，形成它的反二叉树</p><p>因此树的遍历包括这四种情况</p><ul><li>Preorder （VLR）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br></code></pre></td></tr></table></figure><ul><li>Inorder （LVR）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//非递归的写法，但是脑袋里要一直有递归的过程</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Inorder</span><span class="hljs-params">(BinaryNode &lt;T&gt; * t)</span></span>&#123; <br>  stack&lt;BinaryNode&lt;T&gt;*&gt; <span class="hljs-built_in">s</span>(<span class="hljs-number">10</span>);<br>BinaryNode&lt;T&gt; * p = t;<br><span class="hljs-keyword">for</span> (;;)&#123;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)&#123; <br>      s.<span class="hljs-built_in">push</span>(p); <br>      p = p-&gt;Left; <br>    &#125;<br><span class="hljs-keyword">if</span> (!s.<span class="hljs-built_in">IsEmpty</span>())&#123; <br>    p = s.<span class="hljs-built_in">pop</span>();<br>cout &lt;&lt; p-&gt;element;<br>p = p-&gt;Right;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Postorder （LRV）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//和中序遍历的区别在于，要明确左右子树都要已经访问过了，再把当前节点弹出</span><br><span class="hljs-comment">//tag 的作用就在于此</span><br><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">StkNode</span>&#123; <br>  BinaryNode &lt;T&gt; * ptr;<br><span class="hljs-type">int</span> tag;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Postorder</span><span class="hljs-params">(BinaryNode &lt;T&gt; * t)</span></span>&#123; <br>  stack &lt;StkNode&lt;T&gt;&gt;<span class="hljs-built_in">s</span>(<span class="hljs-number">10</span>);<br>StkNode&lt;T&gt; Cnode;<br>BinaryNode&lt;T&gt; * p = t;<br><span class="hljs-keyword">for</span>(;;)&#123; <br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>)&#123; <br>      Cnode.ptr = p; <br>      Cnode.tag = <span class="hljs-number">0</span>; <br>      s.<span class="hljs-built_in">push</span>(Cnode);<br>p = p-&gt;Left;<br>&#125;<br>    Cnode = s.<span class="hljs-built_in">pop</span>(); <br>    p = Cnode.ptr;<br>     <span class="hljs-comment">//从右子树回来</span><br><span class="hljs-keyword">while</span> ( Cnode.tag = = <span class="hljs-number">1</span>) &#123;<br>      cout &lt;&lt; p-&gt;element;<br><span class="hljs-keyword">if</span>(!s.<span class="hljs-built_in">IsEmpty</span>())&#123; <br>        Cnode = s.<span class="hljs-built_in">pop</span>(); <br>        p = Cnode.ptr; <br>      &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>&#125;<br>   Cnode.tag = <span class="hljs-number">1</span>; <br>    s.<span class="hljs-built_in">push</span>(Cnode); <br>    p = p-&gt;Right; <span class="hljs-comment">//从左子树回来</span><br>&#125;<span class="hljs-comment">//for</span><br>&#125; <br></code></pre></td></tr></table></figure><ul><li>Level order（一层一层地遍历）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(BinaryNode&lt;T&gt;* t)</span></span>&#123; <br>  LinkedQueue&lt;BinaryNode&lt;T&gt;*&gt; Q;<br><span class="hljs-keyword">while</span>(t)&#123;<br><span class="hljs-built_in">visit</span>(t); <span class="hljs-comment">//visit t</span><br>  <span class="hljs-keyword">if</span>(t-&gt;Left) Q.<span class="hljs-built_in">Add</span>(t-&gt;Left);<br>  <span class="hljs-keyword">if</span>(t-&gt;Right) Q.<span class="hljs-built_in">Add</span>(t-&gt;Right);<br>  <span class="hljs-keyword">try</span>&#123;Q.<span class="hljs-built_in">Delete</span>(t);&#125;<br><span class="hljs-built_in">catch</span>(OutOfBounds)&#123;<span class="hljs-keyword">return</span>;&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-7-Bianry-Tree-的实现方式"><a href="#2-7-Bianry-Tree-的实现方式" class="headerlink" title="2.7. Bianry Tree 的实现方式"></a>2.7. Bianry Tree 的实现方式</h4><h5 id="1-利用MakeTree函数"><a href="#1-利用MakeTree函数" class="headerlink" title="1. 利用MakeTree函数"></a>1. 利用MakeTree函数</h5><h5 id="2-利用先序、中序唯一的构造一棵二叉树"><a href="#2-利用先序、中序唯一的构造一棵二叉树" class="headerlink" title="2. 利用先序、中序唯一的构造一棵二叉树"></a>2. 利用先序、中序唯一的构造一棵二叉树</h5><ul><li><h5 id="先序：ABDCEGFHI"><a href="#先序：ABDCEGFHI" class="headerlink" title="先序：ABDCEGFHI"></a>先序：ABDCEGFHI</h5></li><li><h5 id="中序：DBAEGCHFI-A-B-C-D-E-F-G-H-I"><a href="#中序：DBAEGCHFI-A-B-C-D-E-F-G-H-I" class="headerlink" title="中序：DBAEGCHFI A B C D E F G H I"></a>中序：DBAEGCHFI A B C D E F G H I</h5></li></ul><h5 id="3-利用二叉树的广义表表示来构造一棵二叉树-A-B-D-C-E-G-F-H-I-A-B-C-D-E-F-G-H-I"><a href="#3-利用二叉树的广义表表示来构造一棵二叉树-A-B-D-C-E-G-F-H-I-A-B-C-D-E-F-G-H-I" class="headerlink" title="3. 利用二叉树的广义表表示来构造一棵二叉树 A(B(D), C(E( ,G), F(H,I))) A B C D E F G H I"></a>3. 利用二叉树的广义表表示来构造一棵二叉树 A(B(D), C(E( ,G), F(H,I))) A B C D E F G H I</h5><h5 id="4-利用二叉树的后缀表示来构造一棵二叉树-a-b-c-ab-c-c-a-b"><a href="#4-利用二叉树的后缀表示来构造一棵二叉树-a-b-c-ab-c-c-a-b" class="headerlink" title="4. 利用二叉树的后缀表示来构造一棵二叉树 (a+b)c ab+c * + c a b"></a>4. 利用二叉树的后缀表示来构造一棵二叉树 (a+b)<em>c ab+c</em> * + c a b</h5>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dat Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSI Physics Layer</title>
    <link href="/2022/10/20/Computer%20Networking/OSI%20Model/OSI%20Physics%20Layer/"/>
    <url>/2022/10/20/Computer%20Networking/OSI%20Model/OSI%20Physics%20Layer/</url>
    
    <content type="html"><![CDATA[<h1 id="OSI层次：物理层"><a href="#OSI层次：物理层" class="headerlink" title="OSI层次：物理层"></a>OSI层次：物理层</h1><blockquote><p>关键词：信号和介质</p><p>定义了在系统之间为了链路所需的电气的、功能的特征 (包括介质)</p><p>定义了电压级别、电压变化时机、物理数据速率、最大传输距离、物理连接器，以及其他相似性质</p></blockquote><h2 id="1-网络连接类型"><a href="#1-网络连接类型" class="headerlink" title="1. 网络连接类型"></a>1. 网络连接类型</h2><ol><li><p>多路复用共享介质</p><ul><li>多个主机可以访问同一介质</li><li>这意味着它们都共享相同的介质 —— 即是”wire”</li><li>如下图：</li></ul><pre><code class=" mermaid">graph LRs[== == == == == == == == == ==]a((a))--&gt; sb((b)) --&gt; sc((c))--&gt;sd((d))--&gt;s</code></pre></li><li><p>点对点(Point To Point)网络</p><ul><li>一个设备通过链路连接到另一个设备</li><li>最广泛地应用于拨号网络连接，也是你最熟悉的一种。使用电信号来完成传输。</li><li>如下图</li></ul><pre><code class=" mermaid">graph LRa((a))--&gt;b((b))</code></pre></li></ol><h2 id="2-局域网介质"><a href="#2-局域网介质" class="headerlink" title="2. 局域网介质"></a>2. 局域网介质</h2><p><strong>什么是局域网</strong></p><p> 局域网是一种网络种类，覆盖范围一般是方圆几千米之内，其具备的安装便捷、成本节约、扩展方便等特点使其在各类办公室内运用广泛。局域网可以实现<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/1452357?fromModule=lemma_inlink">文件管理</a>、应用软件共享、<a href="https://baike.baidu.com/item/%E6%89%93%E5%8D%B0%E6%9C%BA%E5%85%B1%E4%BA%AB/1979511?fromModule=lemma_inlink">打印机共享</a>等功能，在使用过程当中，通过维护局域网网络安全，能够有效地保护资料安全，保证局域网网络能够正常稳定的运行。</p><h3 id="2-1-UTP"><a href="#2-1-UTP" class="headerlink" title="2.1. UTP"></a>2.1. UTP</h3><blockquote><p><strong>无屏蔽双绞线</strong> (Unshielded Twisted Pair)</p></blockquote><h4 id="2-1-2-UTP-的分类"><a href="#2-1-2-UTP-的分类" class="headerlink" title="2.1.2. UTP 的分类"></a>2.1.2. UTP 的分类</h4><p><strong>一类线</strong>：主要用于语音传输，不用于数据传输</p><p><strong>二类线</strong>：传输频率 1 MHz，用于语音和最高 4 Mbps 的数据传输，常见于令牌网</p><p><strong>三类线</strong>：EIA / TIA568 标准指定电缆，传输频率 16 MHz ，用于语音传输及最高传输速率为 10 Mbps 的数据传输，主要用于10BASE-T</p><p><strong>四类线</strong>：传输频率为 20 MHz ，用于语音传输和最高传输速率 16 Mbps的数据传输，主要用于令牌网和 10BASE-T/100BASE-T</p><p><strong>五类线</strong>：增加了绕线密度，外套高质量绝缘材料，用于语音和数据传输 (主要为100/1000BASE-T)，是最常用的以太网电缆</p><p><strong>超五类线</strong>：衰减小，串扰少，具有更高的衰减/串扰比和信噪比、更小的时延误差，主要用于1000BASE-T</p><p><strong>六类线</strong>：传输频率为1MHz～250MHz，性能远高于超五类标准，适用于高于1Gbps的应用</p><p><strong>七类线</strong>：带宽为600MHz，可能用于今后的10G比特以太网。</p><h3 id="2-2-Coaxial-Cable"><a href="#2-2-Coaxial-Cable" class="headerlink" title="2.2. Coaxial Cable"></a>2.2. Coaxial Cable</h3><blockquote><p><strong>同轴电缆</strong></p></blockquote><p><a href="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/5.png"><img src="https://naturalifica.oss-cn-nanjing.aliyuncs.com/~/Users/wuchentian/SoloLearning/Blog/source/imgs202210290929399.png" alt="img"></a></p><ol><li>薄/厚</li><li>与双绞线相比，不使用中继器的网络运行时间更长</li><li>比光纤便宜但比双绞线贵</li><li>中间是铜导线，在外面缠上一层金属网，防止外部干扰，细导线传输相对近，粗导线传输相对比较远</li><li>500m左右，无论如何比双绞线传输更加远，成本也要高一点</li><li>内置无线网卡肯定没有同轴电缆，同轴电缆是比较落后的工艺。</li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="2-网线的分类"><a href="#2-网线的分类" class="headerlink" title="2.网线的分类"></a>2.网线的分类</h2><p>a.直通线</p><p>在所有末端使用T568A或者T568B</p><p>用于连接<strong>PC和交换机</strong>以及连接<strong>交换机和路由器</strong></p><p>b.反转线（控制线）</p><p>用于把PC连接到交换机或者路由器</p><p>一端的插脚1连接另一端的插脚8；然后插脚2连接到插脚7、插脚3连接到插脚6，以此类推</p><p>c.交叉线</p><p>一端是T568A，另一端是T568B</p><p>可用于PC与路由器直连，也可用于连接两个或多个集线器或交换机</p><p>连接两个独立的工作站以创建迷你局域网</p><h1 id="3-数据通信基本知识"><a href="#3-数据通信基本知识" class="headerlink" title="3.数据通信基本知识"></a>3.数据通信基本知识</h1><h2 id="①基本术语"><a href="#①基本术语" class="headerlink" title="①基本术语"></a>①基本术语</h2><p>信号：数据的电气或者电磁的表现</p><p>码元：在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</p><h2 id="②信号处理"><a href="#②信号处理" class="headerlink" title="②信号处理"></a>②信号处理</h2><p>模拟信号可以被分为简单信号和复合信号</p><p> 简单信号（正弦波）不能被分解为更简单的模拟信号</p><p> 复合信号可以被分解为多个<strong>正弦波</strong></p><p>复合模拟信号的分解：<strong>傅立叶分析</strong></p><p> 任何一个周期为T的有理周期性函数 g(t)可分解为若干项 （可能无限多项）正弦和余弦函数之和：<br>$$<br>g(t) = \frac12c+\sum_{i = 1}^{\infty}a_n\sin(2\pi nft)+\sum_{i = 1}^{\infty}b_n\cos(2\pi nft)<br>$$<br>数字信号一般是非周期性的，通常在传输介质上表现为方波</p><p>一个数字信号可以分解为无穷多个被称为谐波的简单正弦波，每个谐波都具有不同的频率与相位</p><p>在介质上发送数字信号时，其实质是在发送无穷多的简单谐波，如果某些分量未能忠实地通过介质传输，则在接收端将产生信号畸变</p><p>由于介质本身的限制，信号畸变是难以完全避免的</p><p>任何实际的信道都不是理想的，在传输信号时会产生各种失真以及带来多种干扰。</p><p>码元传输的速率越高，或信号传输的距离越远，在信道的输出端的波形的失真就越严重</p><h2 id="③理论基础"><a href="#③理论基础" class="headerlink" title="③理论基础"></a>③理论基础</h2><p>a.波特率和比特率</p><p>波特率（调制速率）：信号每秒钟变化的次数</p><p>比特率：每秒钟传送的二进制位数。</p><p>b.波特率与比特率的关系取决于信号值与比特位的关系</p><p>例：每个信号值表示为３位，则比特率是波特率的３倍；每个信号值表示为１位，则比特率和波特率相同</p><p>对于比特率为a bps的信道，发送８位所需的时间为 8/a秒，若８位为一个周期Ｔ，则一次谐波的频率是： f = a/8 Hz</p><h2 id="④数据通信技术：编码方式"><a href="#④数据通信技术：编码方式" class="headerlink" title="④数据通信技术：编码方式)"></a>④数据通信技术：编码方式)</h2>]]></content>
    
    
    <categories>
      
      <category>Computer Network</category>
      
      <category>OSI Model</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hardware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++内存分配——从类的初始化开始</title>
    <link href="/2022/10/19/C++%20Basic/Object%20Oriented/C++%20%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E2%80%94%E2%80%94%E4%BB%8E%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BC%80%E5%A7%8B%20/"/>
    <url>/2022/10/19/C++%20Basic/Object%20Oriented/C++%20%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E2%80%94%E2%80%94%E4%BB%8E%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BC%80%E5%A7%8B%20/</url>
    
    <content type="html"><![CDATA[<h4 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h4><p>事情是这样：在最近的一次C++作业中，我需要用<strong>链表</strong>实现一个<strong>双向队列</strong>。</p><p>我对链表节点的实现如下:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">struct <span class="hljs-keyword">Node</span><span class="hljs-title">&#123;</span><br><span class="hljs-title">    Node</span> *next;<br>    <span class="hljs-keyword">Node</span> <span class="hljs-title">*prev</span>;<br>    int val;<br>    <span class="hljs-keyword">Node</span><span class="hljs-title">(int</span> val, <span class="hljs-keyword">Node</span> <span class="hljs-title">*prev</span>, <span class="hljs-keyword">Node</span> <span class="hljs-title">*next</span>)；<br>&#125;;<br><br>CRMSH<br></code></pre></td></tr></table></figure><p>我对双向队列的实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Deque</span>&#123;<br>    <span class="hljs-type">int</span> size;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * front 和 rear 分别为虚拟头指针和尾指针</span><br><span class="hljs-comment">  */</span><br>    Node *front;<br>    Node *rear;<br>    <span class="hljs-built_in">Deque</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_front</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span></span>;<br>    <span class="hljs-type">void</span> pop_front;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_back</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>  ~<span class="hljs-built_in">Deque</span>() = deafult;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>当我试图利用 <code>Deque::push_back(int value)</code> 函数向队列中添加元素时，我起初的写法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">Deque::<span class="hljs-built_in">push_back</span>(<span class="hljs-type">int</span> value)&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @param value 新节点的值</span><br><span class="hljs-comment">  * @param prev 新节点的前一个节点</span><br><span class="hljs-comment">  * @param next 新节点的下一个节点</span><br><span class="hljs-comment">  * @return 一个船新节点</span><br><span class="hljs-comment">  */</span><br>    Node node = *<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(value, rear-&gt;prev, rear);<br>    rear-&gt;prev-&gt;next = &amp;node;<br>    ......<br>&#125;<br><br></code></pre></td></tr></table></figure><p>但是程序每次运行到这里都会中断，debug 显示无论我 new 多少个新的 node， 它们的地址都是一样的，因此所有新节点都连着它本身，于是爆栈了。但是如果我把写法改成如下这样，程序就恢复了正常：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">Deque::<span class="hljs-built_in">push_back</span>(<span class="hljs-type">int</span> value)&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @param value 新节点的值</span><br><span class="hljs-comment">  * @param prev 新节点的前一个节点</span><br><span class="hljs-comment">  * @param next 新节点的下一个节点</span><br><span class="hljs-comment">  * @return 一个船新节点</span><br><span class="hljs-comment">  */</span><br>    Node *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(value, rear-&gt;prev, rear);<br>    rear-&gt;prev-&gt;next = node;<br>    ......<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-一个合理的解释"><a href="#2-一个合理的解释" class="headerlink" title="2. 一个合理的解释"></a>2. 一个合理的解释</h4><p>首先我们需要了解 C++ 的内存分配</p><table><thead><tr><th>名称</th><th>特性</th></tr></thead><tbody><tr><td><strong>栈</strong></td><td>由编译器在需要时自动分配，不需要时自动清除的变量存储区。通常存放局部变量、函数参数等。</td></tr><tr><td><strong>堆</strong></td><td>由 new 分配的内存块，由程序员释放（编译器不管），一般一个 new 与一个 delete 对应，一个 new[] 与一个 delete[] 对应。如果程序员没有释放掉，资源将由操作系统在程序结束后自动回收。</td></tr><tr><td><strong>自由存储区</strong></td><td>由 malloc 等分配的内存块，和堆十分相似，用free来释放。（实际上和堆是同一块区域）</td></tr><tr><td><strong>全局/静态存储区</strong></td><td>全局变量和静态变量被分配到同一块内存中（在 C 语言中，全局变量又分为初始化的和未初始化的，C++ 中没有这一区分）。</td></tr><tr><td><strong>常量存储区</strong></td><td>这是一块特殊存储区，里边存放常量，不允许修改。</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">Node *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(value, rear-&gt;prev, rear);<br></code></pre></td></tr></table></figure><p>我们知道，由 <code>new</code> 建立的变量存储在堆中。因此上述代码在堆区新建一个对象，并且返回该对象的地址，由 <code>Node</code> 类型指针 <code>node</code> 存储。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">Node node = *<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(value, rear-&gt;prev, rear);<br></code></pre></td></tr></table></figure><p>上述代码同样新建一个 <code>Node</code> 对象，并将这个 Node 对象的值存储到一个 <code>Node</code> 类型的变量 <code>node</code> 中，相当于如下代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">Node *np = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(value, rear-&gt;prev, rear);<br>Node node = *np;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* node 只是值传递</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>因此，在下一步的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">rear-&gt;prev-&gt;next = &amp;node;<br></code></pre></td></tr></table></figure><p>中，<code>&amp;node</code> 根本就不是那个指向新节点的指针 <code>np</code>，而是一个临时栈变量 <code>node</code> 的地址。这里相当于 <code>np-&gt;prev-&gt;next = &amp;node</code>。</p><pre><code class=" mermaid">graph LRrear_prev---&gt;rear---&gt;rear_prevnp---&gt;new_Node&amp;node---&gt;somewhere</code></pre><p>转变成了</p><pre><code class=" mermaid">graph LRnp--&gt;rearnp--&gt;rear_prev--&gt;&amp;node--&gt;rear_prev&amp;node--&gt;rear</code></pre><p>再经过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">rear-&gt;prev = &amp;node<br></code></pre></td></tr></table></figure><p>这一步后，转变为</p><pre><code class=" mermaid">graph LRnp--&gt;rearnp--&gt;&amp;node--&gt;rear&amp;node--&gt;&amp;node--&gt;&amp;node</code></pre><p>在 <code>node</code>这里出现了死循环，导致内存爆了</p><h3 id="3-源码"><a href="#3-源码" class="headerlink" title="3. 源码"></a>3. 源码</h3><p>在这里贴上我所有成员函数的具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++">Node::<span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> val, Node *prev, Node *next)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;val = val;<br>    <span class="hljs-keyword">this</span>-&gt;next = next;<br>    <span class="hljs-keyword">this</span>-&gt;prev = prev;<br>&#125;<br><br><br>Deque::<span class="hljs-built_in">Deque</span>()&#123;<br>    <span class="hljs-keyword">this</span>-&gt;size = <span class="hljs-number">0</span>;<br>    front = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(<span class="hljs-number">-1</span>, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br>    rear = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(<span class="hljs-number">-1</span>, front, <span class="hljs-literal">nullptr</span>);<br>    front-&gt;next = rear;<br>    front-&gt;prev = <span class="hljs-literal">nullptr</span>;<br>    rear-&gt;next = <span class="hljs-literal">nullptr</span>;<br>    rear-&gt;prev = front;<br>&#125;<br><br>Deque::<span class="hljs-built_in">push_front</span>(<span class="hljs-type">int</span> value)&#123;<br>    Node *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(value, front, front-&gt;next);<br>    node-&gt;next-&gt;prev = node;<br>    front-&gt;next = node;<br>    <span class="hljs-keyword">this</span>-&gt;size++;<br>&#125;<br><br>Deque::<span class="hljs-built_in">push_back</span>(<span class="hljs-type">int</span> value)&#123;<br>    Node *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(value, rear-&gt;prev, rear);<br>    rear-&gt;prev-&gt;next = node;<br>    rear-&gt;prev = node;<br>    <span class="hljs-keyword">this</span>-&gt;size++;<br>&#125;<br><br>Deque::<span class="hljs-built_in">get_size</span>() <span class="hljs-type">const</span>&#123;<br>    cout &lt;&lt; <span class="hljs-keyword">this</span>-&gt;size &lt;&lt; endl;<br>&#125;<br><br>Deque::<span class="hljs-built_in">pop_front</span>()&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;size &lt;= <span class="hljs-number">0</span>)&#123;<br>        cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; (*(front-&gt;next)).val &lt;&lt; endl;<br>        front-&gt;next = front-&gt;next-&gt;next;<br>        front-&gt;next-&gt;prev = front;<br>        <span class="hljs-keyword">this</span>-&gt;size--;<br>    &#125;<br>&#125;<br><br>Deque::<span class="hljs-built_in">pop_back</span>()&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;size &lt;= <span class="hljs-number">0</span>)&#123;<br>        cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout &lt;&lt; (*(rear-&gt;prev)).val &lt;&lt; endl;<br>        rear-&gt;prev = rear-&gt;prev-&gt;prev;<br>        rear-&gt;prev-&gt;next = rear;<br>        <span class="hljs-keyword">this</span>-&gt;size--;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h4><ol><li><a href="http://t.csdn.cn/5QbW0">http://t.csdn.cn/5QbW0</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>C++ Basic</category>
      
      <category>Object Oriented</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Object Oriented</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java IO</title>
    <link href="/2022/10/16/Java%20Basic/Java%20IO/"/>
    <url>/2022/10/16/Java%20Basic/Java%20IO/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中的字符串处理</title>
    <link href="/2022/10/16/Java%20Basic/Java%20%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <url>/2022/10/16/Java%20Basic/Java%20%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h4 id="1-字符串拼接-concat"><a href="#1-字符串拼接-concat" class="headerlink" title="1. 字符串拼接(concat())"></a>1. 字符串拼接<code>(concat())</code></h4><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nim">/**<br>* java.lang.<span class="hljs-type">String</span><br>*/<br>public <span class="hljs-type">String</span> concat(<span class="hljs-type">String</span> str)<span class="hljs-meta">&#123;...&#125;</span><br><br>/**<br>* example<br>*/<br><br>private <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> getBCDString_4(<span class="hljs-type">int</span> val) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-built_in">result</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++, val = val / <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (val % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-built_in">result</span> = <span class="hljs-string">&quot;1&quot;</span>.concat(<span class="hljs-built_in">result</span>);<br>        &#125;    <br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">result</span> = <span class="hljs-string">&quot;0&quot;</span>.concat(<span class="hljs-built_in">result</span>);<br>        &#125;<br>                <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">result</span>;<br>&#125;<br><br><span class="hljs-type">JAVA</span><br></code></pre></td></tr></table></figure><h4 id="2-字符串转任意不同进制的整数-parseInt"><a href="#2-字符串转任意不同进制的整数-parseInt" class="headerlink" title="2. 字符串转任意不同进制的整数(parseInt())"></a>2. 字符串转任意不同进制的整数<code>(parseInt())</code></h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* java.lang.Integer</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-type">String</span> s)</span> throws NumberFormatException </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(s,<span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-type">String</span> s, <span class="hljs-type">int</span> radix)</span> throws NumberFormatException </span>&#123;...&#125;<br><span class="hljs-comment">//其中radix表示进制</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* example</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">NBCDTrueValue</span><span class="hljs-params">(<span class="hljs-type">String</span> operand)</span> </span>&#123;<br>    StringBuilder ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">StringBuilder</span>();<br>    <span class="hljs-keyword">if</span> (operand.<span class="hljs-built_in">startsWith</span>(<span class="hljs-string">&quot;1101&quot;</span>)) &#123;<br>        ans.<span class="hljs-built_in">append</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br>    &#125;<br>    operand = operand.<span class="hljs-built_in">substring</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; operand.<span class="hljs-built_in">length</span>() &amp;&amp; i &lt; <span class="hljs-number">28</span>; i += <span class="hljs-number">4</span>) &#123;<br>        ans.<span class="hljs-built_in">append</span>(Integer.<span class="hljs-built_in">valueOf</span>(operand.<span class="hljs-built_in">substring</span>(i, i + <span class="hljs-number">4</span>), <span class="hljs-number">2</span>));        <br>    &#125;<br>    <span class="hljs-keyword">return</span> Integer.<span class="hljs-built_in">parseInt</span>(ans.<span class="hljs-built_in">toString</span>());<br>&#125;<br><br>JAVA<br></code></pre></td></tr></table></figure><h4 id="3-和上一点类似的，还有Long-parseLong-Double-parseDouble"><a href="#3-和上一点类似的，还有Long-parseLong-Double-parseDouble" class="headerlink" title="3. 和上一点类似的，还有Long.parseLong(), Double.parseDouble()"></a>3. 和上一点类似的，还有<code>Long.parseLong()</code>, <code>Double.parseDouble()</code></h4><h4 id="4-整数转字符串"><a href="#4-整数转字符串" class="headerlink" title="4. 整数转字符串"></a>4. 整数转字符串</h4><ol><li></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ stack</title>
    <link href="/2022/10/10/C++%20Basic/STL%20Containers/C++%20stack/"/>
    <url>/2022/10/10/C++%20Basic/STL%20Containers/C++%20stack/</url>
    
    <content type="html"><![CDATA[<p><code>stack</code> 容器有广泛的应用。例如，编辑器中的 <code>undo</code> (撤销)机制就是用堆栈来记录连续的变化。撤销操作可以取消最后一个操作，这也是发生在堆栈顶部的操作。编译器使用堆栈来解析算术表达式， 当然也可以用堆栈来记录 C++ 代码的函数调用。</p><h4 id="1-头文件"><a href="#1-头文件" class="headerlink" title="1. 头文件"></a>1. 头文件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2. 初始化"></a>2. 初始化</h4><p>下面展示了如何定义一个用来存放字符串对象的 stack 容器：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::stack&lt;std::string&gt; words;<br></code></pre></td></tr></table></figure><p>stack 容器适配器的模板有两个参数。第一个参数是存储对象的类型，第二个参数是底层容器的类型。<code>stack&lt;T&gt;</code> 的底层容器默认是 <code>deque&lt;T&gt;</code>容器，因此模板类型其实是 <code>stack&lt;typename T, typename Container=deque&lt;T&gt;&gt;</code>。通过指定第二个模板类型参数，可以使用任意类型的底层容器，只要它们支持 <code>back()、push_back()、pop_back()、empty()、size()</code> 这些操作。</p><p>下面展示了如何定义一个使用 <code>list&lt;T&gt;</code> 的堆栈：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::stack&lt;std::string,std::list&lt;std::string&gt;&gt; fruit;<br></code></pre></td></tr></table></figure><p><code>stack&lt;T&gt;</code> 模板定义了拷贝构造函数，因而可以复制现有的 <code>stack</code> 容器：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::stack&lt;<span class="hljs-type">double</span>,std::list&lt;<span class="hljs-type">double</span>&gt;&gt;copy_stack &#123;my_stack&#125;<br></code></pre></td></tr></table></figure><p><code>copy_stack</code> 是 <code>my_stack</code> 的副本。在使用拷贝构造函数时，既可以用初始化列表，也可以用圆括号。</p><h4 id="3-常用函数和操作"><a href="#3-常用函数和操作" class="headerlink" title="3. 常用函数和操作"></a>3. 常用函数和操作</h4><ol><li>和其他序列容器相比，<code>stack</code> 是一类存储机制简单、所提供操作较少的容器。下面是 <code>stack</code> 容器可以提供的一套完整操作：</li></ol><ul><li><code>top()</code>：返回一个栈顶元素的引用，类型为 <code>T&amp;</code>。如果栈为空，返回值未定义。</li><li><code>push(const T&amp; obj)</code>：可以将对象副本压入栈顶。这是通过调用底层容器的 <code>push_back()</code> 函数完成的。</li><li><code>push(T&amp;&amp; obj)</code>：以移动对象的方式将对象压入栈顶。这是通过调用底层容器的有右值引用参数的 push_back() 函数完成的。</li><li><code>pop()</code>：弹出栈顶元素。</li><li><code>size()</code>：返回栈中元素的个数。</li><li><code>empty()</code>：在栈中没有元素的情况下返回 <code>true</code>。</li><li><code>emplace()</code>：用传入的参数调用构造函数，在栈顶生成对象。</li><li><code>swap(stack&lt;T&gt; &amp; other_stack)</code>：将当前栈中的元素和参数中的元素交换。参数所包含元素的类型必须和当前栈的相同。对于 stack 对象有一个特例化的全局函数 swap() 可以使用</li></ul><ol><li><code>stack&lt;T&gt;</code> 模板也定义了复制和移动版的 <code>operator=()</code> 函数，因此可以将一个 <code>stack</code> 对象赋值给另一个 <code>stack</code> 对象。<code>stack</code> 对象有一整套比较运算符。比较运算通过字典的方式来比较底层容器中相应的元素。字典比较是一种用来对字典中的单词进行排序的方式。依次比较对应元素的值，直到遇到两个不相等的元素。第一个不匹配的元素会作为字典比较的结果。如果一个 <code>stack</code> 的元素比另一个 <code>stack</code> 的多，但是所匹配的元素都相等，那么元素多的那个 <code>stack</code> 容器大于元素少的 <code>stack</code> 容器。</li><li>下面用 <code>stack</code> 实现一个表达式求值</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// A simple calculator using stack containers</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span>                                          <span class="hljs-comment">// For pow() function</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>                                       <span class="hljs-comment">// For standard streams</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span>                                          <span class="hljs-comment">// For stack&lt;T&gt; container</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span>                                      <span class="hljs-comment">// For remove()</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span>                                      <span class="hljs-comment">// For runtime_error exception</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>                                         <span class="hljs-comment">// For string class</span></span><br><span class="hljs-keyword">using</span> std::string;<br><br><span class="hljs-comment">// Returns value for operator precedence</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">size_t</span> <span class="hljs-title">precedence</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> op)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;+&#x27;</span> || op == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;*&#x27;</span> || op == <span class="hljs-string">&#x27;/&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;^&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">throw</span> std::runtime_error &#123;string &#123;<span class="hljs-string">&quot;invalid operator in precedence() function: &quot;</span>&#125; + op&#125;;<br>&#125;<br><br><span class="hljs-comment">// Execute an operation</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">execute</span><span class="hljs-params">(std::stack&lt;<span class="hljs-type">char</span>&gt;&amp; ops, std::stack&lt;<span class="hljs-type">double</span>&gt;&amp; operands)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> result &#123;&#125;;<br>    <span class="hljs-type">double</span> rhs &#123;operands.<span class="hljs-built_in">top</span>()&#125;;                            <span class="hljs-comment">// Get rhs...</span><br>    operands.<span class="hljs-built_in">pop</span>();                                         <span class="hljs-comment">// ...and delete from stack</span><br>    <span class="hljs-type">double</span> lhs &#123;operands.<span class="hljs-built_in">top</span>()&#125;;                            <span class="hljs-comment">// Get lhs...</span><br>    operands.<span class="hljs-built_in">pop</span>();                                         <span class="hljs-comment">// ...and delete from stack</span><br><br>    <span class="hljs-keyword">switch</span> (ops.<span class="hljs-built_in">top</span>())                                      <span class="hljs-comment">// Execute current op</span><br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>            result = lhs + rhs;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>            result = lhs - rhs;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>            result = lhs * rhs;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>            result = lhs / rhs;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;^&#x27;</span>:<br>            result = std::<span class="hljs-built_in">pow</span>(lhs, rhs);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">throw</span> std::runtime_error &#123;string&#123;<span class="hljs-string">&quot;invalid operator: &quot;</span>&#125; + ops.<span class="hljs-built_in">top</span>()&#125;;<br>    &#125;<br>    ops.<span class="hljs-built_in">pop</span>();                                              <span class="hljs-comment">// Delete op just executed</span><br>    operands.<span class="hljs-built_in">push</span>(result);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::stack&lt;<span class="hljs-type">double</span>&gt; operands;                            <span class="hljs-comment">// Push-down stack of operands</span><br>    std::stack&lt;<span class="hljs-type">char</span>&gt; operators;                             <span class="hljs-comment">// Push-down stack of operators</span><br>    string exp;                                             <span class="hljs-comment">// Expression to be evaluated</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;An arithmetic expression can include the operators +, -, *, /, and ^ for exponentiation.&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Enter an arithmetic expression and press Enter - enter an empty line to end:&quot;</span> &lt;&lt; std::endl;<br>            std::<span class="hljs-built_in">getline</span>(std::cin, exp, <span class="hljs-string">&#x27;\n&#x27;</span>);<br>            <span class="hljs-keyword">if</span> (exp.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">break</span>;<br>          <br>            <span class="hljs-comment">// Remove spaces</span><br>            exp.<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">remove</span>(std::<span class="hljs-built_in">begin</span>(exp), std::<span class="hljs-built_in">end</span>(exp), <span class="hljs-string">&#x27; &#x27;</span>), std::<span class="hljs-built_in">end</span>(exp));<br><br>            <span class="hljs-type">size_t</span> index &#123;&#125;;                                    <span class="hljs-comment">// Index to expression string</span><br><br>            <span class="hljs-comment">// Every expression must start with a numerical operand</span><br>            operands.<span class="hljs-built_in">push</span>(std::<span class="hljs-built_in">stod</span>(exp, &amp;index));              <span class="hljs-comment">// Push the first (lhs) operand on the stack</span><br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                operators.<span class="hljs-built_in">push</span>(exp[index++]);                     <span class="hljs-comment">// Push the operator on to the stack</span><br><br>                <span class="hljs-comment">// Get rhs operand</span><br>                <span class="hljs-type">size_t</span> i &#123;&#125;;                                      <span class="hljs-comment">// Index to substring</span><br>                operands.<span class="hljs-built_in">push</span>(std::<span class="hljs-built_in">stod</span>(exp.<span class="hljs-built_in">substr</span>(index), &amp;i));  <span class="hljs-comment">// Push rhs operand</span><br>                index += i;                                       <span class="hljs-comment">// Increment expression index</span><br><br>                <span class="hljs-keyword">if</span> (index == exp.<span class="hljs-built_in">length</span>())                        <span class="hljs-comment">// If we are at end of exp...</span><br>                &#123;<br>                    <span class="hljs-keyword">while</span> (!operators.<span class="hljs-built_in">empty</span>())                      <span class="hljs-comment">// ...execute outstanding ops</span><br>                        <span class="hljs-built_in">execute</span>(operators, operands);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// If we reach here, there&#x27;s another op...</span><br>                <span class="hljs-comment">// If there&#x27;s a previous op of equal or higher precedence execute it</span><br>                <span class="hljs-keyword">while</span> (!operators.<span class="hljs-built_in">empty</span>() &amp;&amp; <span class="hljs-built_in">precedence</span>(exp[index]) &lt;= <span class="hljs-built_in">precedence</span>(operators.<span class="hljs-built_in">top</span>()))<br>                    <span class="hljs-built_in">execute</span>(operators, operands);                   <span class="hljs-comment">//  Execute previous op.</span><br>            &#125;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;result = &quot;</span> &lt;&lt; operands.<span class="hljs-built_in">top</span>() &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e)<br>    &#123;<br>        std::cerr &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Calculator ending...&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>C++<br></code></pre></td></tr></table></figure><p> <a href="http://c.biancheng.net/view/180.html">while 循环</a>包含在一个 try 代码块中，这样就可以捕获抛出的任何异常。在 <code>catch</code> 代码块中，调用异常对象的成员函数 <code>what()</code> 会将错误信息输出到标准错误流中。在一个死循环中执行输入操作，当输入一个空字符串时，循环结束。可以使用 <code>remove()</code> 算法消除非空字符串中的空格。<code>remove()</code> 不能移除元素，而只能通过移动元素的方式来覆盖要移除的元素。</p><p> 为了移除 <code>exp</code> 字符串中剩下的多余元素，可以用两个迭代器作为参数调用 <code>erase()</code>。其中第一个迭代器由 <code>remove()</code> 返回，指向字符串的最后一个有效元素的后面位置。第二个迭代器是字符串原始状态的结束迭代器。这两个迭代器指定范围的元素会被删除。</p><p> 每个浮点操作数的值都是用定义在头文件 <code>string</code> 中的 <code>stod()</code> 函数获取的。这会将第一个字符串参数中的字符序列转换为 <code>double</code> 值。函数会从第一个表示有效浮点数的字符串的第一个字符开始，获取最长字符序列。第二个参数是一个整型<a href="http://c.biancheng.net/c/80/">指针</a>，保存的是字符串中非数字部分第一个字符的索引。<code>string</code> 头文件中定义了 <code>stod()</code> 函数，它可以返回一个 <code>float</code> 值。 <code>stod()</code>会返回一个 <code>long double</code> 值。</p><p> 因为所有的运算符都需要两个操作数，所以有效的输入字符串格式总是为 <code>operand op operand op operand</code>，等等。序列的第一个和最后一个元素都是操作数，每对操作数之间有一个运算符。因为有效表达式总是以操作数开头，所以第一个操作数在分析表达式的嵌套循环之前被提取出来。在循环中，输入字符串的运算符会被压入 <code>operators</code> 栈。在确认没有到达字符串末尾后，再从 <code>exp</code> 提取第二个操作数。这时，<code>stod()</code> 的第一个参数是从 <code>index</code> 开始的 <code>exp</code> 字符串，它是被压入 <code>operators</code> 栈的运算符后的字符。非数字字符串的第一个索引保存在 <code>i</code> 中。因为 <code>i</code> 是相对于 <code>index </code>的，所以我们会将 <code>index</code> 加上 <code>i</code>的值，使它指向操作数后的一个运算符(如果是 <code>exp</code> 中的最后一个操作数，它会指向字符串末尾的下一个位置)。</p><p> 当 <code>index</code> 的值超过 <code>exp</code> 的最后一个字符时，会执行 <code>operators </code>容器中剩下的运算符。如果没有到达字符串末尾，<code>operators</code> 容器也不为空，我们会比较 <code>operators</code> 栈顶运算符和 <code>exp</code> 中下一个运算符的优先级。如果栈顶运算符的优先级高于下一个运算符，就先执行栈顶的运算符。否则，就不执行栈顶运算符，在下一次循环开始时，将下一个运算符压入 <code>operators</code> 栈。通过这种方式，就可以正确计算出带优先级的表达式的值。</p><h4 id="4-参考文章-amp-视频"><a href="#4-参考文章-amp-视频" class="headerlink" title="4. 参考文章 &amp; 视频"></a>4. 参考文章 &amp; 视频</h4><ol><li><a href="http://c.biancheng.net/view/478.html">C++ stack(STL stack)用法详解</a></li><li><a href="https://b23.tv/hIdZ8ul">【数据结构】《编程实现》(栈的应用)（表达式的求值）-哔哩哔哩</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>C++ Basic</category>
      
      <category>STL Containers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ stack</title>
    <link href="/2022/10/10/C++%20Basic/%E8%80%83%E8%AF%95%E5%BF%85%E5%A4%87/C++%20%E5%B8%B8%E7%94%A8%E6%89%8B%E5%86%99%E5%87%BD%E6%95%B0/"/>
    <url>/2022/10/10/C++%20Basic/%E8%80%83%E8%AF%95%E5%BF%85%E5%A4%87/C++%20%E5%B8%B8%E7%94%A8%E6%89%8B%E5%86%99%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="1-大数加法"><a href="#1-大数加法" class="headerlink" title="1. 大数加法"></a>1. 大数加法</h4><h5 id="1-1-string-不方便"><a href="#1-1-string-不方便" class="headerlink" title="1.1. string(不方便)"></a>1.1. <code>string</code>(不方便)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span><span class="hljs-comment">//需要用到其中的 reverse(T&amp; begin, )</span></span><br><span class="hljs-function">string <span class="hljs-title">addStr</span><span class="hljs-params">(string src, string dest)</span></span>&#123;<br>  string ans;<br>  <span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; src.<span class="hljs-built_in">size</span>() || i &lt; dest.<span class="hljs-built_in">size</span>(); i++)&#123;<br>    <br>  &#125;<br>  <br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="1-2-vector（方便）"><a href="#1-2-vector（方便）" class="headerlink" title="1.2. vector（方便）"></a>1.2. <code>vector</code>（方便）</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">addVec</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; v1, vector&lt;<span class="hljs-type">int</span>&gt; v2)</span></span>&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 注意这里的vector将原有的大数倒序存储</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(max(v1.size(), v2.size()), <span class="hljs-number">0</span>)</span></span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">max</span>(v1.<span class="hljs-built_in">size</span>(), v2.<span class="hljs-built_in">size</span>()); i++)&#123;<br>    <span class="hljs-keyword">if</span>(i &lt; v1.<span class="hljs-built_in">size</span>())&#123;<br>      ans[i] += v1[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i &lt; v2.<span class="hljs-built_in">size</span>())&#123;<br>      ans[i] += v2[i];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i++)&#123;<br>    <span class="hljs-keyword">while</span>(ans[i] &gt;= <span class="hljs-number">10</span>)&#123;<br>      ans[i] -= <span class="hljs-number">10</span>;<br>      ans[i + <span class="hljs-number">1</span>]++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(ans[ans.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>] &lt; <span class="hljs-number">10</span>)&#123;<br>    <span class="hljs-keyword">return</span> ans;<br>  &#125;<br>  ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">while</span>(ans[ans.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>] &gt;= <span class="hljs-number">10</span>)&#123;<br>    ans[ans.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>] -= <span class="hljs-number">10</span>;<br>    ans[ans.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h5 id="1-3-string-amp-vector-方便"><a href="#1-3-string-amp-vector-方便" class="headerlink" title="1.3 string &amp; vector (方便)"></a>1.3 <code>string &amp; vector </code>(方便)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">add</span><span class="hljs-params">(string s1, string s2)</span></span>&#123;<br>  vector&lt;<span class="hljs-type">int</span>&gt; vec1, vec2, ansVec;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = s1.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>    vec1.<span class="hljs-built_in">push_back</span>(s1[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = s2.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>    vec2.<span class="hljs-built_in">push_back</span>(s2[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>  &#125;<br>  ansVec = <span class="hljs-built_in">addVec</span>(vec1, vec2);<br>  <span class="hljs-built_in">reverse</span>(ansVec.<span class="hljs-built_in">begin</span>(), ansVec.<span class="hljs-built_in">end</span>());<br>  string ansStr;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ansVec.<span class="hljs-built_in">size</span>(); i++)&#123;<br>    ansStr += (ansVec[i] + <span class="hljs-string">&#x27;0&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> ansStr;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-连续输入模版"><a href="#2-连续输入模版" class="headerlink" title="2. 连续输入模版"></a>2. 连续输入模版</h4><h5 id="2-1-允许使用-Containers"><a href="#2-1-允许使用-Containers" class="headerlink" title="2.1. 允许使用 Containers"></a>2.1. 允许使用 Containers</h5><h4 id="3-字符串分割"><a href="#3-字符串分割" class="headerlink" title="3. 字符串分割"></a>3. 字符串分割</h4><h5 id="3-1-用-vector"><a href="#3-1-用-vector" class="headerlink" title="3.1. 用 vector"></a>3.1. 用 <code>vector</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-type">const</span> string &amp;str, <span class="hljs-type">char</span> sep)</span> </span>&#123;<br>  <span class="hljs-function">stringstream <span class="hljs-title">ss</span><span class="hljs-params">(str)</span></span>;<br>  vector&lt;string&gt; res;<br>  string temp;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(ss, temp, sep)) &#123;<br>    res.<span class="hljs-built_in">push_back</span>(temp);<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br><br>C++<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++ Basic</category>
      
      <category>考试必备</category>
      
    </categories>
    
    
    <tags>
      
      <tag>proficiency</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LinkedList</title>
    <link href="/2022/10/10/Data%20Structure/LinkedList/"/>
    <url>/2022/10/10/Data%20Structure/LinkedList/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
